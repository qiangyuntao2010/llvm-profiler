!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AAMDNodes	include/IR/Metadata.h	/^  explicit AAMDNodes(MDNode *T = nullptr, MDNode *S = nullptr,$/;"	f	struct:llvm::AAMDNodes
AAMDNodes	include/IR/Metadata.h	/^struct AAMDNodes {$/;"	s	namespace:llvm
ABIAlign	include/IR/DataLayout.h	/^  unsigned ABIAlign : 16;$/;"	m	struct:llvm::LayoutAlignElem
ABIAlign	include/IR/DataLayout.h	/^  unsigned ABIAlign;$/;"	m	struct:llvm::PointerAlignElem
ADDR_MASK	tools/camp/ShadowMemory.hpp	21;"	d
ADDR_MASK	tools/campSampling/ShadowMemory.hpp	21;"	d
ADDR_MASK	tools/objtrace/ShadowMemory.hpp	21;"	d
AD_ATT	include/IR/InlineAsm.h	/^    AD_ATT,$/;"	e	enum:llvm::InlineAsm::AsmDialect
AD_Intel	include/IR/InlineAsm.h	/^    AD_Intel$/;"	e	enum:llvm::InlineAsm::AsmDialect
AGGREGATE_ALIGN	include/IR/DataLayout.h	/^  AGGREGATE_ALIGN = 'a'$/;"	e	enum:llvm::AlignTypeEnum
AK_Any	include/IR/Intrinsics.h	/^      AK_Any,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
AK_AnyFloat	include/IR/Intrinsics.h	/^      AK_AnyFloat,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
AK_AnyInteger	include/IR/Intrinsics.h	/^      AK_AnyInteger,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
AK_AnyPointer	include/IR/Intrinsics.h	/^      AK_AnyPointer$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
AK_AnyVector	include/IR/Intrinsics.h	/^      AK_AnyVector,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
APIntMoveTy	include/IR/ConstantRange.h	/^  typedef APInt APIntMoveTy;$/;"	t	class:llvm::ConstantRange
ARM	include/corelab/Metadata/NamedMetadata.h	/^				ARM = 1,$/;"	e	enum:corelab::EsperantoNamer::EsperantoPlatform
ARM_AAPCS	include/IR/CallingConv.h	/^    ARM_AAPCS = 67,$/;"	e	enum:llvm::CallingConv::__anon7
ARM_AAPCS_VFP	include/IR/CallingConv.h	/^    ARM_AAPCS_VFP = 68,$/;"	e	enum:llvm::CallingConv::__anon7
ARM_APCS	include/IR/CallingConv.h	/^    ARM_APCS = 66,$/;"	e	enum:llvm::CallingConv::__anon7
AShrOperator	include/IR/Operator.h	/^class AShrOperator$/;"	c	namespace:llvm
AVR	include/corelab/Metadata/NamedMetadata.h	/^				AVR = 2$/;"	e	enum:corelab::EsperantoNamer::EsperantoPlatform
Acquire	include/IR/Instructions.h	/^  Acquire = 4,$/;"	e	enum:llvm::AtomicOrdering
AcquireRelease	include/IR/Instructions.h	/^  AcquireRelease = 6,$/;"	e	enum:llvm::AtomicOrdering
Add	include/IR/Instructions.h	/^    Add,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
AddFPMathAttributes	include/IR/IRBuilder.h	/^  Instruction *AddFPMathAttributes(Instruction *I,$/;"	f	class:llvm::IRBuilder
AddOperator	include/IR/Operator.h	/^class AddOperator$/;"	c	namespace:llvm
AddrSpaceCastInst	include/IR/Instructions.h	/^class AddrSpaceCastInst : public CastInst {$/;"	c	namespace:llvm
AddressSpace	include/IR/DataLayout.h	/^  uint32_t AddressSpace;$/;"	m	struct:llvm::PointerAlignElem
Adjacencies	include/corelab/Metadata/typedefs.h	/^  typedef DenseMap<Vertex,VertexList> Adjacencies;$/;"	t	namespace:corelab
AdjustBlockAddressRefCount	include/IR/BasicBlock.h	/^  void AdjustBlockAddressRefCount(int Amt) {$/;"	f	class:llvm::BasicBlock
After	include/corelab/Utilities/InstInsertPt.h	/^      static InstInsertPt After(Instruction *i, BasicBlock *bb = 0) {$/;"	f	class:corelab::InstInsertPt
AliasList	include/IR/Module.h	/^  AliasListType AliasList;        \/\/\/< The Aliases in the module$/;"	m	class:llvm::Module
AliasListType	include/IR/Module.h	/^  typedef iplist<GlobalAlias> AliasListType;$/;"	t	class:llvm::Module
AlignInBits	include/IR/DebugInfoMetadata.h	/^  uint64_t AlignInBits;$/;"	m	class:llvm::MDType
AlignType	include/IR/DataLayout.h	/^  unsigned AlignType : 8;$/;"	m	struct:llvm::LayoutAlignElem
AlignTypeEnum	include/IR/DataLayout.h	/^enum AlignTypeEnum {$/;"	g	namespace:llvm
Alignment	include/IR/Attributes.h	/^    Alignment,             \/\/\/< Alignment of parameter (5 bits)$/;"	e	enum:llvm::Attribute::AttrKind
Alignment	include/IR/Attributes.h	/^  uint64_t Alignment;$/;"	m	class:llvm::AttrBuilder
AlignmentBits	include/IR/GlobalObject.h	/^  static const unsigned AlignmentBits = 5;$/;"	m	class:llvm::GlobalObject
AlignmentMask	include/IR/GlobalObject.h	/^  static const unsigned AlignmentMask = (1 << AlignmentBits) - 1;$/;"	m	class:llvm::GlobalObject
Alignments	include/IR/DataLayout.h	/^  SmallVector<LayoutAlignElem, 16> Alignments;$/;"	m	class:llvm::DataLayout
AllEnumTypes	include/IR/DIBuilder.h	/^    SmallVector<Metadata *, 4> AllEnumTypes;$/;"	m	class:llvm::DIBuilder
AllGVs	include/IR/DIBuilder.h	/^    SmallVector<Metadata *, 4> AllGVs;$/;"	m	class:llvm::DIBuilder
AllImportedModules	include/IR/DIBuilder.h	/^    SmallVector<TrackingMDNodeRef, 4> AllImportedModules;$/;"	m	class:llvm::DIBuilder
AllPassesID	include/IR/PassManager.h	/^  static const uintptr_t AllPassesID = (intptr_t)(-3);$/;"	m	class:llvm::PreservedAnalyses
AllRetainTypes	include/IR/DIBuilder.h	/^    SmallVector<TrackingMDNodeRef, 4> AllRetainTypes;$/;"	m	class:llvm::DIBuilder
AllSubprograms	include/IR/DIBuilder.h	/^    SmallVector<Metadata *, 4> AllSubprograms;$/;"	m	class:llvm::DIBuilder
AllocInfo	tools/objtrace/ctxObjtraceRuntime.h	/^typedef std::set<size_t> AllocInfo;$/;"	t
AllocInfo	tools/objtrace/objtraceruntime.h	/^typedef std::set<size_t> AllocInfo;$/;"	t
AllocMap	tools/objtrace/ctxObjtraceRuntime.h	/^typedef std::map<FullID, AllocInfo> AllocMap;$/;"	t
AllocMap	tools/objtrace/objtraceruntime.h	/^typedef std::map<FullID, AllocInfo> AllocMap;$/;"	t
AllocPage	tools/camp/ShadowMemory.hpp	/^		static inline void AllocPage (void* addr, size_t size){$/;"	f	class:ShadowMemoryManager
AllocPage	tools/campSampling/ShadowMemory.hpp	/^		static inline void AllocPage (void* addr, size_t size){$/;"	f	class:ShadowMemoryManager
AllocPage	tools/objtrace/ShadowMemory.hpp	/^		static inline void AllocPage (void* addr, size_t size){$/;"	f	class:ShadowMemoryManager
AllocaInst	include/IR/Instructions.h	/^class AllocaInst : public UnaryInstruction {$/;"	c	namespace:llvm
AllowReciprocal	include/IR/Operator.h	/^    AllowReciprocal = (1 << 4)$/;"	e	enum:llvm::FastMathFlags::__anon21
AllowUnresolvedNodes	include/IR/DIBuilder.h	/^    bool AllowUnresolvedNodes;$/;"	m	class:llvm::DIBuilder
AlwaysInline	include/IR/Attributes.h	/^    AlwaysInline,          \/\/\/< inline=always$/;"	e	enum:llvm::Attribute::AttrKind
AnUsageMap	include/IR/LegacyPassManagers.h	/^  DenseMap<Pass *, AnalysisUsage *> AnUsageMap;$/;"	m	class:llvm::PMTopLevelManager
AnalysisManager	include/IR/PassManager.h	/^  AnalysisManager(AnalysisManager &&Arg)$/;"	f	class:llvm::AnalysisManager
AnalysisManager	include/IR/PassManager.h	/^  AnalysisManager(bool DebugLogging = false) : DebugLogging(DebugLogging) {}$/;"	f	class:llvm::AnalysisManager
AnalysisManager	include/IR/PassManager.h	/^class AnalysisManager$/;"	c	namespace:llvm
AnalysisManagerBase	include/IR/PassManager.h	/^  AnalysisManagerBase() {}$/;"	f	class:llvm::detail::AnalysisManagerBase
AnalysisManagerBase	include/IR/PassManager.h	/^  AnalysisManagerBase(AnalysisManagerBase &&Arg)$/;"	f	class:llvm::detail::AnalysisManagerBase
AnalysisManagerBase	include/IR/PassManager.h	/^template <typename DerivedT, typename IRUnitT> class AnalysisManagerBase {$/;"	c	namespace:llvm::detail
AnalysisPassConcept	include/IR/PassManagerInternal.h	/^template <typename IRUnitT> struct AnalysisPassConcept {$/;"	s	namespace:llvm::detail
AnalysisPassInfos	include/IR/LegacyPassManagers.h	/^  mutable DenseMap<AnalysisID, const PassInfo *> AnalysisPassInfos;$/;"	m	class:llvm::PMTopLevelManager
AnalysisPassMapT	include/IR/PassManager.h	/^  typedef DenseMap<void *, std::unique_ptr<PassConceptT>> AnalysisPassMapT;$/;"	t	class:llvm::detail::AnalysisManagerBase
AnalysisPassModel	include/IR/PassManagerInternal.h	/^  AnalysisPassModel(AnalysisPassModel &&Arg) : Pass(std::move(Arg.Pass)) {}$/;"	f	struct:llvm::detail::AnalysisPassModel
AnalysisPassModel	include/IR/PassManagerInternal.h	/^  AnalysisPassModel(const AnalysisPassModel &Arg) : Pass(Arg.Pass) {}$/;"	f	struct:llvm::detail::AnalysisPassModel
AnalysisPassModel	include/IR/PassManagerInternal.h	/^  explicit AnalysisPassModel(PassT Pass) : Pass(std::move(Pass)) {}$/;"	f	struct:llvm::detail::AnalysisPassModel
AnalysisPassModel	include/IR/PassManagerInternal.h	/^struct AnalysisPassModel<IRUnitT, PassT, false> : AnalysisPassConcept<IRUnitT> {$/;"	s	namespace:llvm::detail
AnalysisPassModel	include/IR/PassManagerInternal.h	/^struct AnalysisPassModel<IRUnitT, PassT, true> : AnalysisPassConcept<IRUnitT> {$/;"	s	namespace:llvm::detail
AnalysisPasses	include/IR/PassManager.h	/^  AnalysisPassMapT AnalysisPasses;$/;"	m	class:llvm::detail::AnalysisManagerBase
AnalysisResultConcept	include/IR/PassManagerInternal.h	/^template <typename IRUnitT> struct AnalysisResultConcept {$/;"	s	namespace:llvm::detail
AnalysisResultListMapT	include/IR/PassManager.h	/^  typedef DenseMap<IRUnitT *, AnalysisResultListT> AnalysisResultListMapT;$/;"	t	class:llvm::AnalysisManager
AnalysisResultListT	include/IR/PassManager.h	/^      AnalysisResultListT;$/;"	t	class:llvm::AnalysisManager
AnalysisResultLists	include/IR/PassManager.h	/^  AnalysisResultListMapT AnalysisResultLists;$/;"	m	class:llvm::AnalysisManager
AnalysisResultMapT	include/IR/PassManager.h	/^                   typename AnalysisResultListT::iterator> AnalysisResultMapT;$/;"	t	class:llvm::AnalysisManager
AnalysisResultModel	include/IR/PassManagerInternal.h	/^  AnalysisResultModel(AnalysisResultModel &&Arg)$/;"	f	struct:llvm::detail::AnalysisResultModel
AnalysisResultModel	include/IR/PassManagerInternal.h	/^  AnalysisResultModel(const AnalysisResultModel &Arg) : Result(Arg.Result) {}$/;"	f	struct:llvm::detail::AnalysisResultModel
AnalysisResultModel	include/IR/PassManagerInternal.h	/^  explicit AnalysisResultModel(ResultT Result) : Result(std::move(Result)) {}$/;"	f	struct:llvm::detail::AnalysisResultModel
AnalysisResultModel	include/IR/PassManagerInternal.h	/^struct AnalysisResultModel<IRUnitT, PassT, ResultT, PreservedAnalysesT, false>$/;"	s	namespace:llvm::detail
AnalysisResultModel	include/IR/PassManagerInternal.h	/^struct AnalysisResultModel<IRUnitT, PassT, ResultT, PreservedAnalysesT, true>$/;"	s	namespace:llvm::detail
AnalysisResults	include/IR/PassManager.h	/^  AnalysisResultMapT AnalysisResults;$/;"	m	class:llvm::AnalysisManager
And	include/IR/Instructions.h	/^    And,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
AnonGlobalIDs	include/IR/Mangler.h	/^  mutable DenseMap<const GlobalValue*, unsigned> AnonGlobalIDs;$/;"	m	class:llvm::Mangler
Any	include/IR/Comdat.h	/^    Any,          \/\/\/< The linker may choose any COMDAT.$/;"	e	enum:llvm::Comdat::SelectionKind
AnyBinaryOp_match	include/IR/PatternMatch.h	/^  AnyBinaryOp_match(const LHS_t &LHS, const RHS_t &RHS) : L(LHS), R(RHS) {}$/;"	f	struct:llvm::PatternMatch::AnyBinaryOp_match
AnyBinaryOp_match	include/IR/PatternMatch.h	/^template <typename LHS_t, typename RHS_t> struct AnyBinaryOp_match {$/;"	s	namespace:llvm::PatternMatch
AnyReg	include/IR/CallingConv.h	/^    AnyReg = 13,$/;"	e	enum:llvm::CallingConv::__anon7
Append	include/IR/Module.h	/^    Append = 5,$/;"	e	enum:llvm::Module::ModFlagBehavior
AppendUnique	include/IR/Module.h	/^    AppendUnique = 6,$/;"	e	enum:llvm::Module::ModFlagBehavior
AppendingLinkage	include/IR/GlobalValue.h	/^    AppendingLinkage,   \/\/\/< Special purpose, only applies to global arrays$/;"	e	enum:llvm::GlobalValue::LinkageTypes
Arg	include/IR/DebugInfoMetadata.h	/^  unsigned Arg;$/;"	m	class:llvm::MDLocalVariable
ArgKind	include/IR/Intrinsics.h	/^    enum ArgKind {$/;"	g	struct:llvm::Intrinsic::IITDescriptor
Argument	include/IR/Argument.h	/^class Argument : public Value, public ilist_node<Argument> {$/;"	c	namespace:llvm
Argument	include/IR/Intrinsics.h	/^      Argument, ExtendArgument, TruncArgument, HalfVecArgument,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
ArgumentList	include/IR/Function.h	/^  mutable ArgumentListType ArgumentList;  \/\/\/< The formal arguments$/;"	m	class:llvm::Function
ArgumentListType	include/IR/Function.h	/^  typedef iplist<Argument> ArgumentListType;$/;"	t	class:llvm::Function
ArgumentVal	include/IR/Value.h	/^    ArgumentVal,              \/\/ This is an instance of Argument$/;"	e	enum:llvm::Value::ValueTy
Argument_Info	include/IR/Intrinsics.h	/^      unsigned Argument_Info;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon15
Argument_match	include/IR/PatternMatch.h	/^  Argument_match(unsigned OpIdx, const Opnd_t &V) : OpI(OpIdx), Val(V) {}$/;"	f	struct:llvm::PatternMatch::Argument_match
Argument_match	include/IR/PatternMatch.h	/^template <typename Opnd_t> struct Argument_match {$/;"	s	namespace:llvm::PatternMatch
ArrayTyID	include/IR/Type.h	/^    ArrayTyID,       \/\/\/< 13: Arrays$/;"	e	enum:llvm::Type::TypeID
ArrayType	include/IR/DerivedTypes.h	/^class ArrayType : public SequentialType {$/;"	c	namespace:llvm
AsmDialect	include/IR/InlineAsm.h	/^  enum AsmDialect {$/;"	g	class:llvm::InlineAsm
AsmString	include/IR/InlineAsm.h	/^  std::string AsmString, Constraints;$/;"	m	class:llvm::InlineAsm
AssemblyAnnotationWriter	include/IR/AssemblyAnnotationWriter.h	/^class AssemblyAnnotationWriter {$/;"	c	namespace:llvm
Assert	include/IR/ValueHandle.h	/^    Assert,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
AssertOK	include/IR/Instructions.h	/^  void AssertOK() {$/;"	f	class:llvm::ICmpInst
AssertingVH	include/IR/ValueHandle.h	/^  AssertingVH() : ThePtr(nullptr) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	include/IR/ValueHandle.h	/^  AssertingVH() : ValueHandleBase(Assert) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	include/IR/ValueHandle.h	/^  AssertingVH(ValueTy *P) : ThePtr(GetAsValue(P)) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	include/IR/ValueHandle.h	/^  AssertingVH(ValueTy *P) : ValueHandleBase(Assert, GetAsValue(P)) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	include/IR/ValueHandle.h	/^  AssertingVH(const AssertingVH &RHS) : ValueHandleBase(Assert, RHS) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	include/IR/ValueHandle.h	/^class AssertingVH$/;"	c	namespace:llvm
AtomicCmpXchgInst	include/IR/Instructions.h	/^class AtomicCmpXchgInst : public Instruction {$/;"	c	namespace:llvm
AtomicOrdering	include/IR/Instructions.h	/^enum AtomicOrdering {$/;"	g	namespace:llvm
AtomicRMWInst	include/IR/Instructions.h	/^class AtomicRMWInst : public Instruction {$/;"	c	namespace:llvm
AttrBuilder	include/IR/Attributes.h	/^  AttrBuilder() : Attrs(0), Alignment(0), StackAlignment(0), DerefBytes(0) {}$/;"	f	class:llvm::AttrBuilder
AttrBuilder	include/IR/Attributes.h	/^  AttrBuilder(const Attribute &A)$/;"	f	class:llvm::AttrBuilder
AttrBuilder	include/IR/Attributes.h	/^  explicit AttrBuilder(uint64_t Val)$/;"	f	class:llvm::AttrBuilder
AttrBuilder	include/IR/Attributes.h	/^class AttrBuilder {$/;"	c	namespace:llvm
AttrKind	include/IR/Attributes.h	/^  enum AttrKind {$/;"	g	class:llvm::Attribute
Attribute	include/IR/Attributes.h	/^  Attribute() : pImpl(nullptr) {}$/;"	f	class:llvm::Attribute
Attribute	include/IR/Attributes.h	/^  Attribute(AttributeImpl *A) : pImpl(A) {}$/;"	f	class:llvm::Attribute
Attribute	include/IR/Attributes.h	/^class Attribute {$/;"	c	namespace:llvm
AttributeFuncs	include/IR/Attributes.h	/^namespace AttributeFuncs {$/;"	n	namespace:llvm
AttributeList	include/IR/Instructions.h	/^  AttributeSet AttributeList; \/\/\/< parameter attributes for call$/;"	m	class:llvm::CallInst
AttributeList	include/IR/Instructions.h	/^  AttributeSet AttributeList;$/;"	m	class:llvm::InvokeInst
AttributeSet	include/IR/Attributes.h	/^  AttributeSet() : pImpl(nullptr) {}$/;"	f	class:llvm::AttributeSet
AttributeSet	include/IR/Attributes.h	/^  explicit AttributeSet(AttributeSetImpl *LI) : pImpl(LI) {}$/;"	f	class:llvm::AttributeSet
AttributeSet	include/IR/Attributes.h	/^class AttributeSet {$/;"	c	namespace:llvm
AttributeSets	include/IR/Function.h	/^  AttributeSet AttributeSets;             \/\/\/< Parameter attributes$/;"	m	class:llvm::Function
Attributes	include/IR/DebugInfoMetadata.h	/^  unsigned Attributes;$/;"	m	class:llvm::MDObjCProperty
Attrs	include/IR/Attributes.h	/^  std::bitset<Attribute::EndAttrKinds> Attrs;$/;"	m	class:llvm::AttrBuilder
AvailableAnalysis	include/IR/LegacyPassManagers.h	/^  DenseMap<AnalysisID, Pass*> AvailableAnalysis;$/;"	m	class:llvm::PMDataManager
AvailableExternallyLinkage	include/IR/GlobalValue.h	/^    AvailableExternallyLinkage, \/\/\/< Available for inspection, not emission.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
BAD_BINOP	include/IR/Instructions.h	/^    BAD_BINOP$/;"	e	enum:llvm::AtomicRMWInst::BinOp
BAD_FCMP_PREDICATE	include/IR/InstrTypes.h	/^    BAD_FCMP_PREDICATE = FCMP_TRUE + 1,$/;"	e	enum:llvm::CmpInst::Predicate
BAD_ICMP_PREDICATE	include/IR/InstrTypes.h	/^    BAD_ICMP_PREDICATE = ICMP_SLE + 1$/;"	e	enum:llvm::CmpInst::Predicate
BB	include/IR/IRBuilder.h	/^  BasicBlock *BB;$/;"	m	class:llvm::IRBuilderBase
BB	include/IR/InstIterator.h	/^  BB_i_t BB; \/\/ BasicBlocksType::iterator$/;"	m	class:llvm::InstIterator
BBID	include/corelab/CAMP/campCommon.h	/^		typedef uint16_t 	BBID;$/;"	t	namespace:corelab::CAMP
BBID	lib/CAMP/campCommon.h	/^		typedef uint16_t 	BBID;$/;"	t	namespace:corelab::CAMP
BBIty	include/IR/InstIterator.h	/^  typedef BB_i_t BBIty;$/;"	t	class:llvm::InstIterator
BBList	include/corelab/Metadata/typedefs.h	/^  typedef std::vector<BasicBlock*>              BBList;$/;"	t	namespace:corelab
BBSet	include/corelab/Metadata/typedefs.h	/^  typedef DenseSet<BasicBlock *>                BBSet;$/;"	t	namespace:corelab
BBSets	include/corelab/Metadata/typedefs.h	/^  typedef std::vector<BBSet>                    BBSets;$/;"	t	namespace:corelab
BBs	include/IR/InstIterator.h	/^  BB_t *BBs; \/\/ BasicBlocksType$/;"	m	class:llvm::InstIterator
BBty	include/IR/InstIterator.h	/^  typedef BB_t BBty;$/;"	t	class:llvm::InstIterator
BI	include/IR/InstIterator.h	/^  BI_t BI;   \/\/ BasicBlock::iterator$/;"	m	class:llvm::InstIterator
BI	include/corelab/Metadata/typedefs.h	/^  typedef BBSet::const_iterator                 BI;$/;"	t	namespace:corelab
BIty	include/IR/InstIterator.h	/^  typedef BI_t BIty;$/;"	t	class:llvm::InstIterator
BOOST_ROOT_DIR	lib/AliasAnalysis/Makefile	/^BOOST_ROOT_DIR=$(BOOST_ROOT)$/;"	m
BUILD_RELINKED	lib/AliasAnalysis/Makefile	/^BUILD_RELINKED=1$/;"	m
BUILD_RELINKED	lib/Utilities/Makefile	/^BUILD_RELINKED=1$/;"	m
Banner	include/IR/IRPrintingPasses.h	/^  std::string Banner;$/;"	m	class:llvm::PrintFunctionPass
Banner	include/IR/IRPrintingPasses.h	/^  std::string Banner;$/;"	m	class:llvm::PrintModulePass
Base	include/IR/CallSite.h	/^                       CallInst, InvokeInst, User::op_iterator> Base;$/;"	t	class:llvm::CallSite
Base	include/IR/CallSite.h	/^  typedef CallSiteBase<> Base;$/;"	t	class:llvm::ImmutableCallSite
Base	include/IR/Dominators.h	/^  typedef DominatorTreeBase<BasicBlock> Base;$/;"	t	class:llvm::DominatorTree
Base	include/IR/Statepoint.h	/^      Base;$/;"	t	class:llvm::ImmutableStatepoint
Base	include/IR/Statepoint.h	/^  typedef StatepointBase<Instruction, Value, CallSite> Base;$/;"	t	class:llvm::Statepoint
BaseT	include/IR/PassManager.h	/^  typedef detail::AnalysisManagerBase<AnalysisManager<IRUnitT>, IRUnitT> BaseT;$/;"	t	class:llvm::AnalysisManager
BaseT	include/IR/ValueMap.h	/^  typedef typename DenseMapT::const_iterator BaseT;$/;"	t	class:llvm::ValueMapConstIterator
BaseT	include/IR/ValueMap.h	/^  typedef typename DenseMapT::iterator BaseT;$/;"	t	class:llvm::ValueMapIterator
BasicBlock	include/IR/BasicBlock.h	/^class BasicBlock : public Value, \/\/ Basic blocks are data objects also$/;"	c	namespace:llvm
BasicBlockEdge	include/IR/Dominators.h	/^  BasicBlockEdge(const BasicBlock *Start_, const BasicBlock *End_) :$/;"	f	class:llvm::BasicBlockEdge
BasicBlockEdge	include/IR/Dominators.h	/^class BasicBlockEdge {$/;"	c	namespace:llvm
BasicBlockListType	include/IR/Function.h	/^  typedef iplist<BasicBlock> BasicBlockListType;$/;"	t	class:llvm::Function
BasicBlockVal	include/IR/Value.h	/^    BasicBlockVal,            \/\/ This is an instance of BasicBlock$/;"	e	enum:llvm::Value::ValueTy
BasicBlocks	include/IR/Function.h	/^  BasicBlockListType  BasicBlocks;        \/\/\/< The basic blocks$/;"	m	class:llvm::Function
Before	include/corelab/Utilities/InstInsertPt.h	/^      static InstInsertPt Before(Instruction *i, BasicBlock *bb=0) {$/;"	f	class:corelab::InstInsertPt
Beginning	include/corelab/Utilities/InstInsertPt.h	/^      static InstInsertPt Beginning(BasicBlock *bb) {$/;"	f	class:corelab::InstInsertPt
Beginning	include/corelab/Utilities/InstInsertPt.h	/^      static InstInsertPt Beginning(Function *f) {$/;"	f	class:corelab::InstInsertPt
Behavior	include/IR/Module.h	/^    ModFlagBehavior Behavior;$/;"	m	struct:llvm::Module::ModuleFlagEntry
BigEndian	include/IR/DataLayout.h	/^  bool BigEndian;$/;"	m	class:llvm::DataLayout
BigType	include/IR/PassManagerInternal.h	/^  struct BigType {$/;"	s	class:llvm::detail::PassRunAcceptsAnalysisManager
BigType	include/IR/PassManagerInternal.h	/^  struct BigType {$/;"	s	class:llvm::detail::ResultHasInvalidateMethod
BinOp	include/IR/Instructions.h	/^  enum BinOp {$/;"	g	class:llvm::AtomicRMWInst
BinOp2_match	include/IR/PatternMatch.h	/^  BinOp2_match(const LHS_t &LHS, const RHS_t &RHS) : L(LHS), R(RHS) {}$/;"	f	struct:llvm::PatternMatch::BinOp2_match
BinOp2_match	include/IR/PatternMatch.h	/^struct BinOp2_match {$/;"	s	namespace:llvm::PatternMatch
BinaryOp_match	include/IR/PatternMatch.h	/^  BinaryOp_match(const LHS_t &LHS, const RHS_t &RHS) : L(LHS), R(RHS) {}$/;"	f	struct:llvm::PatternMatch::BinaryOp_match
BinaryOp_match	include/IR/PatternMatch.h	/^struct BinaryOp_match {$/;"	s	namespace:llvm::PatternMatch
BinaryOperator	include/IR/InstrTypes.h	/^class BinaryOperator : public Instruction {$/;"	c	namespace:llvm
BinaryOps	include/IR/Instruction.h	/^  enum BinaryOps {$/;"	g	class:llvm::Instruction
BitCastInst	include/IR/Instructions.h	/^class BitCastInst : public CastInst {$/;"	c	namespace:llvm
BitCastOperator	include/IR/Operator.h	/^class BitCastOperator$/;"	c	namespace:llvm
Block	include/IR/IRBuilder.h	/^    AssertingVH<BasicBlock> Block;$/;"	m	class:llvm::IRBuilderBase::InsertPointGuard
Block	include/IR/IRBuilder.h	/^    BasicBlock *Block;$/;"	m	class:llvm::IRBuilderBase::InsertPoint
BlockAddress	include/IR/Constants.h	/^class BlockAddress : public Constant {$/;"	c	namespace:llvm
BlockAddressVal	include/IR/Value.h	/^    BlockAddressVal,          \/\/ This is an instance of BlockAddress$/;"	e	enum:llvm::Value::ValueTy
BlockCounts	include/corelab/Utilities/ProfileInfo.h	/^    typedef std::map<const BType*, double> BlockCounts;$/;"	t	class:llvm::ProfileInfoT
BlockInformation	include/corelab/Utilities/ProfileInfo.h	/^    std::map<const FType*, BlockCounts> BlockInformation;$/;"	m	class:llvm::ProfileInfoT
BlockToPredCountMap	include/IR/PredIteratorCache.h	/^    DenseMap<BasicBlock*, unsigned> BlockToPredCountMap;$/;"	m	class:llvm::PredIteratorCache
BlockToPredsMap	include/IR/PredIteratorCache.h	/^    DenseMap<BasicBlock*, BasicBlock**> BlockToPredsMap;$/;"	m	class:llvm::PredIteratorCache
BranchInst	include/IR/Instructions.h	/^class BranchInst : public TerminatorInst {$/;"	c	namespace:llvm
Builder	include/IR/IRBuilder.h	/^    IRBuilderBase &Builder;$/;"	m	class:llvm::IRBuilderBase::FastMathFlagGuard
Builder	include/IR/IRBuilder.h	/^    IRBuilderBase &Builder;$/;"	m	class:llvm::IRBuilderBase::InsertPointGuard
Builtin	include/IR/Attributes.h	/^    Builtin,               \/\/\/< Callee is recognized as a builtin, despite$/;"	e	enum:llvm::Attribute::AttrKind
ByVal	include/IR/Attributes.h	/^    ByVal,                 \/\/\/< Pass structure by value$/;"	e	enum:llvm::Attribute::AttrKind
C	include/IR/CallingConv.h	/^    C = 0,$/;"	e	enum:llvm::CallingConv::__anon7
C	include/IR/PatternMatch.h	/^  Cond_t C;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
CALLSITE_DELEGATE_GETTER	include/IR/CallSite.h	174;"	d
CALLSITE_DELEGATE_GETTER	include/IR/CallSite.h	272;"	d
CALLSITE_DELEGATE_SETTER	include/IR/CallSite.h	180;"	d
CALLSITE_DELEGATE_SETTER	include/IR/CallSite.h	273;"	d
CAMP	include/corelab/CAMP/campCommon.h	/^	namespace CAMP$/;"	n	namespace:corelab
CAMP	include/corelab/CAMP/campDebug.h	/^	namespace CAMP$/;"	n	namespace:corelab
CAMP	include/corelab/CAMP/campTimer.h	/^	namespace CAMP$/;"	n	namespace:corelab
CAMP	lib/CAMP/campCommon.h	/^	namespace CAMP$/;"	n	namespace:corelab
CAMP	lib/CAMP/campDebug.h	/^	namespace CAMP$/;"	n	namespace:corelab
CAMPCache	include/corelab/CAMP/CampCache.h	/^			CAMPCache() : ModulePass(ID) {}$/;"	f	class:corelab::CAMPCache
CAMPCache	include/corelab/CAMP/CampCache.h	/^	class CAMPCache: public ModulePass$/;"	c	namespace:corelab
CAMPCache	lib/CAMP/CampCache.h	/^			CAMPCache() : ModulePass(ID) {}$/;"	f	class:corelab::CAMPCache
CAMPCache	lib/CAMP/CampCache.h	/^	class CAMPCache: public ModulePass$/;"	c	namespace:corelab
CAMPExectime	include/corelab/CAMP/CampExectime.h	/^			CAMPExectime() : ModulePass(ID) {}$/;"	f	class:corelab::CAMPExectime
CAMPExectime	include/corelab/CAMP/CampExectime.h	/^	class CAMPExectime : public ModulePass$/;"	c	namespace:corelab
CAMPExectime	lib/CAMP/CampExectime.h	/^			CAMPExectime() : ModulePass(ID) {}$/;"	f	class:corelab::CAMPExectime
CAMPExectime	lib/CAMP/CampExectime.h	/^	class CAMPExectime : public ModulePass$/;"	c	namespace:corelab
CAMPInstaller	include/corelab/CAMP/CAMP.h	/^			CAMPInstaller() : ModulePass(ID) {}$/;"	f	class:corelab::CAMPInstaller
CAMPInstaller	include/corelab/CAMP/CAMP.h	/^	class CAMPInstaller : public ModulePass$/;"	c	namespace:corelab
CAMPInstaller	lib/CAMP/CAMP.h	/^			CAMPInstaller() : ModulePass(ID) {}$/;"	f	class:corelab::CAMPInstaller
CAMPInstaller	lib/CAMP/CAMP.h	/^	class CAMPInstaller : public ModulePass$/;"	c	namespace:corelab
CAMPPlain	include/corelab/CAMP/CampPlain.h	/^			CAMPPlain() : ModulePass(ID) {}$/;"	f	class:corelab::CAMPPlain
CAMPPlain	include/corelab/CAMP/CampPlain.h	/^	class CAMPPlain : public ModulePass$/;"	c	namespace:corelab
CAMPPlain	lib/CAMP/CampPlain.h	/^			CAMPPlain() : ModulePass(ID) {}$/;"	f	class:corelab::CAMPPlain
CAMPPlain	lib/CAMP/CampPlain.h	/^	class CAMPPlain : public ModulePass$/;"	c	namespace:corelab
CAMP_CONTEXT_TREE_APPROACH	lib/CAMP/CAMP.cpp	35;"	d	file:
CAMP_CONTEXT_TREE_APPROACH	lib/CAMP/CampCache.cpp	6;"	d	file:
CAMP_CONTEXT_TREE_APPROACH	lib/CAMP/CampExectime.cpp	34;"	d	file:
CAMP_CONTEXT_TREE_APPROACH	lib/ObjTrace/CtxObjtrace.cpp	35;"	d	file:
CONTEXT_CALL	include/corelab/Metadata/Metadata.h	/^		CONTEXT_CALL = 0x0,$/;"	e	enum:corelab::__anon4
CONTEXT_ITER_CNT_MERGED	include/corelab/CAMP/campCommon.h	24;"	d
CONTEXT_ITER_CNT_MERGED	lib/CAMP/campCommon.h	24;"	d
CONTEXT_LOOP	include/corelab/Metadata/Metadata.h	/^		CONTEXT_LOOP = 0x1$/;"	e	enum:corelab::__anon4
CONTEXT_TYPE	include/corelab/Metadata/Metadata.h	/^	} CONTEXT_TYPE;$/;"	t	namespace:corelab	typeref:enum:corelab::__anon4
CORELAB_CAMP_COMMON_H	include/corelab/CAMP/campCommon.h	2;"	d
CORELAB_CAMP_COMMON_H	lib/CAMP/campCommon.h	2;"	d
CORELAB_CAMP_DEBUG_H	include/corelab/CAMP/campDebug.h	9;"	d
CORELAB_CAMP_DEBUG_H	lib/CAMP/campDebug.h	9;"	d
CORELAB_CAMP_META_H	include/corelab/CAMP/campMeta.h	2;"	d
CORELAB_CAMP_META_H	lib/CAMP/campMeta.h	2;"	d
CORELAB_CAMP_RUNTIME_H	tools/camp/campExecRuntime.h	2;"	d
CORELAB_CAMP_RUNTIME_H	tools/camp/campRuntime.h	2;"	d
CORELAB_CAMP_RUNTIME_H	tools/campSampling/campRuntime.h	2;"	d
CORELAB_CAMP_RUNTIME_H	tools/objtrace/ctxObjtraceRuntime.h	2;"	d
CORELAB_CAMP_TIMER_H	include/corelab/CAMP/campTimer.h	2;"	d
CORELAB_TYPEDEFS_H	include/corelab/Metadata/typedefs.h	2;"	d
CUs	include/IR/DebugInfo.h	/^  SmallVector<DICompileUnit, 8> CUs;$/;"	m	class:llvm::DebugInfoFinder
CallCountOf	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::map<FunctionName, unsigned> CallCountOf;\/\/for Statistics$/;"	t	class:corelab::IndirectCallAnal
CallCountOf	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::map<FunctionName, unsigned> CallCountOf;\/\/for Statistics$/;"	t	class:corelab::IndirectCallAnal
CallInst	include/IR/Instructions.h	/^CallInst::CallInst(Value *Func, ArrayRef<Value *> Args,$/;"	f	class:llvm::CallInst
CallInst	include/IR/Instructions.h	/^class CallInst : public Instruction {$/;"	c	namespace:llvm
CallSite	include/IR/CallSite.h	/^  CallSite() {}$/;"	f	class:llvm::CallSite
CallSite	include/IR/CallSite.h	/^  CallSite(Base B) : Base(B) {}$/;"	f	class:llvm::CallSite
CallSite	include/IR/CallSite.h	/^  CallSite(CallInst *CI) : Base(CI) {}$/;"	f	class:llvm::CallSite
CallSite	include/IR/CallSite.h	/^  CallSite(Instruction *II) : Base(II) {}$/;"	f	class:llvm::CallSite
CallSite	include/IR/CallSite.h	/^  CallSite(InvokeInst *II) : Base(II) {}$/;"	f	class:llvm::CallSite
CallSite	include/IR/CallSite.h	/^  CallSite(Value* V) : Base(V) {}$/;"	f	class:llvm::CallSite
CallSite	include/IR/CallSite.h	/^class CallSite : public CallSiteBase<Function, Value, User, Instruction,$/;"	c	namespace:llvm
CallSiteBase	include/IR/CallSite.h	/^  CallSiteBase() : I(nullptr, false) {}$/;"	f	class:llvm::CallSiteBase
CallSiteBase	include/IR/CallSite.h	/^  CallSiteBase(CallTy *CI) : I(CI, true) { assert(CI); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	include/IR/CallSite.h	/^  CallSiteBase(InvokeTy *II) : I(II, false) { assert(II); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	include/IR/CallSite.h	/^  CallSiteBase(ValTy *II) { *this = get(II); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	include/IR/CallSite.h	/^class CallSiteBase {$/;"	c	namespace:llvm
CallStack	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::vector<const Function *> CallStack; \/\/To fine recursive funcall$/;"	t	class:corelab::RecursiveFuncAnal
CallStack	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::vector<const Function *> CallStack; \/\/To fine recursive funcall$/;"	t	class:corelab::RecursiveFuncAnal
Callback	include/IR/ValueHandle.h	/^    Callback,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
CallbackVH	include/IR/ValueHandle.h	/^  CallbackVH() : ValueHandleBase(Callback) {}$/;"	f	class:llvm::CallbackVH
CallbackVH	include/IR/ValueHandle.h	/^  CallbackVH(Value *P) : ValueHandleBase(Callback, P) {}$/;"	f	class:llvm::CallbackVH
CallbackVH	include/IR/ValueHandle.h	/^  CallbackVH(const CallbackVH &RHS)$/;"	f	class:llvm::CallbackVH
CallbackVH	include/IR/ValueHandle.h	/^class CallbackVH : public ValueHandleBase {$/;"	c	namespace:llvm
CallingConv	include/IR/CallingConv.h	/^namespace CallingConv {$/;"	n	namespace:llvm
CampID	tools/camp/campExecRuntime.h	/^typedef uint32_t CampID;$/;"	t
CampID	tools/camp/campRuntime.h	/^typedef uint32_t CampID;$/;"	t
CampID	tools/campSampling/campRuntime.h	/^typedef uint32_t CampID;$/;"	t
CampIDCounterMap	tools/camp/campRuntime.h	/^typedef std::map<CampID, uint8_t> CampIDCounterMap; \/\/for sampling$/;"	t
CampIDCounterMap	tools/campSampling/campRuntime.h	/^typedef std::map<CampID, uint8_t> CampIDCounterMap; \/\/for sampling$/;"	t
CandidateFunctions	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::vector<Function *> CandidateFunctions;$/;"	t	class:corelab::IndirectCallAnal
CandidateFunctions	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::vector<Function *> CandidateFunctions; $/;"	t	class:corelab::LoopTraverse
CandidateFunctions	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::vector<Function *> CandidateFunctions;$/;"	t	class:corelab::RecursiveFuncAnal
CandidateFunctions	include/corelab/CAMP/ContextTreeBuilder.h	/^			typedef std::vector<Function *> CandidateFunctions;$/;"	t	class:corelab::ContextTreeBuilder
CandidateFunctions	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::vector<Function *> CandidateFunctions;$/;"	t	class:corelab::IndirectCallAnal
CandidateFunctions	lib/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::vector<Function *> CandidateFunctions; $/;"	t	class:corelab::LoopTraverse
CandidateFunctions	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::vector<Function *> CandidateFunctions;$/;"	t	class:corelab::RecursiveFuncAnal
CandidateFunctions	lib/CAMP/ContextTreeBuilder.h	/^			typedef std::vector<Function *> CandidateFunctions;$/;"	t	class:corelab::ContextTreeBuilder
CaseIt	include/IR/Instructions.h	/^    CaseIt(SwitchInst *SI, unsigned CaseNum) : ParentTy(SI, CaseNum) {}$/;"	f	class:llvm::SwitchInst::CaseIt
CaseIt	include/IR/Instructions.h	/^    CaseIt(const ParentTy& Src) : ParentTy(Src) {}$/;"	f	class:llvm::SwitchInst::CaseIt
CaseIt	include/IR/Instructions.h	/^  class CaseIt : public CaseIteratorT<SwitchInst, ConstantInt, BasicBlock> {$/;"	c	class:llvm::SwitchInst
CaseIteratorT	include/IR/Instructions.h	/^    CaseIteratorT(SwitchInstTy *SI, unsigned CaseNum) {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
CaseIteratorT	include/IR/Instructions.h	/^  class CaseIteratorT {$/;"	c	class:llvm::SwitchInst
CastClass_match	include/IR/PatternMatch.h	/^  CastClass_match(const Op_t &OpMatch) : Op(OpMatch) {}$/;"	f	struct:llvm::PatternMatch::CastClass_match
CastClass_match	include/IR/PatternMatch.h	/^template <typename Op_t, unsigned Opcode> struct CastClass_match {$/;"	s	namespace:llvm::PatternMatch
CastInst	include/IR/InstrTypes.h	/^  CastInst(Type *Ty, unsigned iType, Value *S,$/;"	f	class:llvm::CastInst
CastInst	include/IR/InstrTypes.h	/^class CastInst : public UnaryInstruction {$/;"	c	namespace:llvm
CastOps	include/IR/Instruction.h	/^  enum CastOps {$/;"	g	class:llvm::Instruction
Catch	include/IR/Instructions.h	/^  enum ClauseType { Catch, Filter };$/;"	e	enum:llvm::LandingPadInst::ClauseType
CheckLazyArguments	include/IR/Function.h	/^  void CheckLazyArguments() const {$/;"	f	class:llvm::Function
CheckValidity	include/IR/ValueHandle.h	/^  void CheckValidity() const {$/;"	f	class:llvm::TrackingVH
ChildIteratorType	include/IR/CFG.h	/^  typedef const_pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	include/IR/CFG.h	/^  typedef pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	include/IR/CFG.h	/^  typedef succ_const_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	include/IR/CFG.h	/^  typedef succ_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	include/IR/Dominators.h	/^  typedef NodeType::iterator  ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	include/IR/Type.h	/^  typedef Type::subtype_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ClauseType	include/IR/Instructions.h	/^  enum ClauseType { Catch, Filter };$/;"	g	class:llvm::LandingPadInst
ClearInsertionPoint	include/IR/IRBuilder.h	/^  void ClearInsertionPoint() {$/;"	f	class:llvm::IRBuilderBase
CmpClass_match	include/IR/PatternMatch.h	/^  CmpClass_match(PredicateTy &Pred, const LHS_t &LHS, const RHS_t &RHS)$/;"	f	struct:llvm::PatternMatch::CmpClass_match
CmpClass_match	include/IR/PatternMatch.h	/^struct CmpClass_match {$/;"	s	namespace:llvm::PatternMatch
CmpInst	include/IR/InstrTypes.h	/^class CmpInst : public Instruction {$/;"	c	namespace:llvm
CntxID	include/corelab/CAMP/campCommon.h	/^		typedef uint16_t 	CntxID;$/;"	t	namespace:corelab::CAMP
CntxID	lib/CAMP/campCommon.h	/^		typedef uint16_t 	CntxID;$/;"	t	namespace:corelab::CAMP
CntxID	tools/camp/campExecRuntime.h	/^typedef uint16_t CntxID;$/;"	t
CntxID	tools/camp/campRuntime.h	/^typedef uint16_t CntxID;$/;"	t
CntxID	tools/campSampling/campRuntime.h	/^typedef uint16_t CntxID;$/;"	t
CntxID	tools/objtrace/ctxObjtraceRuntime.h	/^typedef uint16_t CntxID;$/;"	t
CntxIDorInstrID	include/corelab/CAMP/ContextTreeBuilder.h	/^	typedef CntxID CntxIDorInstrID;\/\/whether (CntxID or InstrID) which is given by corealb::LoadNamer.$/;"	t	namespace:corelab
CntxIDorInstrID	lib/CAMP/ContextTreeBuilder.h	/^	typedef CntxID CntxIDorInstrID;\/\/whether (CntxID or InstrID) which is given by corealb::LoadNamer.$/;"	t	namespace:corelab
Codes	include/IR/InlineAsm.h	/^    ConstraintCodeVector Codes;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
Codes	include/IR/InlineAsm.h	/^    ConstraintCodeVector Codes;$/;"	m	struct:llvm::InlineAsm::SubConstraintInfo
Cold	include/IR/Attributes.h	/^    Cold,                  \/\/\/< Marks function as being in a cold path.$/;"	e	enum:llvm::Attribute::AttrKind
Cold	include/IR/CallingConv.h	/^    Cold = 9,$/;"	e	enum:llvm::CallingConv::__anon7
Column	include/IR/DebugInfoMetadata.h	/^  unsigned Column;$/;"	m	class:llvm::MDLexicalBlock
Comdat	include/IR/Comdat.h	/^class Comdat {$/;"	c	namespace:llvm
ComdatSymTab	include/IR/Module.h	/^  ComdatSymTabType ComdatSymTab;  \/\/\/< Symbol table for COMDATs$/;"	m	class:llvm::Module
ComdatSymTabType	include/IR/Module.h	/^  typedef StringMap<Comdat> ComdatSymTabType;$/;"	t	class:llvm::Module
CommonLinkage	include/IR/GlobalValue.h	/^    CommonLinkage       \/\/\/< Tentative definitions.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
CompareIgnoringAlignment	include/IR/Instruction.h	/^    CompareIgnoringAlignment = 1<<0,$/;"	e	enum:llvm::Instruction::OperationEquivalenceFlags
CompareUsingScalarTypes	include/IR/Instruction.h	/^    CompareUsingScalarTypes = 1<<1$/;"	e	enum:llvm::Instruction::OperationEquivalenceFlags
CompositeType	include/IR/DerivedTypes.h	/^  explicit CompositeType(LLVMContext &C, TypeID tid) : Type(C, tid) { }$/;"	f	class:llvm::CompositeType
CompositeType	include/IR/DerivedTypes.h	/^class CompositeType : public Type {$/;"	c	namespace:llvm
ConcreteOperator	include/IR/Operator.h	/^class ConcreteOperator : public SuperClass {$/;"	c	namespace:llvm
Cond	include/IR/PatternMatch.h	/^  Cond_t Cond;$/;"	m	struct:llvm::PatternMatch::brc_match
ConstCaseIt	include/IR/Instructions.h	/^    ConstCaseIt;$/;"	t	class:llvm::SwitchInst
Constant	include/IR/Constant.h	/^  Constant(Type *ty, ValueTy vty, Use *Ops, unsigned NumOps)$/;"	f	class:llvm::Constant
Constant	include/IR/Constant.h	/^class Constant : public User {$/;"	c	namespace:llvm
ConstantAggregateZero	include/IR/Constants.h	/^  explicit ConstantAggregateZero(Type *ty)$/;"	f	class:llvm::ConstantAggregateZero
ConstantAggregateZero	include/IR/Constants.h	/^class ConstantAggregateZero : public Constant {$/;"	c	namespace:llvm
ConstantAggregateZeroVal	include/IR/Value.h	/^    ConstantAggregateZeroVal, \/\/ This is an instance of ConstantAggregateZero$/;"	e	enum:llvm::Value::ValueTy
ConstantArray	include/IR/Constants.h	/^class ConstantArray : public Constant {$/;"	c	namespace:llvm
ConstantArrayVal	include/IR/Value.h	/^    ConstantArrayVal,         \/\/ This is an instance of ConstantArray$/;"	e	enum:llvm::Value::ValueTy
ConstantAsMetadata	include/IR/Metadata.h	/^  ConstantAsMetadata(Constant *C)$/;"	f	class:llvm::ConstantAsMetadata
ConstantAsMetadata	include/IR/Metadata.h	/^class ConstantAsMetadata : public ValueAsMetadata {$/;"	c	namespace:llvm
ConstantAsMetadataKind	include/IR/Metadata.h	/^    ConstantAsMetadataKind,$/;"	e	enum:llvm::Metadata::MetadataKind
ConstantDataArray	include/IR/Constants.h	/^  explicit ConstantDataArray(Type *ty, const char *Data)$/;"	f	class:llvm::ConstantDataArray
ConstantDataArray	include/IR/Constants.h	/^class ConstantDataArray : public ConstantDataSequential {$/;"	c	namespace:llvm
ConstantDataArrayVal	include/IR/Value.h	/^    ConstantDataArrayVal,     \/\/ This is an instance of ConstantDataArray$/;"	e	enum:llvm::Value::ValueTy
ConstantDataSequential	include/IR/Constants.h	/^  explicit ConstantDataSequential(Type *ty, ValueTy VT, const char *Data)$/;"	f	class:llvm::ConstantDataSequential
ConstantDataSequential	include/IR/Constants.h	/^class ConstantDataSequential : public Constant {$/;"	c	namespace:llvm
ConstantDataVector	include/IR/Constants.h	/^  explicit ConstantDataVector(Type *ty, const char *Data)$/;"	f	class:llvm::ConstantDataVector
ConstantDataVector	include/IR/Constants.h	/^class ConstantDataVector : public ConstantDataSequential {$/;"	c	namespace:llvm
ConstantDataVectorVal	include/IR/Value.h	/^    ConstantDataVectorVal,    \/\/ This is an instance of ConstantDataVector$/;"	e	enum:llvm::Value::ValueTy
ConstantExpr	include/IR/Constants.h	/^  ConstantExpr(Type *ty, unsigned Opcode, Use *Ops, unsigned NumOps)$/;"	f	class:llvm::ConstantExpr
ConstantExpr	include/IR/Constants.h	/^class ConstantExpr : public Constant {$/;"	c	namespace:llvm
ConstantExprVal	include/IR/Value.h	/^    ConstantExprVal,          \/\/ This is an instance of ConstantExpr$/;"	e	enum:llvm::Value::ValueTy
ConstantFP	include/IR/Constants.h	/^class ConstantFP : public Constant {$/;"	c	namespace:llvm
ConstantFPVal	include/IR/Value.h	/^    ConstantFPVal,            \/\/ This is an instance of ConstantFP$/;"	e	enum:llvm::Value::ValueTy
ConstantFirstVal	include/IR/Value.h	/^    ConstantFirstVal = FunctionVal,$/;"	e	enum:llvm::Value::ValueTy
ConstantFolder	include/IR/ConstantFolder.h	/^  explicit ConstantFolder() {}$/;"	f	class:llvm::ConstantFolder
ConstantFolder	include/IR/ConstantFolder.h	/^class ConstantFolder {$/;"	c	namespace:llvm
ConstantInt	include/IR/Constants.h	/^class ConstantInt : public Constant {$/;"	c	namespace:llvm
ConstantIntVal	include/IR/Value.h	/^    ConstantIntVal,           \/\/ This is an instance of ConstantInt$/;"	e	enum:llvm::Value::ValueTy
ConstantLastVal	include/IR/Value.h	/^    ConstantLastVal  = ConstantPointerNullVal$/;"	e	enum:llvm::Value::ValueTy
ConstantPointerNull	include/IR/Constants.h	/^  explicit ConstantPointerNull(PointerType *T)$/;"	f	class:llvm::ConstantPointerNull
ConstantPointerNull	include/IR/Constants.h	/^class ConstantPointerNull : public Constant {$/;"	c	namespace:llvm
ConstantPointerNullVal	include/IR/Value.h	/^    ConstantPointerNullVal,   \/\/ This is an instance of ConstantPointerNull$/;"	e	enum:llvm::Value::ValueTy
ConstantRange	include/IR/ConstantRange.h	/^class ConstantRange {$/;"	c	namespace:llvm
ConstantStruct	include/IR/Constants.h	/^class ConstantStruct : public Constant {$/;"	c	namespace:llvm
ConstantStructVal	include/IR/Value.h	/^    ConstantStructVal,        \/\/ This is an instance of ConstantStruct$/;"	e	enum:llvm::Value::ValueTy
ConstantVector	include/IR/Constants.h	/^class ConstantVector : public Constant {$/;"	c	namespace:llvm
ConstantVectorVal	include/IR/Value.h	/^    ConstantVectorVal,        \/\/ This is an instance of ConstantVector$/;"	e	enum:llvm::Value::ValueTy
ConstraintCodeVector	include/IR/InlineAsm.h	/^  typedef std::vector<std::string> ConstraintCodeVector;$/;"	t	class:llvm::InlineAsm
ConstraintInfo	include/IR/InlineAsm.h	/^  struct ConstraintInfo {$/;"	s	class:llvm::InlineAsm
ConstraintInfoVector	include/IR/InlineAsm.h	/^  typedef std::vector<ConstraintInfo> ConstraintInfoVector;$/;"	t	class:llvm::InlineAsm
ConstraintPrefix	include/IR/InlineAsm.h	/^  enum ConstraintPrefix {$/;"	g	class:llvm::InlineAsm
Constraints	include/IR/InlineAsm.h	/^  std::string AsmString, Constraints;$/;"	m	class:llvm::InlineAsm
ContainedType	include/IR/DerivedTypes.h	/^  Type *ContainedType;               \/\/\/< Storage for the single contained type.$/;"	m	class:llvm::SequentialType
ContainedTys	include/IR/Type.h	/^  Type * const *ContainedTys;$/;"	m	class:llvm::Type
Context	include/IR/IRBuilder.h	/^  LLVMContext &Context;$/;"	m	class:llvm::IRBuilderBase
Context	include/IR/MDBuilder.h	/^  LLVMContext &Context;$/;"	m	class:llvm::MDBuilder
Context	include/IR/Metadata.h	/^  ContextAndReplaceableUses Context;$/;"	m	class:llvm::MDNode
Context	include/IR/Metadata.h	/^  LLVMContext &Context;$/;"	m	class:llvm::ReplaceableMetadataImpl
Context	include/IR/Module.h	/^  LLVMContext &Context;           \/\/\/< The LLVMContext from which types and$/;"	m	class:llvm::Module
Context	include/IR/Type.h	/^  LLVMContext &Context;$/;"	m	class:llvm::Type
ContextAndReplaceableUses	include/IR/Metadata.h	/^  ContextAndReplaceableUses($/;"	f	class:llvm::ContextAndReplaceableUses
ContextAndReplaceableUses	include/IR/Metadata.h	/^  ContextAndReplaceableUses(LLVMContext &Context) : Ptr(&Context) {}$/;"	f	class:llvm::ContextAndReplaceableUses
ContextAndReplaceableUses	include/IR/Metadata.h	/^class ContextAndReplaceableUses {$/;"	c	namespace:llvm
ContextInfo	include/corelab/Metadata/Metadata.h	/^	} ContextInfo;$/;"	t	namespace:corelab	typeref:struct:corelab::__anon5
ContextTree	include/corelab/CAMP/ContextTreeBuilder.h	/^			ContextTree(bool b, ContextTreeNode *p, UniqueContextID ucID_)$/;"	f	class:corelab::ContextTree
ContextTree	include/corelab/CAMP/ContextTreeBuilder.h	/^	class ContextTree{$/;"	c	namespace:corelab
ContextTree	lib/CAMP/ContextTreeBuilder.h	/^			ContextTree(bool b, ContextTreeNode *p, UniqueContextID ucID_)$/;"	f	class:corelab::ContextTree
ContextTree	lib/CAMP/ContextTreeBuilder.h	/^	class ContextTree{$/;"	c	namespace:corelab
ContextTreeBuilder	include/corelab/CAMP/ContextTreeBuilder.h	/^			ContextTreeBuilder() : ModulePass(ID) { assignerUcID = 0; maxDepth = 0; nCallSiteNode=0; nLoopNode=0;}$/;"	f	class:corelab::ContextTreeBuilder
ContextTreeBuilder	include/corelab/CAMP/ContextTreeBuilder.h	/^	class ContextTreeBuilder : public ModulePass$/;"	c	namespace:corelab
ContextTreeBuilder	lib/CAMP/ContextTreeBuilder.h	/^			ContextTreeBuilder() : ModulePass(ID) { assignerUcID = 0; maxDepth = 0; nCallSiteNode=0; nLoopNode=0;}$/;"	f	class:corelab::ContextTreeBuilder
ContextTreeBuilder	lib/CAMP/ContextTreeBuilder.h	/^	class ContextTreeBuilder : public ModulePass$/;"	c	namespace:corelab
ContextTreeNode	include/corelab/CAMP/ContextTreeBuilder.h	/^	typedef ContextTree ContextTreeNode;$/;"	t	namespace:corelab
ContextTreeNode	lib/CAMP/ContextTreeBuilder.h	/^	typedef ContextTree ContextTreeNode;$/;"	t	namespace:corelab
Count	include/IR/DebugInfoMetadata.h	/^  int64_t Count;$/;"	m	class:llvm::MDSubrange
Create	include/IR/BasicBlock.h	/^  static BasicBlock *Create(LLVMContext &Context, const Twine &Name = "",$/;"	f	class:llvm::BasicBlock
Create	include/IR/Function.h	/^  static Function *Create(FunctionType *Ty, LinkageTypes Linkage,$/;"	f	class:llvm::Function
Create	include/IR/Instructions.h	/^  static BranchInst *Create(BasicBlock *IfTrue, BasicBlock *IfFalse,$/;"	f	class:llvm::BranchInst
Create	include/IR/Instructions.h	/^  static BranchInst *Create(BasicBlock *IfTrue, BasicBlock *InsertAtEnd) {$/;"	f	class:llvm::BranchInst
Create	include/IR/Instructions.h	/^  static BranchInst *Create(BasicBlock *IfTrue,$/;"	f	class:llvm::BranchInst
Create	include/IR/Instructions.h	/^  static CallInst *Create(Value *F, const Twine &NameStr = "",$/;"	f	class:llvm::CallInst
Create	include/IR/Instructions.h	/^  static CallInst *Create(Value *F, const Twine &NameStr,$/;"	f	class:llvm::CallInst
Create	include/IR/Instructions.h	/^  static CallInst *Create(Value *Func,$/;"	f	class:llvm::CallInst
Create	include/IR/Instructions.h	/^  static ExtractElementInst *Create(Value *Vec, Value *Idx,$/;"	f	class:llvm::ExtractElementInst
Create	include/IR/Instructions.h	/^  static ExtractValueInst *Create(Value *Agg,$/;"	f	class:llvm::ExtractValueInst
Create	include/IR/Instructions.h	/^  static GetElementPtrInst *Create(Type *PointeeType, Value *Ptr,$/;"	f	class:llvm::GetElementPtrInst
Create	include/IR/Instructions.h	/^  static IndirectBrInst *Create(Value *Address, unsigned NumDests,$/;"	f	class:llvm::IndirectBrInst
Create	include/IR/Instructions.h	/^  static InsertElementInst *Create(Value *Vec, Value *NewElt, Value *Idx,$/;"	f	class:llvm::InsertElementInst
Create	include/IR/Instructions.h	/^  static InsertValueInst *Create(Value *Agg, Value *Val,$/;"	f	class:llvm::InsertValueInst
Create	include/IR/Instructions.h	/^  static InvokeInst *Create(Value *Func,$/;"	f	class:llvm::InvokeInst
Create	include/IR/Instructions.h	/^  static PHINode *Create(Type *Ty, unsigned NumReservedValues,$/;"	f	class:llvm::PHINode
Create	include/IR/Instructions.h	/^  static ResumeInst *Create(Value *Exn, BasicBlock *InsertAtEnd) {$/;"	f	class:llvm::ResumeInst
Create	include/IR/Instructions.h	/^  static ResumeInst *Create(Value *Exn, Instruction *InsertBefore = nullptr) {$/;"	f	class:llvm::ResumeInst
Create	include/IR/Instructions.h	/^  static ReturnInst* Create(LLVMContext &C, BasicBlock *InsertAtEnd) {$/;"	f	class:llvm::ReturnInst
Create	include/IR/Instructions.h	/^  static ReturnInst* Create(LLVMContext &C, Value *retVal = nullptr,$/;"	f	class:llvm::ReturnInst
Create	include/IR/Instructions.h	/^  static ReturnInst* Create(LLVMContext &C, Value *retVal,$/;"	f	class:llvm::ReturnInst
Create	include/IR/Instructions.h	/^  static SelectInst *Create(Value *C, Value *S1, Value *S2,$/;"	f	class:llvm::SelectInst
Create	include/IR/Instructions.h	/^  static SwitchInst *Create(Value *Value, BasicBlock *Default,$/;"	f	class:llvm::SwitchInst
CreateAShr	include/IR/ConstantFolder.h	/^  Constant *CreateAShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateAShr	include/IR/IRBuilder.h	/^  Value *CreateAShr(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateAShr	include/IR/IRBuilder.h	/^  Value *CreateAShr(Value *LHS, const APInt &RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateAShr	include/IR/IRBuilder.h	/^  Value *CreateAShr(Value *LHS, uint64_t RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateAShr	include/IR/NoFolder.h	/^  Instruction *CreateAShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateAdd	include/IR/ConstantFolder.h	/^  Constant *CreateAdd(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateAdd	include/IR/IRBuilder.h	/^  Value *CreateAdd(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateAdd	include/IR/NoFolder.h	/^  Instruction *CreateAdd(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateAddrSpaceCast	include/IR/IRBuilder.h	/^  Value *CreateAddrSpaceCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateAggregateRet	include/IR/IRBuilder.h	/^  ReturnInst *CreateAggregateRet(Value *const *retVals, unsigned N) {$/;"	f	class:llvm::IRBuilder
CreateAlignedLoad	include/IR/IRBuilder.h	/^  LoadInst *CreateAlignedLoad(Value *Ptr, unsigned Align, bool isVolatile,$/;"	f	class:llvm::IRBuilder
CreateAlignedLoad	include/IR/IRBuilder.h	/^  LoadInst *CreateAlignedLoad(Value *Ptr, unsigned Align, const char *Name) {$/;"	f	class:llvm::IRBuilder
CreateAlignedLoad	include/IR/IRBuilder.h	/^  LoadInst *CreateAlignedLoad(Value *Ptr, unsigned Align,$/;"	f	class:llvm::IRBuilder
CreateAlignedStore	include/IR/IRBuilder.h	/^  StoreInst *CreateAlignedStore(Value *Val, Value *Ptr, unsigned Align,$/;"	f	class:llvm::IRBuilder
CreateAlignmentAssumption	include/IR/IRBuilder.h	/^  CallInst *CreateAlignmentAssumption(const DataLayout &DL, Value *PtrValue,$/;"	f	class:llvm::IRBuilder
CreateAlloca	include/IR/IRBuilder.h	/^  AllocaInst *CreateAlloca(Type *Ty, Value *ArraySize = nullptr,$/;"	f	class:llvm::IRBuilder
CreateAnd	include/IR/ConstantFolder.h	/^  Constant *CreateAnd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateAnd	include/IR/IRBuilder.h	/^  Value *CreateAnd(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateAnd	include/IR/IRBuilder.h	/^  Value *CreateAnd(Value *LHS, const APInt &RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateAnd	include/IR/IRBuilder.h	/^  Value *CreateAnd(Value *LHS, uint64_t RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateAnd	include/IR/NoFolder.h	/^  Instruction *CreateAnd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateAtomicCmpXchg	include/IR/IRBuilder.h	/^  CreateAtomicCmpXchg(Value *Ptr, Value *Cmp, Value *New,$/;"	f	class:llvm::IRBuilder
CreateAtomicRMW	include/IR/IRBuilder.h	/^  AtomicRMWInst *CreateAtomicRMW(AtomicRMWInst::BinOp Op, Value *Ptr, Value *Val,$/;"	f	class:llvm::IRBuilder
CreateBinOp	include/IR/ConstantFolder.h	/^  Constant *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::ConstantFolder
CreateBinOp	include/IR/IRBuilder.h	/^  Value *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::IRBuilder
CreateBinOp	include/IR/NoFolder.h	/^  Instruction *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::NoFolder
CreateBitCast	include/IR/ConstantFolder.h	/^  Constant *CreateBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateBitCast	include/IR/IRBuilder.h	/^  Value *CreateBitCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateBitCast	include/IR/NoFolder.h	/^  Instruction *CreateBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateBitOrPointerCast	include/IR/IRBuilder.h	/^  Value *CreateBitOrPointerCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateBr	include/IR/IRBuilder.h	/^  BranchInst *CreateBr(BasicBlock *Dest) {$/;"	f	class:llvm::IRBuilder
CreateCall	include/IR/IRBuilder.h	/^  CallInst *CreateCall(Value *Callee, ArrayRef<Value *> Args,$/;"	f	class:llvm::IRBuilder
CreateCall	include/IR/IRBuilder.h	/^  CallInst *CreateCall(Value *Callee, Value *Arg, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateCall	include/IR/IRBuilder.h	/^  CallInst *CreateCall(Value *Callee, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateCall2	include/IR/IRBuilder.h	/^  CallInst *CreateCall2(Value *Callee, Value *Arg1, Value *Arg2,$/;"	f	class:llvm::IRBuilder
CreateCall3	include/IR/IRBuilder.h	/^  CallInst *CreateCall3(Value *Callee, Value *Arg1, Value *Arg2, Value *Arg3,$/;"	f	class:llvm::IRBuilder
CreateCall4	include/IR/IRBuilder.h	/^  CallInst *CreateCall4(Value *Callee, Value *Arg1, Value *Arg2, Value *Arg3,$/;"	f	class:llvm::IRBuilder
CreateCall5	include/IR/IRBuilder.h	/^  CallInst *CreateCall5(Value *Callee, Value *Arg1, Value *Arg2, Value *Arg3,$/;"	f	class:llvm::IRBuilder
CreateCast	include/IR/ConstantFolder.h	/^  Constant *CreateCast(Instruction::CastOps Op, Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateCast	include/IR/IRBuilder.h	/^  Value *CreateCast(Instruction::CastOps Op, Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateCast	include/IR/NoFolder.h	/^  Instruction *CreateCast(Instruction::CastOps Op, Constant *C,$/;"	f	class:llvm::NoFolder
CreateCondBr	include/IR/IRBuilder.h	/^  BranchInst *CreateCondBr(Value *Cond, BasicBlock *True, BasicBlock *False,$/;"	f	class:llvm::IRBuilder
CreateConstGEP1_32	include/IR/IRBuilder.h	/^  Value *CreateConstGEP1_32(Type *Ty, Value *Ptr, unsigned Idx0,$/;"	f	class:llvm::IRBuilder
CreateConstGEP1_32	include/IR/IRBuilder.h	/^  Value *CreateConstGEP1_32(Value *Ptr, unsigned Idx0, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateConstGEP1_64	include/IR/IRBuilder.h	/^  Value *CreateConstGEP1_64(Value *Ptr, uint64_t Idx0, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateConstGEP2_32	include/IR/IRBuilder.h	/^  Value *CreateConstGEP2_32(Type *Ty, Value *Ptr, unsigned Idx0, unsigned Idx1,$/;"	f	class:llvm::IRBuilder
CreateConstGEP2_64	include/IR/IRBuilder.h	/^  Value *CreateConstGEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1,$/;"	f	class:llvm::IRBuilder
CreateConstInBoundsGEP1_32	include/IR/IRBuilder.h	/^  Value *CreateConstInBoundsGEP1_32(Type *Ty, Value *Ptr, unsigned Idx0,$/;"	f	class:llvm::IRBuilder
CreateConstInBoundsGEP1_64	include/IR/IRBuilder.h	/^  Value *CreateConstInBoundsGEP1_64(Value *Ptr, uint64_t Idx0,$/;"	f	class:llvm::IRBuilder
CreateConstInBoundsGEP2_32	include/IR/IRBuilder.h	/^  Value *CreateConstInBoundsGEP2_32(Value *Ptr, unsigned Idx0, unsigned Idx1,$/;"	f	class:llvm::IRBuilder
CreateConstInBoundsGEP2_64	include/IR/IRBuilder.h	/^  Value *CreateConstInBoundsGEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1,$/;"	f	class:llvm::IRBuilder
CreateExact	include/IR/InstrTypes.h	/^  static BinaryOperator *CreateExact(BinaryOps Opc, Value *V1, Value *V2,$/;"	f	class:llvm::BinaryOperator
CreateExactSDiv	include/IR/IRBuilder.h	/^  Value *CreateExactSDiv(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateExactSDiv	include/IR/NoFolder.h	/^  Instruction *CreateExactSDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateExactUDiv	include/IR/IRBuilder.h	/^  Value *CreateExactUDiv(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateExactUDiv	include/IR/NoFolder.h	/^  Instruction *CreateExactUDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateExtractElement	include/IR/ConstantFolder.h	/^  Constant *CreateExtractElement(Constant *Vec, Constant *Idx) const {$/;"	f	class:llvm::ConstantFolder
CreateExtractElement	include/IR/IRBuilder.h	/^  Value *CreateExtractElement(Value *Vec, Value *Idx,$/;"	f	class:llvm::IRBuilder
CreateExtractElement	include/IR/NoFolder.h	/^  Instruction *CreateExtractElement(Constant *Vec, Constant *Idx) const {$/;"	f	class:llvm::NoFolder
CreateExtractInteger	include/IR/IRBuilder.h	/^  Value *CreateExtractInteger(const DataLayout &DL, Value *From,$/;"	f	class:llvm::IRBuilder
CreateExtractValue	include/IR/ConstantFolder.h	/^  Constant *CreateExtractValue(Constant *Agg,$/;"	f	class:llvm::ConstantFolder
CreateExtractValue	include/IR/IRBuilder.h	/^  Value *CreateExtractValue(Value *Agg,$/;"	f	class:llvm::IRBuilder
CreateExtractValue	include/IR/NoFolder.h	/^  Instruction *CreateExtractValue(Constant *Agg,$/;"	f	class:llvm::NoFolder
CreateFAdd	include/IR/ConstantFolder.h	/^  Constant *CreateFAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFAdd	include/IR/IRBuilder.h	/^  Value *CreateFAdd(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFAdd	include/IR/NoFolder.h	/^  Instruction *CreateFAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFCmp	include/IR/ConstantFolder.h	/^  Constant *CreateFCmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::ConstantFolder
CreateFCmp	include/IR/IRBuilder.h	/^  Value *CreateFCmp(CmpInst::Predicate P, Value *LHS, Value *RHS,$/;"	f	class:llvm::IRBuilder
CreateFCmp	include/IR/NoFolder.h	/^  Instruction *CreateFCmp(CmpInst::Predicate P,$/;"	f	class:llvm::NoFolder
CreateFCmpOEQ	include/IR/IRBuilder.h	/^  Value *CreateFCmpOEQ(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpOGE	include/IR/IRBuilder.h	/^  Value *CreateFCmpOGE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpOGT	include/IR/IRBuilder.h	/^  Value *CreateFCmpOGT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpOLE	include/IR/IRBuilder.h	/^  Value *CreateFCmpOLE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpOLT	include/IR/IRBuilder.h	/^  Value *CreateFCmpOLT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpONE	include/IR/IRBuilder.h	/^  Value *CreateFCmpONE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpORD	include/IR/IRBuilder.h	/^  Value *CreateFCmpORD(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUEQ	include/IR/IRBuilder.h	/^  Value *CreateFCmpUEQ(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUGE	include/IR/IRBuilder.h	/^  Value *CreateFCmpUGE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUGT	include/IR/IRBuilder.h	/^  Value *CreateFCmpUGT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpULE	include/IR/IRBuilder.h	/^  Value *CreateFCmpULE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpULT	include/IR/IRBuilder.h	/^  Value *CreateFCmpULT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUNE	include/IR/IRBuilder.h	/^  Value *CreateFCmpUNE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUNO	include/IR/IRBuilder.h	/^  Value *CreateFCmpUNO(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFDiv	include/IR/ConstantFolder.h	/^  Constant *CreateFDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFDiv	include/IR/IRBuilder.h	/^  Value *CreateFDiv(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFDiv	include/IR/NoFolder.h	/^  Instruction *CreateFDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFMul	include/IR/ConstantFolder.h	/^  Constant *CreateFMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFMul	include/IR/IRBuilder.h	/^  Value *CreateFMul(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFMul	include/IR/NoFolder.h	/^  Instruction *CreateFMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFNeg	include/IR/ConstantFolder.h	/^  Constant *CreateFNeg(Constant *C) const {$/;"	f	class:llvm::ConstantFolder
CreateFNeg	include/IR/IRBuilder.h	/^  Value *CreateFNeg(Value *V, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFNeg	include/IR/NoFolder.h	/^  Instruction *CreateFNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateFPCast	include/IR/ConstantFolder.h	/^  Constant *CreateFPCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateFPCast	include/IR/IRBuilder.h	/^  Value *CreateFPCast(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFPCast	include/IR/NoFolder.h	/^  Instruction *CreateFPCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateFPExt	include/IR/IRBuilder.h	/^  Value *CreateFPExt(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFPToSI	include/IR/IRBuilder.h	/^  Value *CreateFPToSI(Value *V, Type *DestTy, const Twine &Name = ""){$/;"	f	class:llvm::IRBuilder
CreateFPToUI	include/IR/IRBuilder.h	/^  Value *CreateFPToUI(Value *V, Type *DestTy, const Twine &Name = ""){$/;"	f	class:llvm::IRBuilder
CreateFPTrunc	include/IR/IRBuilder.h	/^  Value *CreateFPTrunc(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateFRem	include/IR/ConstantFolder.h	/^  Constant *CreateFRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFRem	include/IR/IRBuilder.h	/^  Value *CreateFRem(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFRem	include/IR/NoFolder.h	/^  Instruction *CreateFRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFSub	include/IR/ConstantFolder.h	/^  Constant *CreateFSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFSub	include/IR/IRBuilder.h	/^  Value *CreateFSub(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFSub	include/IR/NoFolder.h	/^  Instruction *CreateFSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFence	include/IR/IRBuilder.h	/^  FenceInst *CreateFence(AtomicOrdering Ordering,$/;"	f	class:llvm::IRBuilder
CreateGEP	include/IR/IRBuilder.h	/^  Value *CreateGEP(Type *Ty, Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:llvm::IRBuilder
CreateGEP	include/IR/IRBuilder.h	/^  Value *CreateGEP(Type *Ty, Value *Ptr, Value *Idx, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateGEP	include/IR/IRBuilder.h	/^  Value *CreateGEP(Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:llvm::IRBuilder
CreateGEP	include/IR/IRBuilder.h	/^  Value *CreateGEP(Value *Ptr, Value *Idx, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateGetElementPtr	include/IR/ConstantFolder.h	/^  Constant *CreateGetElementPtr(Type *Ty, Constant *C, Constant *Idx) const {$/;"	f	class:llvm::ConstantFolder
CreateGetElementPtr	include/IR/ConstantFolder.h	/^  Constant *CreateGetElementPtr(Type *Ty, Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateGetElementPtr	include/IR/NoFolder.h	/^  Constant *CreateGetElementPtr(Type *Ty, Constant *C, Constant *Idx) const {$/;"	f	class:llvm::NoFolder
CreateGetElementPtr	include/IR/NoFolder.h	/^  Constant *CreateGetElementPtr(Type *Ty, Constant *C,$/;"	f	class:llvm::NoFolder
CreateGetElementPtr	include/IR/NoFolder.h	/^  Instruction *CreateGetElementPtr(Type *Ty, Constant *C,$/;"	f	class:llvm::NoFolder
CreateGlobalStringPtr	include/IR/IRBuilder.h	/^  Value *CreateGlobalStringPtr(StringRef Str, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmp	include/IR/ConstantFolder.h	/^  Constant *CreateICmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::ConstantFolder
CreateICmp	include/IR/IRBuilder.h	/^  Value *CreateICmp(CmpInst::Predicate P, Value *LHS, Value *RHS,$/;"	f	class:llvm::IRBuilder
CreateICmp	include/IR/NoFolder.h	/^  Instruction *CreateICmp(CmpInst::Predicate P,$/;"	f	class:llvm::NoFolder
CreateICmpEQ	include/IR/IRBuilder.h	/^  Value *CreateICmpEQ(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpNE	include/IR/IRBuilder.h	/^  Value *CreateICmpNE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpSGE	include/IR/IRBuilder.h	/^  Value *CreateICmpSGE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpSGT	include/IR/IRBuilder.h	/^  Value *CreateICmpSGT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpSLE	include/IR/IRBuilder.h	/^  Value *CreateICmpSLE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpSLT	include/IR/IRBuilder.h	/^  Value *CreateICmpSLT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpUGE	include/IR/IRBuilder.h	/^  Value *CreateICmpUGE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpUGT	include/IR/IRBuilder.h	/^  Value *CreateICmpUGT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpULE	include/IR/IRBuilder.h	/^  Value *CreateICmpULE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpULT	include/IR/IRBuilder.h	/^  Value *CreateICmpULT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateInBounds	include/IR/Instructions.h	/^  CreateInBounds(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:llvm::GetElementPtrInst
CreateInBounds	include/IR/Instructions.h	/^  static GetElementPtrInst *CreateInBounds(Type *PointeeType, Value *Ptr,$/;"	f	class:llvm::GetElementPtrInst
CreateInBounds	include/IR/Instructions.h	/^  static GetElementPtrInst *CreateInBounds(Value *Ptr,$/;"	f	class:llvm::GetElementPtrInst
CreateInBoundsGEP	include/IR/IRBuilder.h	/^  Value *CreateInBoundsGEP(Type *Ty, Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:llvm::IRBuilder
CreateInBoundsGEP	include/IR/IRBuilder.h	/^  Value *CreateInBoundsGEP(Type *Ty, Value *Ptr, Value *Idx,$/;"	f	class:llvm::IRBuilder
CreateInBoundsGEP	include/IR/IRBuilder.h	/^  Value *CreateInBoundsGEP(Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:llvm::IRBuilder
CreateInBoundsGetElementPtr	include/IR/ConstantFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Type *Ty, Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateInBoundsGetElementPtr	include/IR/NoFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Type *Ty, Constant *C,$/;"	f	class:llvm::NoFolder
CreateInBoundsGetElementPtr	include/IR/NoFolder.h	/^  Instruction *CreateInBoundsGetElementPtr(Type *Ty, Constant *C,$/;"	f	class:llvm::NoFolder
CreateIndirectBr	include/IR/IRBuilder.h	/^  IndirectBrInst *CreateIndirectBr(Value *Addr, unsigned NumDests = 10) {$/;"	f	class:llvm::IRBuilder
CreateInsertElement	include/IR/ConstantFolder.h	/^  Constant *CreateInsertElement(Constant *Vec, Constant *NewElt,$/;"	f	class:llvm::ConstantFolder
CreateInsertElement	include/IR/IRBuilder.h	/^  Value *CreateInsertElement(Value *Vec, Value *NewElt, Value *Idx,$/;"	f	class:llvm::IRBuilder
CreateInsertElement	include/IR/NoFolder.h	/^  Instruction *CreateInsertElement(Constant *Vec, Constant *NewElt,$/;"	f	class:llvm::NoFolder
CreateInsertNUWNSWBinOp	include/IR/IRBuilder.h	/^  BinaryOperator *CreateInsertNUWNSWBinOp(BinaryOperator::BinaryOps Opc,$/;"	f	class:llvm::IRBuilder
CreateInsertValue	include/IR/ConstantFolder.h	/^  Constant *CreateInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:llvm::ConstantFolder
CreateInsertValue	include/IR/IRBuilder.h	/^  Value *CreateInsertValue(Value *Agg, Value *Val,$/;"	f	class:llvm::IRBuilder
CreateInsertValue	include/IR/NoFolder.h	/^  Instruction *CreateInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:llvm::NoFolder
CreateIntCast	include/IR/ConstantFolder.h	/^  Constant *CreateIntCast(Constant *C, Type *DestTy,$/;"	f	class:llvm::ConstantFolder
CreateIntCast	include/IR/IRBuilder.h	/^  Value *CreateIntCast(Value *V, Type *DestTy, bool isSigned,$/;"	f	class:llvm::IRBuilder
CreateIntCast	include/IR/NoFolder.h	/^  Instruction *CreateIntCast(Constant *C, Type *DestTy,$/;"	f	class:llvm::NoFolder
CreateIntToPtr	include/IR/ConstantFolder.h	/^  Constant *CreateIntToPtr(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateIntToPtr	include/IR/IRBuilder.h	/^  Value *CreateIntToPtr(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateIntToPtr	include/IR/NoFolder.h	/^  Instruction *CreateIntToPtr(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateInvoke	include/IR/IRBuilder.h	/^  InvokeInst *CreateInvoke(Value *Callee, BasicBlock *NormalDest,$/;"	f	class:llvm::IRBuilder
CreateInvoke3	include/IR/IRBuilder.h	/^  InvokeInst *CreateInvoke3(Value *Callee, BasicBlock *NormalDest,$/;"	f	class:llvm::IRBuilder
CreateIsNotNull	include/IR/IRBuilder.h	/^  Value *CreateIsNotNull(Value *Arg, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateIsNull	include/IR/IRBuilder.h	/^  Value *CreateIsNull(Value *Arg, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateLShr	include/IR/ConstantFolder.h	/^  Constant *CreateLShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateLShr	include/IR/IRBuilder.h	/^  Value *CreateLShr(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateLShr	include/IR/IRBuilder.h	/^  Value *CreateLShr(Value *LHS, const APInt &RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateLShr	include/IR/IRBuilder.h	/^  Value *CreateLShr(Value *LHS, uint64_t RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateLShr	include/IR/NoFolder.h	/^  Instruction *CreateLShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateLandingPad	include/IR/IRBuilder.h	/^  LandingPadInst *CreateLandingPad(Type *Ty, Value *PersFn, unsigned NumClauses,$/;"	f	class:llvm::IRBuilder
CreateLoad	include/IR/IRBuilder.h	/^  LoadInst *CreateLoad(Value *Ptr, bool isVolatile, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateLoad	include/IR/IRBuilder.h	/^  LoadInst *CreateLoad(Value *Ptr, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateLoad	include/IR/IRBuilder.h	/^  LoadInst *CreateLoad(Value *Ptr, const char *Name) {$/;"	f	class:llvm::IRBuilder
CreateMemCpy	include/IR/IRBuilder.h	/^  CallInst *CreateMemCpy(Value *Dst, Value *Src, uint64_t Size, unsigned Align,$/;"	f	class:llvm::IRBuilderBase
CreateMemMove	include/IR/IRBuilder.h	/^  CallInst *CreateMemMove(Value *Dst, Value *Src, uint64_t Size, unsigned Align,$/;"	f	class:llvm::IRBuilderBase
CreateMemSet	include/IR/IRBuilder.h	/^  CallInst *CreateMemSet(Value *Ptr, Value *Val, uint64_t Size, unsigned Align,$/;"	f	class:llvm::IRBuilderBase
CreateMul	include/IR/ConstantFolder.h	/^  Constant *CreateMul(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateMul	include/IR/IRBuilder.h	/^  Value *CreateMul(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateMul	include/IR/NoFolder.h	/^  Instruction *CreateMul(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateNSW	include/IR/InstrTypes.h	/^  static BinaryOperator *CreateNSW(BinaryOps Opc, Value *V1, Value *V2,$/;"	f	class:llvm::BinaryOperator
CreateNSWAdd	include/IR/IRBuilder.h	/^  Value *CreateNSWAdd(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNSWAdd	include/IR/NoFolder.h	/^  Instruction *CreateNSWAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNSWMul	include/IR/IRBuilder.h	/^  Value *CreateNSWMul(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNSWMul	include/IR/NoFolder.h	/^  Instruction *CreateNSWMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNSWNeg	include/IR/IRBuilder.h	/^  Value *CreateNSWNeg(Value *V, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNSWNeg	include/IR/NoFolder.h	/^  Instruction *CreateNSWNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateNSWSub	include/IR/IRBuilder.h	/^  Value *CreateNSWSub(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNSWSub	include/IR/NoFolder.h	/^  Instruction *CreateNSWSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUW	include/IR/InstrTypes.h	/^  static BinaryOperator *CreateNUW(BinaryOps Opc, Value *V1, Value *V2,$/;"	f	class:llvm::BinaryOperator
CreateNUWAdd	include/IR/IRBuilder.h	/^  Value *CreateNUWAdd(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNUWAdd	include/IR/NoFolder.h	/^  Instruction *CreateNUWAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUWMul	include/IR/IRBuilder.h	/^  Value *CreateNUWMul(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNUWMul	include/IR/NoFolder.h	/^  Instruction *CreateNUWMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUWNeg	include/IR/IRBuilder.h	/^  Value *CreateNUWNeg(Value *V, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNUWNeg	include/IR/NoFolder.h	/^  Instruction *CreateNUWNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateNUWSub	include/IR/IRBuilder.h	/^  Value *CreateNUWSub(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNUWSub	include/IR/NoFolder.h	/^  Instruction *CreateNUWSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNeg	include/IR/ConstantFolder.h	/^  Constant *CreateNeg(Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateNeg	include/IR/IRBuilder.h	/^  Value *CreateNeg(Value *V, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateNeg	include/IR/NoFolder.h	/^  Instruction *CreateNeg(Constant *C,$/;"	f	class:llvm::NoFolder
CreateNot	include/IR/ConstantFolder.h	/^  Constant *CreateNot(Constant *C) const {$/;"	f	class:llvm::ConstantFolder
CreateNot	include/IR/IRBuilder.h	/^  Value *CreateNot(Value *V, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNot	include/IR/NoFolder.h	/^  Instruction *CreateNot(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateOr	include/IR/ConstantFolder.h	/^  Constant *CreateOr(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateOr	include/IR/IRBuilder.h	/^  Value *CreateOr(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateOr	include/IR/IRBuilder.h	/^  Value *CreateOr(Value *LHS, const APInt &RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateOr	include/IR/IRBuilder.h	/^  Value *CreateOr(Value *LHS, uint64_t RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateOr	include/IR/NoFolder.h	/^  Instruction *CreateOr(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreatePHI	include/IR/IRBuilder.h	/^  PHINode *CreatePHI(Type *Ty, unsigned NumReservedValues,$/;"	f	class:llvm::IRBuilder
CreatePointerBitCastOrAddrSpaceCast	include/IR/ConstantFolder.h	/^  Constant *CreatePointerBitCastOrAddrSpaceCast(Constant *C,$/;"	f	class:llvm::ConstantFolder
CreatePointerBitCastOrAddrSpaceCast	include/IR/IRBuilder.h	/^  Value *CreatePointerBitCastOrAddrSpaceCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreatePointerCast	include/IR/ConstantFolder.h	/^  Constant *CreatePointerCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreatePointerCast	include/IR/IRBuilder.h	/^  Value *CreatePointerCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreatePointerCast	include/IR/NoFolder.h	/^  Instruction *CreatePointerCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreatePtrDiff	include/IR/IRBuilder.h	/^  Value *CreatePtrDiff(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreatePtrToInt	include/IR/ConstantFolder.h	/^  Constant *CreatePtrToInt(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreatePtrToInt	include/IR/IRBuilder.h	/^  Value *CreatePtrToInt(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreatePtrToInt	include/IR/NoFolder.h	/^  Instruction *CreatePtrToInt(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateResume	include/IR/IRBuilder.h	/^  ResumeInst *CreateResume(Value *Exn) {$/;"	f	class:llvm::IRBuilder
CreateRet	include/IR/IRBuilder.h	/^  ReturnInst *CreateRet(Value *V) {$/;"	f	class:llvm::IRBuilder
CreateRetVoid	include/IR/IRBuilder.h	/^  ReturnInst *CreateRetVoid() {$/;"	f	class:llvm::IRBuilder
CreateSDiv	include/IR/ConstantFolder.h	/^  Constant *CreateSDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateSDiv	include/IR/IRBuilder.h	/^  Value *CreateSDiv(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateSDiv	include/IR/NoFolder.h	/^  Instruction *CreateSDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateSExt	include/IR/IRBuilder.h	/^  Value *CreateSExt(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateSExtOrBitCast	include/IR/ConstantFolder.h	/^  Constant *CreateSExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateSExtOrBitCast	include/IR/IRBuilder.h	/^  Value *CreateSExtOrBitCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateSExtOrBitCast	include/IR/NoFolder.h	/^  Instruction *CreateSExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateSExtOrTrunc	include/IR/IRBuilder.h	/^  Value *CreateSExtOrTrunc(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateSIToFP	include/IR/IRBuilder.h	/^  Value *CreateSIToFP(Value *V, Type *DestTy, const Twine &Name = ""){$/;"	f	class:llvm::IRBuilder
CreateSRem	include/IR/ConstantFolder.h	/^  Constant *CreateSRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateSRem	include/IR/IRBuilder.h	/^  Value *CreateSRem(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateSRem	include/IR/NoFolder.h	/^  Instruction *CreateSRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateSelect	include/IR/ConstantFolder.h	/^  Constant *CreateSelect(Constant *C, Constant *True, Constant *False) const {$/;"	f	class:llvm::ConstantFolder
CreateSelect	include/IR/IRBuilder.h	/^  Value *CreateSelect(Value *C, Value *True, Value *False,$/;"	f	class:llvm::IRBuilder
CreateSelect	include/IR/NoFolder.h	/^  Instruction *CreateSelect(Constant *C,$/;"	f	class:llvm::NoFolder
CreateShl	include/IR/ConstantFolder.h	/^  Constant *CreateShl(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateShl	include/IR/IRBuilder.h	/^  Value *CreateShl(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateShl	include/IR/IRBuilder.h	/^  Value *CreateShl(Value *LHS, const APInt &RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateShl	include/IR/IRBuilder.h	/^  Value *CreateShl(Value *LHS, uint64_t RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateShl	include/IR/NoFolder.h	/^  Instruction *CreateShl(Constant *LHS, Constant *RHS, bool HasNUW = false,$/;"	f	class:llvm::NoFolder
CreateShuffleVector	include/IR/ConstantFolder.h	/^  Constant *CreateShuffleVector(Constant *V1, Constant *V2,$/;"	f	class:llvm::ConstantFolder
CreateShuffleVector	include/IR/IRBuilder.h	/^  Value *CreateShuffleVector(Value *V1, Value *V2, ArrayRef<int> IntMask,$/;"	f	class:llvm::IRBuilder
CreateShuffleVector	include/IR/IRBuilder.h	/^  Value *CreateShuffleVector(Value *V1, Value *V2, Value *Mask,$/;"	f	class:llvm::IRBuilder
CreateShuffleVector	include/IR/NoFolder.h	/^  Instruction *CreateShuffleVector(Constant *V1, Constant *V2,$/;"	f	class:llvm::NoFolder
CreateStore	include/IR/IRBuilder.h	/^  StoreInst *CreateStore(Value *Val, Value *Ptr, bool isVolatile = false) {$/;"	f	class:llvm::IRBuilder
CreateStructGEP	include/IR/IRBuilder.h	/^  Value *CreateStructGEP(Value *Ptr, unsigned Idx, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateSub	include/IR/ConstantFolder.h	/^  Constant *CreateSub(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateSub	include/IR/IRBuilder.h	/^  Value *CreateSub(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateSub	include/IR/NoFolder.h	/^  Instruction *CreateSub(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateSwitch	include/IR/IRBuilder.h	/^  SwitchInst *CreateSwitch(Value *V, BasicBlock *Dest, unsigned NumCases = 10,$/;"	f	class:llvm::IRBuilder
CreateTrunc	include/IR/IRBuilder.h	/^  Value *CreateTrunc(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateTruncOrBitCast	include/IR/ConstantFolder.h	/^  Constant *CreateTruncOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateTruncOrBitCast	include/IR/IRBuilder.h	/^  Value *CreateTruncOrBitCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateTruncOrBitCast	include/IR/NoFolder.h	/^  Instruction *CreateTruncOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateUDiv	include/IR/ConstantFolder.h	/^  Constant *CreateUDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateUDiv	include/IR/IRBuilder.h	/^  Value *CreateUDiv(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateUDiv	include/IR/NoFolder.h	/^  Instruction *CreateUDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateUIToFP	include/IR/IRBuilder.h	/^  Value *CreateUIToFP(Value *V, Type *DestTy, const Twine &Name = ""){$/;"	f	class:llvm::IRBuilder
CreateURem	include/IR/ConstantFolder.h	/^  Constant *CreateURem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateURem	include/IR/IRBuilder.h	/^  Value *CreateURem(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateURem	include/IR/NoFolder.h	/^  Instruction *CreateURem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateUnreachable	include/IR/IRBuilder.h	/^  UnreachableInst *CreateUnreachable() {$/;"	f	class:llvm::IRBuilder
CreateVAArg	include/IR/IRBuilder.h	/^  VAArgInst *CreateVAArg(Value *List, Type *Ty, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateVectorSplat	include/IR/IRBuilder.h	/^  Value *CreateVectorSplat(unsigned NumElts, Value *V, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateXor	include/IR/ConstantFolder.h	/^  Constant *CreateXor(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateXor	include/IR/IRBuilder.h	/^  Value *CreateXor(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateXor	include/IR/IRBuilder.h	/^  Value *CreateXor(Value *LHS, const APInt &RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateXor	include/IR/IRBuilder.h	/^  Value *CreateXor(Value *LHS, uint64_t RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateXor	include/IR/NoFolder.h	/^  Instruction *CreateXor(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateZExt	include/IR/IRBuilder.h	/^  Value *CreateZExt(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateZExtOrBitCast	include/IR/ConstantFolder.h	/^  Constant *CreateZExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateZExtOrBitCast	include/IR/IRBuilder.h	/^  Value *CreateZExtOrBitCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateZExtOrBitCast	include/IR/NoFolder.h	/^  Instruction *CreateZExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateZExtOrTrunc	include/IR/IRBuilder.h	/^  Value *CreateZExtOrTrunc(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CrossThread	include/IR/Instructions.h	/^  CrossThread = 1$/;"	e	enum:llvm::SynchronizationScope
CtxObjtrace	include/corelab/ObjTrace/CtxObjtrace.h	/^			CtxObjtrace() : ModulePass(ID) {}$/;"	f	class:corelab::CtxObjtrace
CtxObjtrace	include/corelab/ObjTrace/CtxObjtrace.h	/^	class CtxObjtrace  : public ModulePass$/;"	c	namespace:corelab
CtxObjtrace	lib/ObjTrace/CtxObjtrace.h	/^			CtxObjtrace() : ModulePass(ID) {}$/;"	f	class:corelab::CtxObjtrace
CtxObjtrace	lib/ObjTrace/CtxObjtrace.h	/^	class CtxObjtrace  : public ModulePass$/;"	c	namespace:corelab
CurDbgLocation	include/IR/IRBuilder.h	/^  DebugLoc CurDbgLocation;$/;"	m	class:llvm::IRBuilderBase
CurTy	include/IR/GetElementPtrTypeIterator.h	/^    Type *CurTy;$/;"	m	class:llvm::generic_gep_type_iterator
Current	include/IR/DebugInfo.h	/^  StringRef Current;$/;"	m	class:llvm::DIHeaderFieldIterator
DEBUG	tools/objtrace/objtraceruntime.h	9;"	d
DEBUG_TYPE	include/corelab/AliasAnalysis/TestClient.hpp	17;"	d
DEBUG_TYPE	include/corelab/CAMP/CAMP.h	15;"	d
DEBUG_TYPE	include/corelab/CAMP/CampExectime.h	16;"	d
DEBUG_TYPE	include/corelab/CAMP/RegiInterIterDepFinder.h	11;"	d
DEBUG_TYPE	include/corelab/ObjTrace/ObjTrace.h	15;"	d
DEBUG_TYPE	lib/AliasAnalysis/IndirectCallAnal.cpp	13;"	d	file:
DEBUG_TYPE	lib/AliasAnalysis/LoopTraverse.cpp	6;"	d	file:
DEBUG_TYPE	lib/AliasAnalysis/RecursiveFuncAnal.cpp	5;"	d	file:
DEBUG_TYPE	lib/CAMP/CAMP.h	15;"	d
DEBUG_TYPE	lib/CAMP/CampExectime.h	16;"	d
DEBUG_TYPE	lib/CAMP/RegiInterIterDepFinder.h	11;"	d
DEBUG_TYPE	lib/ObjTrace/ObjTrace.h	15;"	d
DECLARE_TRANSPARENT_OPERAND_ACCESSORS	include/IR/OperandTraits.h	108;"	d
DEFINE_HELPERS	include/IR/InstrTypes.h	247;"	d
DEFINE_HELPERS	include/IR/InstrTypes.h	275;"	d
DEFINE_INTEGRAL_TYPEBUILDER	include/IR/TypeBuilder.h	151;"	d
DEFINE_INTEGRAL_TYPEBUILDER	include/IR/TypeBuilder.h	178;"	d
DEFINE_MDNODE_GET	include/IR/DebugInfoMetadata.h	1870;"	d
DEFINE_MDNODE_GET	include/IR/DebugInfoMetadata.h	23;"	d
DEFINE_MDNODE_GET_UNPACK	include/IR/DebugInfoMetadata.h	1869;"	d
DEFINE_MDNODE_GET_UNPACK	include/IR/DebugInfoMetadata.h	22;"	d
DEFINE_MDNODE_GET_UNPACK_IMPL	include/IR/DebugInfoMetadata.h	1868;"	d
DEFINE_MDNODE_GET_UNPACK_IMPL	include/IR/DebugInfoMetadata.h	21;"	d
DEFINE_TRANSPARENT_OPERAND_ACCESSORS	include/IR/OperandTraits.h	123;"	d
DELEGATE	include/IR/InstVisitor.h	285;"	d
DELEGATE	include/IR/InstVisitor.h	30;"	d
DEP_ELEM_SEQ_MASK	include/corelab/CAMP/campCommon.h	64;"	d
DEP_ELEM_SEQ_MASK	lib/CAMP/campCommon.h	64;"	d
DEP_ELEM_SEQ_OFF	include/corelab/CAMP/campCommon.h	66;"	d
DEP_ELEM_SEQ_OFF	lib/CAMP/campCommon.h	66;"	d
DEP_ELEM_SIID_MASK	include/corelab/CAMP/campCommon.h	63;"	d
DEP_ELEM_SIID_MASK	lib/CAMP/campCommon.h	63;"	d
DEP_ELEM_SIID_OFF	include/corelab/CAMP/campCommon.h	65;"	d
DEP_ELEM_SIID_OFF	lib/CAMP/campCommon.h	65;"	d
DIArray	include/IR/DebugInfo.h	/^typedef DITypedArray<DIDescriptor> DIArray;$/;"	t	namespace:llvm
DIBasicType	include/IR/DebugInfo.h	/^  DIBasicType(const MDBasicType *N) : DIType(N) {}$/;"	f	class:llvm::DIBasicType
DIBasicType	include/IR/DebugInfo.h	/^  explicit DIBasicType(const MDNode *N = nullptr) : DIType(N) {}$/;"	f	class:llvm::DIBasicType
DIBasicType	include/IR/DebugInfo.h	/^class DIBasicType : public DIType {$/;"	c	namespace:llvm
DIBuilder	include/IR/DIBuilder.h	/^  class DIBuilder {$/;"	c	namespace:llvm
DICompileUnit	include/IR/DebugInfo.h	/^  DICompileUnit(const MDCompileUnit *N) : DIScope(N) {}$/;"	f	class:llvm::DICompileUnit
DICompileUnit	include/IR/DebugInfo.h	/^  explicit DICompileUnit(const MDNode *N = nullptr) : DIScope(N) {}$/;"	f	class:llvm::DICompileUnit
DICompileUnit	include/IR/DebugInfo.h	/^class DICompileUnit : public DIScope {$/;"	c	namespace:llvm
DICompositeType	include/IR/DebugInfo.h	/^  DICompositeType(const MDCompositeTypeBase *N) : DIDerivedType(N) {}$/;"	f	class:llvm::DICompositeType
DICompositeType	include/IR/DebugInfo.h	/^  explicit DICompositeType(const MDNode *N = nullptr) : DIDerivedType(N) {}$/;"	f	class:llvm::DICompositeType
DICompositeType	include/IR/DebugInfo.h	/^class DICompositeType : public DIDerivedType {$/;"	c	namespace:llvm
DIDerivedType	include/IR/DebugInfo.h	/^  DIDerivedType(const MDDerivedTypeBase *N) : DIType(N) {}$/;"	f	class:llvm::DIDerivedType
DIDerivedType	include/IR/DebugInfo.h	/^  explicit DIDerivedType(const MDNode *N = nullptr) : DIType(N) {}$/;"	f	class:llvm::DIDerivedType
DIDerivedType	include/IR/DebugInfo.h	/^class DIDerivedType : public DIType {$/;"	c	namespace:llvm
DIDescriptor	include/IR/DebugInfo.h	/^  explicit DIDescriptor(const MDNode *N = nullptr) : DbgNode(N) {}$/;"	f	class:llvm::DIDescriptor
DIDescriptor	include/IR/DebugInfo.h	/^class DIDescriptor {$/;"	c	namespace:llvm
DIDescriptorRef	include/IR/DebugInfo.h	/^typedef DIRef<DIDescriptor> DIDescriptorRef;$/;"	t	namespace:llvm
DIEnumerator	include/IR/DebugInfo.h	/^  DIEnumerator(const MDEnumerator *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIEnumerator
DIEnumerator	include/IR/DebugInfo.h	/^  explicit DIEnumerator(const MDNode *N = nullptr) : DIDescriptor(N) {}$/;"	f	class:llvm::DIEnumerator
DIEnumerator	include/IR/DebugInfo.h	/^class DIEnumerator : public DIDescriptor {$/;"	c	namespace:llvm
DIExpression	include/IR/DebugInfo.h	/^  DIExpression(const MDExpression *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIExpression
DIExpression	include/IR/DebugInfo.h	/^  explicit DIExpression(const MDNode *N = nullptr) : DIDescriptor(N) {}$/;"	f	class:llvm::DIExpression
DIExpression	include/IR/DebugInfo.h	/^class DIExpression : public DIDescriptor {$/;"	c	namespace:llvm
DIFile	include/IR/DebugInfo.h	/^  DIFile(const MDFile *N) : DIScope(N) {}$/;"	f	class:llvm::DIFile
DIFile	include/IR/DebugInfo.h	/^  explicit DIFile(const MDNode *N = nullptr) : DIScope(N) {}$/;"	f	class:llvm::DIFile
DIFile	include/IR/DebugInfo.h	/^class DIFile : public DIScope {$/;"	c	namespace:llvm
DIFlags	include/IR/DebugInfoMetadata.h	/^  enum DIFlags {$/;"	g	class:llvm::DebugNode
DIGlobalVariable	include/IR/DebugInfo.h	/^  DIGlobalVariable(const MDGlobalVariable *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIGlobalVariable
DIGlobalVariable	include/IR/DebugInfo.h	/^  explicit DIGlobalVariable(const MDNode *N = nullptr) : DIDescriptor(N) {}$/;"	f	class:llvm::DIGlobalVariable
DIGlobalVariable	include/IR/DebugInfo.h	/^class DIGlobalVariable : public DIDescriptor {$/;"	c	namespace:llvm
DIHeaderFieldIterator	include/IR/DebugInfo.h	/^  DIHeaderFieldIterator() {}$/;"	f	class:llvm::DIHeaderFieldIterator
DIHeaderFieldIterator	include/IR/DebugInfo.h	/^  explicit DIHeaderFieldIterator(StringRef Header)$/;"	f	class:llvm::DIHeaderFieldIterator
DIHeaderFieldIterator	include/IR/DebugInfo.h	/^class DIHeaderFieldIterator$/;"	c	namespace:llvm
DIImportedEntity	include/IR/DebugInfo.h	/^  DIImportedEntity(const MDImportedEntity *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIImportedEntity
DIImportedEntity	include/IR/DebugInfo.h	/^  explicit DIImportedEntity(const MDNode *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIImportedEntity
DIImportedEntity	include/IR/DebugInfo.h	/^class DIImportedEntity : public DIDescriptor {$/;"	c	namespace:llvm
DILexicalBlock	include/IR/DebugInfo.h	/^  DILexicalBlock(const MDLexicalBlock *N) : DIScope(N) {}$/;"	f	class:llvm::DILexicalBlock
DILexicalBlock	include/IR/DebugInfo.h	/^  explicit DILexicalBlock(const MDNode *N = nullptr) : DIScope(N) {}$/;"	f	class:llvm::DILexicalBlock
DILexicalBlock	include/IR/DebugInfo.h	/^class DILexicalBlock : public DIScope {$/;"	c	namespace:llvm
DILexicalBlockFile	include/IR/DebugInfo.h	/^  DILexicalBlockFile(const MDLexicalBlockFile *N) : DIScope(N) {}$/;"	f	class:llvm::DILexicalBlockFile
DILexicalBlockFile	include/IR/DebugInfo.h	/^  explicit DILexicalBlockFile(const MDNode *N = nullptr) : DIScope(N) {}$/;"	f	class:llvm::DILexicalBlockFile
DILexicalBlockFile	include/IR/DebugInfo.h	/^class DILexicalBlockFile : public DIScope {$/;"	c	namespace:llvm
DILocation	include/IR/DebugInfo.h	/^  DILocation(const MDLocation *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DILocation
DILocation	include/IR/DebugInfo.h	/^  explicit DILocation(const MDNode *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DILocation
DILocation	include/IR/DebugInfo.h	/^class DILocation : public DIDescriptor {$/;"	c	namespace:llvm
DINameSpace	include/IR/DebugInfo.h	/^  DINameSpace(const MDNamespace *N) : DIScope(N) {}$/;"	f	class:llvm::DINameSpace
DINameSpace	include/IR/DebugInfo.h	/^  explicit DINameSpace(const MDNode *N = nullptr) : DIScope(N) {}$/;"	f	class:llvm::DINameSpace
DINameSpace	include/IR/DebugInfo.h	/^class DINameSpace : public DIScope {$/;"	c	namespace:llvm
DIObjCProperty	include/IR/DebugInfo.h	/^  DIObjCProperty(const MDObjCProperty *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIObjCProperty
DIObjCProperty	include/IR/DebugInfo.h	/^  explicit DIObjCProperty(const MDNode *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIObjCProperty
DIObjCProperty	include/IR/DebugInfo.h	/^class DIObjCProperty : public DIDescriptor {$/;"	c	namespace:llvm
DIRS	Makefile	/^DIRS = lib tools$/;"	m
DIRS	lib/Makefile	/^DIRS=\\$/;"	m
DIRS	tools/Makefile	/^DIRS=\\$/;"	m
DIRef	include/IR/DebugInfo.h	/^template <typename T> class DIRef {$/;"	c	namespace:llvm
DIScope	include/IR/DebugInfo.h	/^  DIScope(const MDScope *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIScope
DIScope	include/IR/DebugInfo.h	/^  explicit DIScope(const MDNode *N = nullptr) : DIDescriptor(N) {}$/;"	f	class:llvm::DIScope
DIScope	include/IR/DebugInfo.h	/^class DIScope : public DIDescriptor {$/;"	c	namespace:llvm
DIScopeRef	include/IR/DebugInfo.h	/^typedef DIRef<DIScope> DIScopeRef;$/;"	t	namespace:llvm
DISubprogram	include/IR/DebugInfo.h	/^  DISubprogram(const MDSubprogram *N) : DIScope(N) {}$/;"	f	class:llvm::DISubprogram
DISubprogram	include/IR/DebugInfo.h	/^  explicit DISubprogram(const MDNode *N = nullptr) : DIScope(N) {}$/;"	f	class:llvm::DISubprogram
DISubprogram	include/IR/DebugInfo.h	/^class DISubprogram : public DIScope {$/;"	c	namespace:llvm
DISubrange	include/IR/DebugInfo.h	/^  DISubrange(const MDSubrange *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DISubrange
DISubrange	include/IR/DebugInfo.h	/^  explicit DISubrange(const MDNode *N = nullptr) : DIDescriptor(N) {}$/;"	f	class:llvm::DISubrange
DISubrange	include/IR/DebugInfo.h	/^class DISubrange : public DIDescriptor {$/;"	c	namespace:llvm
DISubroutineType	include/IR/DebugInfo.h	/^  DISubroutineType(const MDSubroutineType *N) : DICompositeType(N) {}$/;"	f	class:llvm::DISubroutineType
DISubroutineType	include/IR/DebugInfo.h	/^  explicit DISubroutineType(const MDNode *N = nullptr) : DICompositeType(N) {}$/;"	f	class:llvm::DISubroutineType
DISubroutineType	include/IR/DebugInfo.h	/^class DISubroutineType : public DICompositeType {$/;"	c	namespace:llvm
DITemplateTypeParameter	include/IR/DebugInfo.h	/^  DITemplateTypeParameter(const MDTemplateTypeParameter *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DITemplateTypeParameter
DITemplateTypeParameter	include/IR/DebugInfo.h	/^  explicit DITemplateTypeParameter(const MDNode *N = nullptr)$/;"	f	class:llvm::DITemplateTypeParameter
DITemplateTypeParameter	include/IR/DebugInfo.h	/^class DITemplateTypeParameter : public DIDescriptor {$/;"	c	namespace:llvm
DITemplateValueParameter	include/IR/DebugInfo.h	/^  DITemplateValueParameter(const MDTemplateValueParameter *N)$/;"	f	class:llvm::DITemplateValueParameter
DITemplateValueParameter	include/IR/DebugInfo.h	/^  explicit DITemplateValueParameter(const MDNode *N = nullptr)$/;"	f	class:llvm::DITemplateValueParameter
DITemplateValueParameter	include/IR/DebugInfo.h	/^class DITemplateValueParameter : public DIDescriptor {$/;"	c	namespace:llvm
DIType	include/IR/DebugInfo.h	/^  DIType(const MDType *N) : DIScope(N) {}$/;"	f	class:llvm::DIType
DIType	include/IR/DebugInfo.h	/^  explicit DIType(const MDNode *N = nullptr) : DIScope(N) {}$/;"	f	class:llvm::DIType
DIType	include/IR/DebugInfo.h	/^class DIType : public DIScope {$/;"	c	namespace:llvm
DITypeArray	include/IR/DebugInfo.h	/^typedef DITypedArray<DITypeRef> DITypeArray;$/;"	t	namespace:llvm
DITypeIdentifierMap	include/IR/DebugInfo.h	/^typedef DenseMap<const MDString *, MDNode *> DITypeIdentifierMap;$/;"	t	namespace:llvm
DITypeRef	include/IR/DebugInfo.h	/^typedef DIRef<DIType> DITypeRef;$/;"	t	namespace:llvm
DITypedArray	include/IR/DebugInfo.h	/^  explicit DITypedArray(const MDNode *N = nullptr) : DIDescriptor(N) {}$/;"	f	class:llvm::DITypedArray
DITypedArray	include/IR/DebugInfo.h	/^template <typename T> class DITypedArray : public DIDescriptor {$/;"	c	namespace:llvm
DIVariable	include/IR/DebugInfo.h	/^  DIVariable(const MDLocalVariable *N) : DIDescriptor(N) {}$/;"	f	class:llvm::DIVariable
DIVariable	include/IR/DebugInfo.h	/^  explicit DIVariable(const MDNode *N = nullptr) : DIDescriptor(N) {}$/;"	f	class:llvm::DIVariable
DIVariable	include/IR/DebugInfo.h	/^class DIVariable : public DIDescriptor {$/;"	c	namespace:llvm
DK_Bitcode	include/IR/DiagnosticInfo.h	/^  DK_Bitcode,$/;"	e	enum:llvm::DiagnosticKind
DK_DebugMetadataVersion	include/IR/DiagnosticInfo.h	/^  DK_DebugMetadataVersion,$/;"	e	enum:llvm::DiagnosticKind
DK_FirstPluginKind	include/IR/DiagnosticInfo.h	/^  DK_FirstPluginKind$/;"	e	enum:llvm::DiagnosticKind
DK_InlineAsm	include/IR/DiagnosticInfo.h	/^  DK_InlineAsm,$/;"	e	enum:llvm::DiagnosticKind
DK_Linker	include/IR/DiagnosticInfo.h	/^  DK_Linker,$/;"	e	enum:llvm::DiagnosticKind
DK_OptimizationFailure	include/IR/DiagnosticInfo.h	/^  DK_OptimizationFailure,$/;"	e	enum:llvm::DiagnosticKind
DK_OptimizationRemark	include/IR/DiagnosticInfo.h	/^  DK_OptimizationRemark,$/;"	e	enum:llvm::DiagnosticKind
DK_OptimizationRemarkAnalysis	include/IR/DiagnosticInfo.h	/^  DK_OptimizationRemarkAnalysis,$/;"	e	enum:llvm::DiagnosticKind
DK_OptimizationRemarkMissed	include/IR/DiagnosticInfo.h	/^  DK_OptimizationRemarkMissed,$/;"	e	enum:llvm::DiagnosticKind
DK_SampleProfile	include/IR/DiagnosticInfo.h	/^  DK_SampleProfile,$/;"	e	enum:llvm::DiagnosticKind
DK_StackSize	include/IR/DiagnosticInfo.h	/^  DK_StackSize,$/;"	e	enum:llvm::DiagnosticKind
DL	include/IR/Mangler.h	/^  const DataLayout *DL;$/;"	m	class:llvm::Mangler
DL	include/IR/Module.h	/^  DataLayout DL;                  \/\/\/< DataLayout associated with the module$/;"	m	class:llvm::Module
DLLExportStorageClass	include/IR/GlobalValue.h	/^    DLLExportStorageClass = 2  \/\/\/< Function to be accessible from DLL.$/;"	e	enum:llvm::GlobalValue::DLLStorageClassTypes
DLLImportStorageClass	include/IR/GlobalValue.h	/^    DLLImportStorageClass = 1, \/\/\/< Function to be imported from DLL$/;"	e	enum:llvm::GlobalValue::DLLStorageClassTypes
DLLStorageClassTypes	include/IR/GlobalValue.h	/^  enum DLLStorageClassTypes {$/;"	g	class:llvm::GlobalValue
DLoc	include/IR/DiagnosticInfo.h	/^  DebugLoc DLoc;$/;"	m	class:llvm::DiagnosticInfoOptimizationBase
DONT_BUILD_RELINKED	tools/camp/Makefile	/^DONT_BUILD_RELINKED=1$/;"	m
DONT_BUILD_RELINKED	tools/campSampling/Makefile	/^DONT_BUILD_RELINKED=1$/;"	m
DONT_BUILD_RELINKED	tools/objtrace/Makefile	/^DONT_BUILD_RELINKED=1$/;"	m
DO_NOTHING	lib/AliasAnalysis/RecursiveFuncAnal.cpp	11;"	d	file:
DO_NOTHING	lib/Utilities/FindFunctionExitBB.cpp	9;"	d	file:
DS_Error	include/IR/DiagnosticInfo.h	/^  DS_Error,$/;"	e	enum:llvm::DiagnosticSeverity
DS_Note	include/IR/DiagnosticInfo.h	/^  DS_Note$/;"	e	enum:llvm::DiagnosticSeverity
DS_Remark	include/IR/DiagnosticInfo.h	/^  DS_Remark,$/;"	e	enum:llvm::DiagnosticSeverity
DS_Warning	include/IR/DiagnosticInfo.h	/^  DS_Warning,$/;"	e	enum:llvm::DiagnosticSeverity
DT	include/IR/Dominators.h	/^  DominatorTree DT;$/;"	m	class:llvm::DominatorTreeWrapperPass
Data	include/IR/ValueMap.h	/^  ExtraData Data;$/;"	m	class:llvm::ValueMap
DataElements	include/IR/Constants.h	/^  const char *DataElements;$/;"	m	class:llvm::ConstantDataSequential
DataLayout	include/IR/DataLayout.h	/^  DataLayout(const DataLayout &DL) : LayoutMap(nullptr) { *this = DL; }$/;"	f	class:llvm::DataLayout
DataLayout	include/IR/DataLayout.h	/^  explicit DataLayout(StringRef LayoutDescription) : LayoutMap(nullptr) {$/;"	f	class:llvm::DataLayout
DataLayout	include/IR/DataLayout.h	/^class DataLayout {$/;"	c	namespace:llvm
DbgDeclareInst	include/IR/IntrinsicInst.h	/^  class DbgDeclareInst : public DbgInfoIntrinsic {$/;"	c	namespace:llvm
DbgInfoIntrinsic	include/IR/IntrinsicInst.h	/^  class DbgInfoIntrinsic : public IntrinsicInst {$/;"	c	namespace:llvm
DbgLoc	include/IR/IRBuilder.h	/^    DebugLoc DbgLoc;$/;"	m	class:llvm::IRBuilderBase::InsertPointGuard
DbgLoc	include/IR/Instruction.h	/^  DebugLoc DbgLoc;                         \/\/ 'dbg' Metadata cache.$/;"	m	class:llvm::Instruction
DbgNode	include/IR/DebugInfo.h	/^  const MDNode *DbgNode;$/;"	m	class:llvm::DIDescriptor
DbgValueInst	include/IR/IntrinsicInst.h	/^  class DbgValueInst : public DbgInfoIntrinsic {$/;"	c	namespace:llvm
Debug	include/corelab/CAMP/campDebug.h	/^		namespace Debug$/;"	n	namespace:corelab::CAMP
Debug	lib/CAMP/campDebug.h	/^		namespace Debug$/;"	n	namespace:corelab::CAMP
DebugEmissionKind	include/IR/DIBuilder.h	/^    enum DebugEmissionKind { FullDebug=1, LineTablesOnly };$/;"	g	class:llvm::DIBuilder
DebugInfoFinder	include/IR/DebugInfo.h	/^  DebugInfoFinder() : TypeMapInitialized(false) {}$/;"	f	class:llvm::DebugInfoFinder
DebugInfoFinder	include/IR/DebugInfo.h	/^class DebugInfoFinder {$/;"	c	namespace:llvm
DebugLoc	include/IR/DebugLoc.h	/^    DebugLoc() {}$/;"	f	class:llvm::DebugLoc
DebugLoc	include/IR/DebugLoc.h	/^    DebugLoc(DebugLoc &&X) : Loc(std::move(X.Loc)) {}$/;"	f	class:llvm::DebugLoc
DebugLoc	include/IR/DebugLoc.h	/^    DebugLoc(const DebugLoc &X) : Loc(X.Loc) {}$/;"	f	class:llvm::DebugLoc
DebugLoc	include/IR/DebugLoc.h	/^  class DebugLoc {$/;"	c	namespace:llvm
DebugLogging	include/IR/PassManager.h	/^  bool DebugLogging;$/;"	m	class:llvm::AnalysisManager
DebugLogging	include/IR/PassManager.h	/^  bool DebugLogging;$/;"	m	class:llvm::PassManager
DebugNode	include/IR/DebugInfoMetadata.h	/^  DebugNode(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::DebugNode
DebugNode	include/IR/DebugInfoMetadata.h	/^class DebugNode : public MDNode {$/;"	c	namespace:llvm
DeclareFn	include/IR/DIBuilder.h	/^    Function *DeclareFn;     \/\/ llvm.dbg.declare$/;"	m	class:llvm::DIBuilder
Default	include/IR/Mangler.h	/^    Default,               \/\/\/< Emit default string before each symbol.$/;"	e	enum:llvm::Mangler::ManglerPrefixTy
DefaultFPMathTag	include/IR/IRBuilder.h	/^  MDNode *DefaultFPMathTag;$/;"	m	class:llvm::IRBuilderBase
DefaultPseudoIndex	include/IR/Instructions.h	/^  static const unsigned DefaultPseudoIndex = static_cast<unsigned>(~0L-1);$/;"	m	class:llvm::SwitchInst
DefaultStorageClass	include/IR/GlobalValue.h	/^    DefaultStorageClass   = 0,$/;"	e	enum:llvm::GlobalValue::DLLStorageClassTypes
DefaultVisibility	include/IR/GlobalValue.h	/^    DefaultVisibility = 0,  \/\/\/< The GV is visible$/;"	e	enum:llvm::GlobalValue::VisibilityTypes
Dematerialize	include/IR/GVMaterializer.h	/^  virtual void Dematerialize(GlobalValue *) {}$/;"	f	class:llvm::GVMaterializer
DenseMapInfo	include/IR/Attributes.h	/^template<> struct DenseMapInfo<AttributeSet> {$/;"	s	namespace:llvm
DenseMapInfo	include/IR/Metadata.h	/^struct DenseMapInfo<AAMDNodes> {$/;"	s	namespace:llvm
DenseMapInfo	include/IR/ValueHandle.h	/^struct DenseMapInfo<AssertingVH<T> > {$/;"	s	namespace:llvm
DenseMapInfo	include/IR/ValueMap.h	/^struct DenseMapInfo<ValueMapCallbackVH<KeyT, ValueT, Config> > {$/;"	s	namespace:llvm
DepElem	include/corelab/CAMP/campCommon.h	/^		} DepElem;$/;"	t	namespace:corelab::CAMP	typeref:struct:corelab::CAMP::__anon1
DepElem	lib/CAMP/campCommon.h	/^		} DepElem;$/;"	t	namespace:corelab::CAMP	typeref:struct:corelab::CAMP::__anon25
DepElemID	include/corelab/CAMP/campCommon.h	/^		typedef uint32_t 	DepElemID;$/;"	t	namespace:corelab::CAMP
DepElemID	lib/CAMP/campCommon.h	/^		typedef uint32_t 	DepElemID;$/;"	t	namespace:corelab::CAMP
DepElemIDSet	include/corelab/CAMP/campCommon.h	/^		typedef unordered_set<DepElemID>	DepElemIDSet;$/;"	t	namespace:corelab::CAMP
DepElemIDSet	lib/CAMP/campCommon.h	/^		typedef unordered_set<DepElemID>	DepElemIDSet;$/;"	t	namespace:corelab::CAMP
DepID	tools/camp/campExecRuntime.h	/^typedef uint64_t DepID;$/;"	t
DepID	tools/camp/campRuntime.h	/^typedef uint64_t DepID;$/;"	t
DepID	tools/campSampling/campRuntime.h	/^typedef uint64_t DepID;$/;"	t
Depth	include/IR/LegacyPassManagers.h	/^  unsigned Depth;$/;"	m	class:llvm::PMDataManager
DerefBytes	include/IR/Attributes.h	/^  uint64_t DerefBytes;$/;"	m	class:llvm::AttrBuilder
Dereferenceable	include/IR/Attributes.h	/^    Dereferenceable,       \/\/\/< Pointer is known to be dereferenceable$/;"	e	enum:llvm::Attribute::AttrKind
DeviceEntry	include/corelab/Metadata/NamedMetadata.h	/^			typedef struct DeviceEntry {$/;"	s	class:corelab::EsperantoNamer
DeviceEntry	include/corelab/Metadata/NamedMetadata.h	/^			} DeviceEntry;$/;"	t	class:corelab::EsperantoNamer	typeref:struct:corelab::EsperantoNamer::DeviceEntry
DeviceMap	include/corelab/Metadata/NamedMetadata.h	/^	class DeviceMap{$/;"	c	namespace:corelab
DeviceMapEntry	include/corelab/Metadata/NamedMetadata.h	/^	class DeviceMapEntry{$/;"	c	namespace:corelab
DiagnosticHandlerFunction	include/IR/DiagnosticInfo.h	/^typedef std::function<void(const DiagnosticInfo &)> DiagnosticHandlerFunction;$/;"	t	namespace:llvm
DiagnosticHandlerTy	include/IR/LLVMContext.h	/^  typedef void (*DiagnosticHandlerTy)(const DiagnosticInfo &DI, void *Context);$/;"	t	class:llvm::LLVMContext
DiagnosticInfo	include/IR/DiagnosticInfo.h	/^  DiagnosticInfo(\/* DiagnosticKind *\/ int Kind, DiagnosticSeverity Severity)$/;"	f	class:llvm::DiagnosticInfo
DiagnosticInfo	include/IR/DiagnosticInfo.h	/^class DiagnosticInfo {$/;"	c	namespace:llvm
DiagnosticInfoDebugMetadataVersion	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoDebugMetadataVersion(const Module &M, unsigned MetadataVersion,$/;"	f	class:llvm::DiagnosticInfoDebugMetadataVersion
DiagnosticInfoDebugMetadataVersion	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoDebugMetadataVersion : public DiagnosticInfo {$/;"	c	namespace:llvm
DiagnosticInfoInlineAsm	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoInlineAsm(const Twine &MsgStr,$/;"	f	class:llvm::DiagnosticInfoInlineAsm
DiagnosticInfoInlineAsm	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoInlineAsm(unsigned LocCookie, const Twine &MsgStr,$/;"	f	class:llvm::DiagnosticInfoInlineAsm
DiagnosticInfoInlineAsm	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoInlineAsm : public DiagnosticInfo {$/;"	c	namespace:llvm
DiagnosticInfoOptimizationBase	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoOptimizationBase(enum DiagnosticKind Kind,$/;"	f	class:llvm::DiagnosticInfoOptimizationBase
DiagnosticInfoOptimizationBase	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoOptimizationBase : public DiagnosticInfo {$/;"	c	namespace:llvm
DiagnosticInfoOptimizationFailure	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoOptimizationFailure(const Function &Fn, const DebugLoc &DLoc,$/;"	f	class:llvm::DiagnosticInfoOptimizationFailure
DiagnosticInfoOptimizationFailure	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoOptimizationFailure$/;"	c	namespace:llvm
DiagnosticInfoOptimizationRemark	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoOptimizationRemark(const char *PassName, const Function &Fn,$/;"	f	class:llvm::DiagnosticInfoOptimizationRemark
DiagnosticInfoOptimizationRemark	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoOptimizationRemark : public DiagnosticInfoOptimizationBase {$/;"	c	namespace:llvm
DiagnosticInfoOptimizationRemarkAnalysis	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoOptimizationRemarkAnalysis(const char *PassName,$/;"	f	class:llvm::DiagnosticInfoOptimizationRemarkAnalysis
DiagnosticInfoOptimizationRemarkAnalysis	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoOptimizationRemarkAnalysis$/;"	c	namespace:llvm
DiagnosticInfoOptimizationRemarkMissed	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoOptimizationRemarkMissed(const char *PassName,$/;"	f	class:llvm::DiagnosticInfoOptimizationRemarkMissed
DiagnosticInfoOptimizationRemarkMissed	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoOptimizationRemarkMissed$/;"	c	namespace:llvm
DiagnosticInfoSampleProfile	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoSampleProfile(const Twine &Msg,$/;"	f	class:llvm::DiagnosticInfoSampleProfile
DiagnosticInfoSampleProfile	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoSampleProfile(const char *FileName, const Twine &Msg,$/;"	f	class:llvm::DiagnosticInfoSampleProfile
DiagnosticInfoSampleProfile	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoSampleProfile(const char *FileName, unsigned LineNum,$/;"	f	class:llvm::DiagnosticInfoSampleProfile
DiagnosticInfoSampleProfile	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoSampleProfile : public DiagnosticInfo {$/;"	c	namespace:llvm
DiagnosticInfoStackSize	include/IR/DiagnosticInfo.h	/^  DiagnosticInfoStackSize(const Function &Fn, unsigned StackSize,$/;"	f	class:llvm::DiagnosticInfoStackSize
DiagnosticInfoStackSize	include/IR/DiagnosticInfo.h	/^class DiagnosticInfoStackSize : public DiagnosticInfo {$/;"	c	namespace:llvm
DiagnosticKind	include/IR/DiagnosticInfo.h	/^enum DiagnosticKind {$/;"	g	namespace:llvm
DiagnosticPrinter	include/IR/DiagnosticPrinter.h	/^class DiagnosticPrinter {$/;"	c	namespace:llvm
DiagnosticPrinterRawOStream	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinterRawOStream(raw_ostream &Stream) : Stream(Stream) {};$/;"	f	class:llvm::DiagnosticPrinterRawOStream
DiagnosticPrinterRawOStream	include/IR/DiagnosticPrinter.h	/^class DiagnosticPrinterRawOStream : public DiagnosticPrinter {$/;"	c	namespace:llvm
DiagnosticSeverity	include/IR/DiagnosticInfo.h	/^enum DiagnosticSeverity {$/;"	g	namespace:llvm
Dialect	include/IR/InlineAsm.h	/^  AsmDialect Dialect;$/;"	m	class:llvm::InlineAsm
Discriminator	include/IR/DebugInfoMetadata.h	/^  unsigned Discriminator;$/;"	m	class:llvm::MDLexicalBlockFile
Distinct	include/IR/Metadata.h	/^  enum StorageType { Uniqued, Distinct, Temporary };$/;"	e	enum:llvm::Metadata::StorageType
DoPHITranslation	include/IR/Value.h	/^  const Value *DoPHITranslation(const BasicBlock *CurBB,$/;"	f	class:llvm::Value
DomTreeNode	include/IR/Dominators.h	/^typedef DomTreeNodeBase<BasicBlock> DomTreeNode;$/;"	t	namespace:llvm
DominatorTree	include/IR/Dominators.h	/^  DominatorTree() : DominatorTreeBase<BasicBlock>(false) {}$/;"	f	class:llvm::DominatorTree
DominatorTree	include/IR/Dominators.h	/^  DominatorTree(DominatorTree &&Arg)$/;"	f	class:llvm::DominatorTree
DominatorTree	include/IR/Dominators.h	/^class DominatorTree : public DominatorTreeBase<BasicBlock> {$/;"	c	namespace:llvm
DominatorTreeAnalysis	include/IR/Dominators.h	/^class DominatorTreeAnalysis {$/;"	c	namespace:llvm
DominatorTreePrinterPass	include/IR/Dominators.h	/^class DominatorTreePrinterPass {$/;"	c	namespace:llvm
DominatorTreeVerifierPass	include/IR/Dominators.h	/^struct DominatorTreeVerifierPass {$/;"	s	namespace:llvm
DominatorTreeWrapperPass	include/IR/Dominators.h	/^  DominatorTreeWrapperPass() : FunctionPass(ID) {$/;"	f	class:llvm::DominatorTreeWrapperPass
DominatorTreeWrapperPass	include/IR/Dominators.h	/^class DominatorTreeWrapperPass : public FunctionPass {$/;"	c	namespace:llvm
Double	include/IR/Intrinsics.h	/^      Void, VarArg, MMX, Metadata, Half, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
DoubleTyID	include/IR/Type.h	/^    DoubleTyID,      \/\/\/<  3: 64-bit floating point type$/;"	e	enum:llvm::Type::TypeID
DumpBacktrace	include/corelab/CAMP/campDebug.h	/^			DumpBacktrace ()$/;"	f	namespace:corelab::CAMP::Debug
DumpBacktrace	lib/CAMP/campDebug.h	/^			DumpBacktrace ()$/;"	f	namespace:corelab::CAMP::Debug
DumpBacktrace	tools/camp/ShadowMemory.hpp	/^inline static void DumpBacktrace (){$/;"	f
DumpBacktrace	tools/campSampling/ShadowMemory.hpp	/^inline static void DumpBacktrace (){$/;"	f
DumpBacktrace	tools/objtrace/ShadowMemory.hpp	/^inline static void DumpBacktrace (){$/;"	f
EXECUTION_MSG	include/IR/LegacyPassManagers.h	/^  EXECUTION_MSG, \/\/ "Executing Pass '" + PassName$/;"	e	enum:llvm::PassDebuggingString
EXTRA_DIST	Makefile	/^EXTRA_DIST = include$/;"	m
Edge	include/corelab/Metadata/typedefs.h	/^  typedef std::pair<Vertex,Vertex> Edge;$/;"	t	namespace:corelab
Edge	include/corelab/Utilities/ProfileInfo.h	/^    typedef std::pair<const BType*, const BType*> Edge;$/;"	t	class:llvm::ProfileInfoT
EdgeInformation	include/corelab/Utilities/ProfileInfo.h	/^    std::map<const FType*, EdgeWeights> EdgeInformation;$/;"	m	class:llvm::ProfileInfoT
EdgeWeight	include/corelab/Utilities/ProfileInfo.h	/^    typedef std::pair<Edge, double> EdgeWeight;$/;"	t	class:llvm::ProfileInfoT
EdgeWeights	include/corelab/Utilities/ProfileInfo.h	/^    typedef std::map<Edge, double> EdgeWeights;$/;"	t	class:llvm::ProfileInfoT
ElapsedFromBase	include/corelab/CAMP/campTimer.h	/^			ElapsedFromBase ()$/;"	f	namespace:corelab::CAMP::Timer
ElapsedFromLast	include/corelab/CAMP/campTimer.h	/^			ElapsedFromLast ()$/;"	f	namespace:corelab::CAMP::Timer
Elements	include/IR/DebugInfoMetadata.h	/^  std::vector<uint64_t> Elements;$/;"	m	class:llvm::MDExpression
EmissionKind	include/IR/DebugInfoMetadata.h	/^  unsigned EmissionKind;$/;"	m	class:llvm::MDCompileUnit
Encoding	include/IR/DebugInfoMetadata.h	/^  unsigned Encoding;$/;"	m	class:llvm::MDBasicType
End	include/IR/Dominators.h	/^  const BasicBlock *End;$/;"	m	class:llvm::BasicBlockEdge
End	include/corelab/Utilities/InstInsertPt.h	/^      static InstInsertPt End(BasicBlock *bb) {$/;"	f	class:corelab::InstInsertPt
EndAttrKinds	include/IR/Attributes.h	/^    EndAttrKinds           \/\/\/< Sentinal value useful for loops$/;"	e	enum:llvm::Attribute::AttrKind
Entry	include/IR/Metadata.h	/^  StringMapEntry<MDString> *Entry;$/;"	m	class:llvm::MDString
Error	include/IR/Module.h	/^    Error = 1,$/;"	e	enum:llvm::Module::ModFlagBehavior
EsperantoNamer	include/corelab/Metadata/NamedMetadata.h	/^	class EsperantoNamer: public ModulePass$/;"	c	namespace:corelab
EsperantoNamer	lib/Metadata/EsperantoNamer.cpp	/^	EsperantoNamer::EsperantoNamer() : ModulePass(ID) { }$/;"	f	class:corelab::EsperantoNamer
EsperantoPlatform	include/corelab/Metadata/NamedMetadata.h	/^			typedef enum EsperantoPlatform {$/;"	g	class:corelab::EsperantoNamer
EsperantoPlatform	include/corelab/Metadata/NamedMetadata.h	/^			} EsperantoPlatform;$/;"	t	class:corelab::EsperantoNamer	typeref:enum:corelab::EsperantoNamer::EsperantoPlatform
ExactMatch	include/IR/Comdat.h	/^    ExactMatch,   \/\/\/< The data referenced by the COMDAT must be the same.$/;"	e	enum:llvm::Comdat::SelectionKind
Exact_match	include/IR/PatternMatch.h	/^  Exact_match(const SubPattern_t &SP) : SubPattern(SP) {}$/;"	f	struct:llvm::PatternMatch::Exact_match
Exact_match	include/IR/PatternMatch.h	/^template <typename SubPattern_t> struct Exact_match {$/;"	s	namespace:llvm::PatternMatch
ExitBBMap	include/corelab/Utilities/FindFunctionExitBB.hpp	/^			typedef std::unordered_map<Function *, ExitBBs> ExitBBMap;$/;"	t	struct:corelab::FindFunctionExitBB
ExitBBs	include/corelab/Utilities/FindFunctionExitBB.hpp	/^			typedef std::pair<llvm::ReturnInst *, std::vector<UnreachableInst *>> ExitBBs;$/;"	t	struct:corelab::FindFunctionExitBB
ExprOperand	include/IR/DebugInfoMetadata.h	/^    explicit ExprOperand(const uint64_t *Op) : Op(Op) {}$/;"	f	class:llvm::MDExpression::ExprOperand
ExprOperand	include/IR/DebugInfoMetadata.h	/^  class ExprOperand {$/;"	c	class:llvm::MDExpression
ExtendArgument	include/IR/Intrinsics.h	/^      Argument, ExtendArgument, TruncArgument, HalfVecArgument,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
ExternalCallList	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::vector<const Instruction *> ExternalCallList;$/;"	t	class:corelab::LoopTraverse
ExternalCallList	include/corelab/CAMP/CAMP.h	/^			typedef std::vector<const Instruction *> ExternalCallList;$/;"	t	class:corelab::CAMPInstaller
ExternalCallList	include/corelab/CAMP/CampExectime.h	/^			typedef std::vector<const Instruction *> ExternalCallList;$/;"	t	class:corelab::CAMPExectime
ExternalCallList	include/corelab/ObjTrace/CtxObjtrace.h	/^			typedef std::vector<const Instruction *> ExternalCallList;$/;"	t	class:corelab::CtxObjtrace
ExternalCallList	lib/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::vector<const Instruction *> ExternalCallList;$/;"	t	class:corelab::LoopTraverse
ExternalCallList	lib/CAMP/CAMP.h	/^			typedef std::vector<const Instruction *> ExternalCallList;$/;"	t	class:corelab::CAMPInstaller
ExternalCallList	lib/CAMP/CampExectime.h	/^			typedef std::vector<const Instruction *> ExternalCallList;$/;"	t	class:corelab::CAMPExectime
ExternalCallList	lib/ObjTrace/CtxObjtrace.h	/^			typedef std::vector<const Instruction *> ExternalCallList;$/;"	t	class:corelab::CtxObjtrace
ExternalLinkage	include/IR/GlobalValue.h	/^    ExternalLinkage = 0,\/\/\/< Externally visible function$/;"	e	enum:llvm::GlobalValue::LinkageTypes
ExternalWeakLinkage	include/IR/GlobalValue.h	/^    ExternalWeakLinkage,\/\/\/< ExternalWeak linkage description.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
ExtraData	include/IR/ValueMap.h	/^  struct ExtraData {};$/;"	s	struct:llvm::ValueMapConfig
ExtraData	include/IR/ValueMap.h	/^  typedef typename Config::ExtraData ExtraData;$/;"	t	class:llvm::ValueMap
ExtractElementInst	include/IR/Instructions.h	/^class ExtractElementInst : public Instruction {$/;"	c	namespace:llvm
ExtractValueInst	include/IR/Instructions.h	/^ExtractValueInst::ExtractValueInst(Value *Agg,$/;"	f	class:llvm::ExtractValueInst
ExtractValueInst	include/IR/Instructions.h	/^class ExtractValueInst : public UnaryInstruction {$/;"	c	namespace:llvm
F	include/IR/PatternMatch.h	/^  BasicBlock *&T, *&F;$/;"	m	struct:llvm::PatternMatch::brc_match
F	include/IR/UseListOrder.h	/^  const Function *F;$/;"	m	struct:llvm::UseListOrder
FAM	include/IR/PassManager.h	/^  FunctionAnalysisManager *FAM;$/;"	m	class:llvm::FunctionAnalysisManagerModuleProxy
FAM	include/IR/PassManager.h	/^  FunctionAnalysisManager *FAM;$/;"	m	class:llvm::FunctionAnalysisManagerModuleProxy::Result
FCMP_FALSE	include/IR/InstrTypes.h	/^    FCMP_FALSE =  0,  \/\/\/< 0 0 0 0    Always false (always folded)$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OEQ	include/IR/InstrTypes.h	/^    FCMP_OEQ   =  1,  \/\/\/< 0 0 0 1    True if ordered and equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OGE	include/IR/InstrTypes.h	/^    FCMP_OGE   =  3,  \/\/\/< 0 0 1 1    True if ordered and greater than or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OGT	include/IR/InstrTypes.h	/^    FCMP_OGT   =  2,  \/\/\/< 0 0 1 0    True if ordered and greater than$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OLE	include/IR/InstrTypes.h	/^    FCMP_OLE   =  5,  \/\/\/< 0 1 0 1    True if ordered and less than or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OLT	include/IR/InstrTypes.h	/^    FCMP_OLT   =  4,  \/\/\/< 0 1 0 0    True if ordered and less than$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_ONE	include/IR/InstrTypes.h	/^    FCMP_ONE   =  6,  \/\/\/< 0 1 1 0    True if ordered and operands are unequal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_ORD	include/IR/InstrTypes.h	/^    FCMP_ORD   =  7,  \/\/\/< 0 1 1 1    True if ordered (no nans)$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_TRUE	include/IR/InstrTypes.h	/^    FCMP_TRUE  = 15,  \/\/\/< 1 1 1 1    Always true (always folded)$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UEQ	include/IR/InstrTypes.h	/^    FCMP_UEQ   =  9,  \/\/\/< 1 0 0 1    True if unordered or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UGE	include/IR/InstrTypes.h	/^    FCMP_UGE   = 11,  \/\/\/< 1 0 1 1    True if unordered, greater than, or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UGT	include/IR/InstrTypes.h	/^    FCMP_UGT   = 10,  \/\/\/< 1 0 1 0    True if unordered or greater than$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_ULE	include/IR/InstrTypes.h	/^    FCMP_ULE   = 13,  \/\/\/< 1 1 0 1    True if unordered, less than, or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_ULT	include/IR/InstrTypes.h	/^    FCMP_ULT   = 12,  \/\/\/< 1 1 0 0    True if unordered or less than$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UNE	include/IR/InstrTypes.h	/^    FCMP_UNE   = 14,  \/\/\/< 1 1 1 0    True if unordered or not equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UNO	include/IR/InstrTypes.h	/^    FCMP_UNO   =  8,  \/\/\/< 1 0 0 0    True if unordered: isnan(X) | isnan(Y)$/;"	e	enum:llvm::CmpInst::Predicate
FCmpInst	include/IR/Instructions.h	/^  FCmpInst($/;"	f	class:llvm::FCmpInst
FCmpInst	include/IR/Instructions.h	/^class FCmpInst: public CmpInst {$/;"	c	namespace:llvm
FIRST_BINARY_INST	include/IR/Instruction.h	450;"	d
FIRST_BINOP	include/IR/Instructions.h	/^    FIRST_BINOP = Xchg,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
FIRST_CAST_INST	include/IR/Instruction.h	464;"	d
FIRST_FCMP_PREDICATE	include/IR/InstrTypes.h	/^    FIRST_FCMP_PREDICATE = FCMP_FALSE,$/;"	e	enum:llvm::CmpInst::Predicate
FIRST_ICMP_PREDICATE	include/IR/InstrTypes.h	/^    FIRST_ICMP_PREDICATE = ICMP_EQ,$/;"	e	enum:llvm::CmpInst::Predicate
FIRST_MEMORY_INST	include/IR/Instruction.h	457;"	d
FIRST_OTHER_INST	include/IR/Instruction.h	471;"	d
FIRST_TERM_INST	include/IR/Instruction.h	443;"	d
FLOAT_ALIGN	include/IR/DataLayout.h	/^  FLOAT_ALIGN = 'f',$/;"	e	enum:llvm::AlignTypeEnum
FMF	include/IR/IRBuilder.h	/^    FastMathFlags FMF;$/;"	m	class:llvm::IRBuilderBase::FastMathFlagGuard
FMF	include/IR/IRBuilder.h	/^  FastMathFlags FMF;$/;"	m	class:llvm::IRBuilderBase
FP128TyID	include/IR/Type.h	/^    FP128TyID,       \/\/\/<  5: 128-bit floating point type (112-bit mantissa)$/;"	e	enum:llvm::Type::TypeID
FPExtInst	include/IR/Instructions.h	/^class FPExtInst : public CastInst {$/;"	c	namespace:llvm
FPM	include/IR/LegacyPassManager.h	/^  FunctionPassManagerImpl *FPM;$/;"	m	class:llvm::legacy::FunctionPassManager
FPMathOperator	include/IR/Operator.h	/^class FPMathOperator : public Operator {$/;"	c	namespace:llvm
FPMathTag	include/IR/IRBuilder.h	/^    MDNode *FPMathTag;$/;"	m	class:llvm::IRBuilderBase::FastMathFlagGuard
FPPassManager	include/IR/LegacyPassManagers.h	/^  explicit FPPassManager()$/;"	f	class:llvm::FPPassManager
FPPassManager	include/IR/LegacyPassManagers.h	/^class FPPassManager : public ModulePass, public PMDataManager {$/;"	c	namespace:llvm
FPToSIInst	include/IR/Instructions.h	/^class FPToSIInst  : public CastInst {$/;"	c	namespace:llvm
FPToUIInst	include/IR/Instructions.h	/^class FPToUIInst  : public CastInst {$/;"	c	namespace:llvm
FPTruncInst	include/IR/Instructions.h	/^class FPTruncInst : public CastInst {$/;"	c	namespace:llvm
FREEING_MSG	include/IR/LegacyPassManagers.h	/^  FREEING_MSG, \/\/ " Freeing Pass '" + PassName$/;"	e	enum:llvm::PassDebuggingString
Fast	include/IR/CallingConv.h	/^    Fast = 8,$/;"	e	enum:llvm::CallingConv::__anon7
FastMathFlagGuard	include/IR/IRBuilder.h	/^    FastMathFlagGuard(IRBuilderBase &B)$/;"	f	class:llvm::IRBuilderBase::FastMathFlagGuard
FastMathFlagGuard	include/IR/IRBuilder.h	/^  class FastMathFlagGuard {$/;"	c	class:llvm::IRBuilderBase
FastMathFlags	include/IR/Operator.h	/^  FastMathFlags() : Flags(0)$/;"	f	class:llvm::FastMathFlags
FastMathFlags	include/IR/Operator.h	/^  FastMathFlags(unsigned F) : Flags(F) { }$/;"	f	class:llvm::FastMathFlags
FastMathFlags	include/IR/Operator.h	/^class FastMathFlags {$/;"	c	namespace:llvm
FatalErrors	include/IR/Verifier.h	/^  bool FatalErrors;$/;"	m	class:llvm::VerifierPass
FenceInst	include/IR/Instructions.h	/^class FenceInst : public Instruction {$/;"	c	namespace:llvm
FileName	include/IR/DiagnosticInfo.h	/^  const char *FileName;$/;"	m	class:llvm::DiagnosticInfoSampleProfile
Filter	include/IR/Instructions.h	/^  enum ClauseType { Catch, Filter };$/;"	e	enum:llvm::LandingPadInst::ClauseType
FilteredPassNameParser	include/IR/LegacyPassNameParser.h	/^class FilteredPassNameParser : public PassNameParser {$/;"	c	namespace:llvm
FindAndConstruct	include/IR/ValueMap.h	/^  value_type& FindAndConstruct(const KeyT &Key) {$/;"	f	class:llvm::ValueMap
FindFunctionExitBB	include/corelab/Utilities/FindFunctionExitBB.hpp	/^			FindFunctionExitBB(): ModulePass(ID) { }$/;"	f	struct:corelab::FindFunctionExitBB
FindFunctionExitBB	include/corelab/Utilities/FindFunctionExitBB.hpp	/^	struct FindFunctionExitBB: public ModulePass{$/;"	s	namespace:corelab
FirstTargetCC	include/IR/CallingConv.h	/^    FirstTargetCC = 64,$/;"	e	enum:llvm::CallingConv::__anon7
FixedNumOperandTraits	include/IR/OperandTraits.h	/^struct FixedNumOperandTraits {$/;"	s	namespace:llvm
FlagAccessibility	include/IR/DebugInfo.h	/^    FlagAccessibility = DebugNode::FlagAccessibility$/;"	e	enum:llvm::DIDescriptor::__anon12
FlagAccessibility	include/IR/DebugInfoMetadata.h	/^    FlagAccessibility = FlagPrivate | FlagProtected | FlagPublic$/;"	e	enum:llvm::DebugNode::DIFlags
Flags	include/IR/DebugInfoMetadata.h	/^  unsigned Flags;$/;"	m	class:llvm::MDLocalVariable
Flags	include/IR/DebugInfoMetadata.h	/^  unsigned Flags;$/;"	m	class:llvm::MDSubprogram
Flags	include/IR/DebugInfoMetadata.h	/^  unsigned Flags;$/;"	m	class:llvm::MDType
Flags	include/IR/Operator.h	/^  unsigned Flags;$/;"	m	class:llvm::FastMathFlags
Float	include/IR/Intrinsics.h	/^      Void, VarArg, MMX, Metadata, Half, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
FloatTyID	include/IR/Type.h	/^    FloatTyID,       \/\/\/<  2: 32-bit floating point type$/;"	e	enum:llvm::Type::TypeID
Float_Width	include/IR/Intrinsics.h	/^      unsigned Float_Width;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon15
Fn	include/IR/DiagnosticInfo.h	/^  const Function &Fn;$/;"	m	class:llvm::DiagnosticInfoOptimizationBase
Fn	include/IR/DiagnosticInfo.h	/^  const Function &Fn;$/;"	m	class:llvm::DiagnosticInfoStackSize
Folder	include/IR/IRBuilder.h	/^  T Folder;$/;"	m	class:llvm::IRBuilder
FollowRAUW	include/IR/ValueMap.h	/^  enum { FollowRAUW = true };$/;"	e	enum:llvm::ValueMapConfig::__anon16
FullDebug	include/IR/DIBuilder.h	/^    enum DebugEmissionKind { FullDebug=1, LineTablesOnly };$/;"	e	enum:llvm::DIBuilder::DebugEmissionKind
FullID	include/corelab/ObjTrace/CtxObjtrace.h	/^	typedef uint64_t FullID;$/;"	t	namespace:corelab
FullID	include/corelab/ObjTrace/ObjTrace.h	/^  typedef uint64_t FullID;$/;"	t	namespace:corelab
FullID	lib/ObjTrace/CtxObjtrace.h	/^	typedef uint64_t FullID;$/;"	t	namespace:corelab
FullID	lib/ObjTrace/ObjTrace.h	/^  typedef uint64_t FullID;$/;"	t	namespace:corelab
FullID	tools/objtrace/ctxObjtraceRuntime.h	/^typedef uint64_t FullID;$/;"	t
FullID	tools/objtrace/objtraceruntime.h	/^typedef uint64_t FullID;$/;"	t
FunToMaxDepth	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      typedef DenseMap<const Function *, unsigned> FunToMaxDepth;$/;"	t	class:corelab::LoopTraverse
FunToMaxDepth	lib/AliasAnalysis/LoopTraverse.hpp	/^      typedef DenseMap<const Function *, unsigned> FunToMaxDepth;$/;"	t	class:corelab::LoopTraverse
FuncID	include/corelab/CAMP/campCommon.h	/^		typedef uint16_t 	FuncID;$/;"	t	namespace:corelab::CAMP
FuncID	lib/CAMP/campCommon.h	/^		typedef uint16_t 	FuncID;$/;"	t	namespace:corelab::CAMP
FuncSet	include/corelab/Metadata/typedefs.h	/^  typedef DenseSet<Function *>                  FuncSet;$/;"	t	namespace:corelab
Function	include/IR/Function.h	/^class Function : public GlobalObject, public ilist_node<Function> {$/;"	c	namespace:llvm
FunctionAnalysisManager	include/IR/PassManager.h	/^typedef AnalysisManager<Function> FunctionAnalysisManager;$/;"	t	namespace:llvm
FunctionAnalysisManagerModuleProxy	include/IR/PassManager.h	/^  FunctionAnalysisManagerModuleProxy($/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy
FunctionAnalysisManagerModuleProxy	include/IR/PassManager.h	/^  FunctionAnalysisManagerModuleProxy(FunctionAnalysisManagerModuleProxy &&Arg)$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy
FunctionAnalysisManagerModuleProxy	include/IR/PassManager.h	/^  explicit FunctionAnalysisManagerModuleProxy(FunctionAnalysisManager &FAM)$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy
FunctionAnalysisManagerModuleProxy	include/IR/PassManager.h	/^class FunctionAnalysisManagerModuleProxy {$/;"	c	namespace:llvm
FunctionInformation	include/corelab/Utilities/ProfileInfo.h	/^    std::map<const FType*, double> FunctionInformation;$/;"	m	class:llvm::ProfileInfoT
FunctionList	include/IR/Module.h	/^  FunctionListType FunctionList;  \/\/\/< The Functions in the module$/;"	m	class:llvm::Module
FunctionListType	include/IR/Module.h	/^  typedef iplist<Function> FunctionListType;$/;"	t	class:llvm::Module
FunctionName	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::string FunctionName; \/\/Still, i can't trust llvm::StringRef$/;"	t	class:corelab::IndirectCallAnal
FunctionName	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::string FunctionName; \/\/Still, i can't trust llvm::StringRef$/;"	t	class:corelab::IndirectCallAnal
FunctionPassManager	include/IR/LegacyPassManager.h	/^class FunctionPassManager : public PassManagerBase {$/;"	c	namespace:llvm::legacy
FunctionPassManager	include/IR/PassManager.h	/^typedef PassManager<Function> FunctionPassManager;$/;"	t	namespace:llvm
FunctionTableEntry	include/corelab/Metadata/NamedMetadata.h	/^			typedef struct FunctionTableEntry{$/;"	s	class:corelab::EsperantoNamer
FunctionTableEntry	include/corelab/Metadata/NamedMetadata.h	/^			} FunctionTableEntry;$/;"	t	class:corelab::EsperantoNamer	typeref:struct:corelab::EsperantoNamer::FunctionTableEntry
FunctionTyID	include/IR/Type.h	/^    FunctionTyID,    \/\/\/< 11: Functions$/;"	e	enum:llvm::Type::TypeID
FunctionType	include/IR/DerivedTypes.h	/^class FunctionType : public Type {$/;"	c	namespace:llvm
FunctionVal	include/IR/Value.h	/^    FunctionVal,              \/\/ This is an instance of Function$/;"	e	enum:llvm::Value::ValueTy
GCRelocateOperands	include/IR/Statepoint.h	/^  GCRelocateOperands(CallSite CS) : RelocateCS(CS) {$/;"	f	class:llvm::GCRelocateOperands
GCRelocateOperands	include/IR/Statepoint.h	/^  GCRelocateOperands(const Instruction *inst) : RelocateCS(inst) {$/;"	f	class:llvm::GCRelocateOperands
GCRelocateOperands	include/IR/Statepoint.h	/^  GCRelocateOperands(const User* U) : RelocateCS(U) {$/;"	f	class:llvm::GCRelocateOperands
GCRelocateOperands	include/IR/Statepoint.h	/^class GCRelocateOperands {$/;"	c	namespace:llvm
GEPOperator	include/IR/Operator.h	/^class GEPOperator$/;"	c	namespace:llvm
GET_BLK_ID	lib/Metadata/Namer.cpp	34;"	d	file:
GET_BLOCK_ID	tools/objtrace/ctxObjtraceRuntime.cpp	32;"	d	file:
GET_FUNC_ID	lib/Metadata/Namer.cpp	35;"	d	file:
GET_INSTR_ID	lib/ObjTrace/CtxObjtrace.cpp	37;"	d	file:
GET_INSTR_ID	tools/objtrace/ctxObjtraceRuntime.cpp	33;"	d	file:
GET_INST_ID	lib/Metadata/Namer.cpp	33;"	d	file:
GET_INTRINSIC_ENUM_VALUES	include/IR/Intrinsics.h	39;"	d
GET_INTRINSIC_ENUM_VALUES	include/IR/Intrinsics.h	41;"	d
GET_SHADOW_ADDR_HISTORY_TB	tools/camp/ShadowMemory.hpp	29;"	d
GET_SHADOW_ADDR_HISTORY_TB	tools/campSampling/ShadowMemory.hpp	29;"	d
GET_SHADOW_ADDR_HISTORY_TB	tools/objtrace/ShadowMemory.hpp	29;"	d
GET_SHADOW_ADDR_MALLOC_MAP	tools/camp/ShadowMemory.hpp	30;"	d
GET_SHADOW_ADDR_MALLOC_MAP	tools/campSampling/ShadowMemory.hpp	30;"	d
GET_SHADOW_ADDR_MALLOC_MAP	tools/objtrace/ShadowMemory.hpp	30;"	d
GET_TYPE	lib/Metadata/Namer.cpp	36;"	d	file:
GHC	include/IR/CallingConv.h	/^    GHC = 10,$/;"	e	enum:llvm::CallingConv::__anon7
GLOBAL_CTORS_H	include/corelab/Utilities/GlobalCtors.h	2;"	d
GVMaterializer	include/IR/GVMaterializer.h	/^  GVMaterializer() {}$/;"	f	class:llvm::GVMaterializer
GVMaterializer	include/IR/GVMaterializer.h	/^class GVMaterializer {$/;"	c	namespace:llvm
GVs	include/IR/DebugInfo.h	/^  SmallVector<DIGlobalVariable, 8> GVs;$/;"	m	class:llvm::DebugInfoFinder
GeneralDynamicTLSModel	include/IR/GlobalValue.h	/^    GeneralDynamicTLSModel,$/;"	e	enum:llvm::GlobalValue::ThreadLocalMode
GenericDebugNode	include/IR/DebugInfoMetadata.h	/^  GenericDebugNode(LLVMContext &C, StorageType Storage, unsigned Hash,$/;"	f	class:llvm::GenericDebugNode
GenericDebugNode	include/IR/DebugInfoMetadata.h	/^class GenericDebugNode : public DebugNode {$/;"	c	namespace:llvm
GenericDebugNodeKind	include/IR/Metadata.h	/^    GenericDebugNodeKind,$/;"	e	enum:llvm::Metadata::MetadataKind
GetAsValue	include/IR/ValueHandle.h	/^  static Value *GetAsValue(Value *V) { return V; }$/;"	f	class:llvm::AssertingVH
GetAsValue	include/IR/ValueHandle.h	/^  static Value *GetAsValue(Value *V) { return V; }$/;"	f	class:llvm::TrackingVH
GetAsValue	include/IR/ValueHandle.h	/^  static Value *GetAsValue(const Value *V) { return const_cast<Value*>(V); }$/;"	f	class:llvm::AssertingVH
GetAsValue	include/IR/ValueHandle.h	/^  static Value *GetAsValue(const Value *V) { return const_cast<Value*>(V); }$/;"	f	class:llvm::TrackingVH
GetElementPtrInst	include/IR/Instructions.h	/^GetElementPtrInst::GetElementPtrInst(Type *PointeeType, Value *Ptr,$/;"	f	class:llvm::GetElementPtrInst
GetElementPtrInst	include/IR/Instructions.h	/^class GetElementPtrInst : public Instruction {$/;"	c	namespace:llvm
GetInsertBlock	include/IR/IRBuilder.h	/^  BasicBlock *GetInsertBlock() const { return BB; }$/;"	f	class:llvm::IRBuilderBase
GetInsertPoint	include/IR/IRBuilder.h	/^  BasicBlock::iterator GetInsertPoint() const { return InsertPt; }$/;"	f	class:llvm::IRBuilderBase
GetNumPreds	include/IR/PredIteratorCache.h	/^    unsigned GetNumPreds(BasicBlock *BB) {$/;"	f	class:llvm::PredIteratorCache
GetPathMode	include/corelab/Utilities/ProfileInfo.h	/^    enum GetPathMode {$/;"	g	class:llvm::ProfileInfoT
GetPathToDest	include/corelab/Utilities/ProfileInfo.h	/^      GetPathToDest = 4,$/;"	e	enum:llvm::ProfileInfoT::GetPathMode
GetPathToExit	include/corelab/Utilities/ProfileInfo.h	/^      GetPathToExit = 1,$/;"	e	enum:llvm::ProfileInfoT::GetPathMode
GetPathToValue	include/corelab/Utilities/ProfileInfo.h	/^      GetPathToValue = 2,$/;"	e	enum:llvm::ProfileInfoT::GetPathMode
GetPathWithNewEdges	include/corelab/Utilities/ProfileInfo.h	/^      GetPathWithNewEdges = 8$/;"	e	enum:llvm::ProfileInfoT::GetPathMode
GetPreds	include/IR/PredIteratorCache.h	/^    BasicBlock **GetPreds(BasicBlock *BB) {$/;"	f	class:llvm::PredIteratorCache
GetTimeInSec	include/corelab/CAMP/campTimer.h	/^			GetTimeInSec ()$/;"	f	namespace:corelab::CAMP::Timer
GlobalAlias	include/IR/GlobalAlias.h	/^class GlobalAlias : public GlobalValue, public ilist_node<GlobalAlias> {$/;"	c	namespace:llvm
GlobalAliasVal	include/IR/Value.h	/^    GlobalAliasVal,           \/\/ This is an instance of GlobalAlias$/;"	e	enum:llvm::Value::ValueTy
GlobalList	include/IR/Module.h	/^  GlobalListType GlobalList;      \/\/\/< The Global Variables in the module$/;"	m	class:llvm::Module
GlobalListType	include/IR/Module.h	/^  typedef iplist<GlobalVariable> GlobalListType;$/;"	t	class:llvm::Module
GlobalObject	include/IR/GlobalObject.h	/^  GlobalObject(Type *Ty, ValueTy VTy, Use *Ops, unsigned NumOps,$/;"	f	class:llvm::GlobalObject
GlobalObject	include/IR/GlobalObject.h	/^class GlobalObject : public GlobalValue {$/;"	c	namespace:llvm
GlobalObjectSubClassDataBits	include/IR/GlobalObject.h	/^  static const unsigned GlobalObjectSubClassDataBits =$/;"	m	class:llvm::GlobalObject
GlobalRelocations	include/IR/Constant.h	/^    GlobalRelocations = 2$/;"	e	enum:llvm::Constant::PossibleRelocationsTy
GlobalScopeAsm	include/IR/Module.h	/^  std::string GlobalScopeAsm;     \/\/\/< Inline Asm at global scope.$/;"	m	class:llvm::Module
GlobalValue	include/IR/GlobalValue.h	/^  GlobalValue(Type *Ty, ValueTy VTy, Use *Ops, unsigned NumOps,$/;"	f	class:llvm::GlobalValue
GlobalValue	include/IR/GlobalValue.h	/^class GlobalValue : public Constant {$/;"	c	namespace:llvm
GlobalValueSubClassDataBits	include/IR/GlobalValue.h	/^  static const unsigned GlobalValueSubClassDataBits = 19;$/;"	m	class:llvm::GlobalValue
GlobalVariable	include/IR/GlobalVariable.h	/^class GlobalVariable : public GlobalObject, public ilist_node<GlobalVariable> {$/;"	c	namespace:llvm
GlobalVariableVal	include/IR/Value.h	/^    GlobalVariableVal,        \/\/ This is an instance of GlobalVariable$/;"	e	enum:llvm::Value::ValueTy
GraphTraits	include/IR/CFG.h	/^template <> struct GraphTraits<BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	include/IR/CFG.h	/^template <> struct GraphTraits<Function*> : public GraphTraits<BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	include/IR/CFG.h	/^template <> struct GraphTraits<Inverse<BasicBlock*> > {$/;"	s	namespace:llvm
GraphTraits	include/IR/CFG.h	/^template <> struct GraphTraits<Inverse<Function*> > :$/;"	s	namespace:llvm
GraphTraits	include/IR/CFG.h	/^template <> struct GraphTraits<Inverse<const BasicBlock*> > {$/;"	s	namespace:llvm
GraphTraits	include/IR/CFG.h	/^template <> struct GraphTraits<Inverse<const Function*> > :$/;"	s	namespace:llvm
GraphTraits	include/IR/CFG.h	/^template <> struct GraphTraits<const BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	include/IR/CFG.h	/^template <> struct GraphTraits<const Function*> :$/;"	s	namespace:llvm
GraphTraits	include/IR/Dominators.h	/^template <> struct GraphTraits<DomTreeNode*> {$/;"	s	namespace:llvm
GraphTraits	include/IR/Dominators.h	/^template <> struct GraphTraits<DominatorTree*>$/;"	s	namespace:llvm
GraphTraits	include/IR/Type.h	/^template <> struct GraphTraits<Type*> {$/;"	s	namespace:llvm
GraphTraits	include/IR/Type.h	/^template <> struct GraphTraits<const Type*> {$/;"	s	namespace:llvm
HANDLE_BINARY_INST	include/IR/InstrTypes.h	171;"	d
HANDLE_BINARY_INST	include/IR/InstrTypes.h	177;"	d
HANDLE_BINARY_INST	include/IR/InstrTypes.h	183;"	d
HANDLE_BINARY_INST	include/IR/Instruction.h	451;"	d
HANDLE_CAST_INST	include/IR/Instruction.h	465;"	d
HANDLE_DI_FLAG	include/IR/DebugInfo.h	134;"	d
HANDLE_DI_FLAG	include/IR/DebugInfoMetadata.h	86;"	d
HANDLE_INST	include/IR/InstVisitor.h	122;"	d
HANDLE_INST	include/IR/InstVisitor.h	154;"	d
HANDLE_INST	include/IR/InstVisitor.h	27;"	d
HANDLE_MDNODE_BRANCH	include/IR/Metadata.h	709;"	d
HANDLE_MDNODE_LEAF	include/IR/Metadata.h	707;"	d
HANDLE_MDNODE_LEAF	include/IR/Metadata.h	937;"	d
HANDLE_MEMORY_INST	include/IR/Instruction.h	458;"	d
HANDLE_METADATA	include/IR/Metadata.h	135;"	d
HANDLE_METADATA_LEAF	include/IR/Metadata.h	140;"	d
HANDLE_OTHER_INST	include/IR/Instruction.h	472;"	d
HANDLE_TERM_INST	include/IR/Instruction.h	444;"	d
HAS_UNWIND	lib/Utilities/Makefile	/^HAS_UNWIND := ${shell				\\$/;"	m
Half	include/IR/Intrinsics.h	/^      Void, VarArg, MMX, Metadata, Half, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
HalfTyID	include/IR/Type.h	/^    HalfTyID,        \/\/\/<  1: 16-bit floating point type$/;"	e	enum:llvm::Type::TypeID
HalfVecArgument	include/IR/Intrinsics.h	/^      Argument, ExtendArgument, TruncArgument, HalfVecArgument,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
HandleBaseKind	include/IR/ValueHandle.h	/^  enum HandleBaseKind {$/;"	g	class:llvm::ValueHandleBase
HasDereference	include/IR/Metadata.h	/^template <class T, class Result> struct HasDereference {$/;"	s	namespace:llvm::mdconst::detail
HasMetadataBit	include/IR/Instruction.h	/^    HasMetadataBit = 1 << 15$/;"	e	enum:llvm::Instruction::__anon13
HasSideEffects	include/IR/InlineAsm.h	/^  bool HasSideEffects;$/;"	m	class:llvm::InlineAsm
Header	include/IR/DebugInfo.h	/^  StringRef Header;$/;"	m	class:llvm::DIHeaderFieldIterator
HiPE	include/IR/CallingConv.h	/^    HiPE = 11,$/;"	e	enum:llvm::CallingConv::__anon7
HiddenVisibility	include/IR/GlobalValue.h	/^    HiddenVisibility,       \/\/\/< The GV is hidden$/;"	e	enum:llvm::GlobalValue::VisibilityTypes
HigherLevelAnalysis	include/IR/LegacyPassManagers.h	/^  SmallVector<Pass *, 16> HigherLevelAnalysis;$/;"	m	class:llvm::PMDataManager
HistoryElem	tools/camp/campRuntime.h	/^typedef struct HistoryElem {$/;"	s
HistoryElem	tools/camp/campRuntime.h	/^} HistoryElem;$/;"	t	typeref:struct:HistoryElem
HistoryElem	tools/campSampling/campRuntime.h	/^typedef struct HistoryElem {$/;"	s
HistoryElem	tools/campSampling/campRuntime.h	/^} HistoryElem;$/;"	t	typeref:struct:HistoryElem
HungoffOperandTraits	include/IR/OperandTraits.h	/^struct HungoffOperandTraits {$/;"	s	namespace:llvm
I	include/IR/CallSite.h	/^  PointerIntPair<InstrTy*, 1, bool> I;$/;"	m	class:llvm::CallSiteBase
I	include/IR/DebugInfo.h	/^    MDExpression::element_iterator I;$/;"	m	class:llvm::DIExpression::Operand
I	include/IR/DebugInfo.h	/^    MDExpression::element_iterator I;$/;"	m	class:llvm::DIExpression::iterator
I	include/IR/ValueMap.h	/^  BaseT I;$/;"	m	class:llvm::ValueMapConstIterator
I	include/IR/ValueMap.h	/^  BaseT I;$/;"	m	class:llvm::ValueMapIterator
ICMP_EQ	include/IR/InstrTypes.h	/^    ICMP_EQ    = 32,  \/\/\/< equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_NE	include/IR/InstrTypes.h	/^    ICMP_NE    = 33,  \/\/\/< not equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_SGE	include/IR/InstrTypes.h	/^    ICMP_SGE   = 39,  \/\/\/< signed greater or equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_SGT	include/IR/InstrTypes.h	/^    ICMP_SGT   = 38,  \/\/\/< signed greater than$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_SLE	include/IR/InstrTypes.h	/^    ICMP_SLE   = 41,  \/\/\/< signed less or equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_SLT	include/IR/InstrTypes.h	/^    ICMP_SLT   = 40,  \/\/\/< signed less than$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_UGE	include/IR/InstrTypes.h	/^    ICMP_UGE   = 35,  \/\/\/< unsigned greater or equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_UGT	include/IR/InstrTypes.h	/^    ICMP_UGT   = 34,  \/\/\/< unsigned greater than$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_ULE	include/IR/InstrTypes.h	/^    ICMP_ULE   = 37,  \/\/\/< unsigned less or equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_ULT	include/IR/InstrTypes.h	/^    ICMP_ULT   = 36,  \/\/\/< unsigned less than$/;"	e	enum:llvm::CmpInst::Predicate
ICmpInst	include/IR/Instructions.h	/^  ICmpInst($/;"	f	class:llvm::ICmpInst
ICmpInst	include/IR/Instructions.h	/^class ICmpInst: public CmpInst {$/;"	c	namespace:llvm
ID	include/IR/CallingConv.h	/^  typedef unsigned ID;$/;"	t	namespace:llvm::CallingConv
ID	include/IR/Dominators.h	/^  static char ID;$/;"	m	class:llvm::DominatorTreeWrapperPass
ID	include/IR/Dominators.h	/^  static void *ID() { return (void *)&PassID; }$/;"	f	class:llvm::DominatorTreeAnalysis
ID	include/IR/Intrinsics.h	/^  enum ID {$/;"	g	namespace:llvm::Intrinsic
ID	include/IR/LegacyPassManagers.h	/^  static char ID;$/;"	m	class:llvm::FPPassManager
ID	include/IR/PassManager.h	/^  static void *ID() { return (void *)&PassID; }$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy
ID	include/IR/PassManager.h	/^  static void *ID() { return (void *)&PassID; }$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy
ID	include/IR/PatternMatch.h	/^  unsigned ID;$/;"	m	struct:llvm::PatternMatch::IntrinsicID_match
ID	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			static char ID;$/;"	m	class:corelab::IndirectCallAnal
ID	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      static char ID;$/;"	m	class:corelab::LoopTraverse
ID	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      static char ID;$/;"	m	class:corelab::RecursiveFuncAnal
ID	include/corelab/AliasAnalysis/TestClient.hpp	/^			static char ID;$/;"	m	class:corelab::TestAAClient
ID	include/corelab/CAMP/CAMP.h	/^			static char ID;$/;"	m	class:corelab::CAMPInstaller
ID	include/corelab/CAMP/CampCache.h	/^			static char ID;$/;"	m	class:corelab::CAMPCache
ID	include/corelab/CAMP/CampExectime.h	/^			static char ID;$/;"	m	class:corelab::CAMPExectime
ID	include/corelab/CAMP/CampPlain.h	/^			static char ID;$/;"	m	class:corelab::CAMPPlain
ID	include/corelab/CAMP/ContextTreeBuilder.h	/^			static char ID;$/;"	m	class:corelab::ContextTreeBuilder
ID	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			static char ID;$/;"	m	class:corelab::RegiInterIterDepFinder
ID	include/corelab/Metadata/LoadNamer.h	/^			static char ID;$/;"	m	class:corelab::LoadNamer
ID	include/corelab/Metadata/Metadata.h	/^			static char ID;$/;"	m	class:corelab::Namer
ID	include/corelab/Metadata/NamedMetadata.h	/^			static char ID;$/;"	m	class:corelab::EsperantoNamer
ID	include/corelab/ObjTrace/CtxObjtrace.h	/^			static char ID;$/;"	m	class:corelab::CtxObjtrace
ID	include/corelab/ObjTrace/ObjTrace.h	/^      static char ID;$/;"	m	class:corelab::ObjTrace
ID	include/corelab/Utilities/FindFunctionExitBB.hpp	/^			static char ID;$/;"	m	struct:corelab::FindFunctionExitBB
ID	include/corelab/Utilities/ProfileInfo.h	/^    static char ID; \/\/ Class identification, replacement for typeinfo$/;"	m	class:llvm::ProfileInfoT
ID	lib/AliasAnalysis/IndirectCallAnal.cpp	/^char IndirectCallAnal::ID = 0;$/;"	m	class:IndirectCallAnal	file:
ID	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			static char ID;$/;"	m	class:corelab::IndirectCallAnal
ID	lib/AliasAnalysis/LoopTraverse.cpp	/^char LoopTraverse::ID = 0;$/;"	m	class:LoopTraverse	file:
ID	lib/AliasAnalysis/LoopTraverse.hpp	/^      static char ID;$/;"	m	class:corelab::LoopTraverse
ID	lib/AliasAnalysis/RecursiveFuncAnal.cpp	/^char RecursiveFuncAnal::ID = 0;$/;"	m	class:RecursiveFuncAnal	file:
ID	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      static char ID;$/;"	m	class:corelab::RecursiveFuncAnal
ID	lib/CAMP/CAMP.cpp	/^char CAMPInstaller::ID = 0;$/;"	m	class:CAMPInstaller	file:
ID	lib/CAMP/CAMP.h	/^			static char ID;$/;"	m	class:corelab::CAMPInstaller
ID	lib/CAMP/CampCache.cpp	/^char CAMPCache::ID = 0;$/;"	m	class:CAMPCache	file:
ID	lib/CAMP/CampCache.h	/^			static char ID;$/;"	m	class:corelab::CAMPCache
ID	lib/CAMP/CampExectime.cpp	/^char CAMPExectime::ID = 0;$/;"	m	class:CAMPExectime	file:
ID	lib/CAMP/CampExectime.h	/^			static char ID;$/;"	m	class:corelab::CAMPExectime
ID	lib/CAMP/CampPlain.cpp	/^char CAMPPlain::ID = 0;$/;"	m	class:CAMPPlain	file:
ID	lib/CAMP/CampPlain.h	/^			static char ID;$/;"	m	class:corelab::CAMPPlain
ID	lib/CAMP/ContextTreeBuilder.cpp	/^char ContextTreeBuilder::ID = 0;$/;"	m	class:ContextTreeBuilder	file:
ID	lib/CAMP/ContextTreeBuilder.h	/^			static char ID;$/;"	m	class:corelab::ContextTreeBuilder
ID	lib/CAMP/RegiInterIterDepFinder.cpp	/^char RegiInterIterDepFinder::ID = 0;$/;"	m	class:RegiInterIterDepFinder	file:
ID	lib/CAMP/RegiInterIterDepFinder.h	/^			static char ID;$/;"	m	class:corelab::RegiInterIterDepFinder
ID	lib/Metadata/EsperantoNamer.cpp	/^	char EsperantoNamer::ID = 0;$/;"	m	class:corelab::EsperantoNamer	file:
ID	lib/Metadata/LoadNamer.cpp	/^	char LoadNamer::ID = 0;$/;"	m	class:corelab::LoadNamer	file:
ID	lib/Metadata/Namer.cpp	/^	char Namer::ID = 0;$/;"	m	class:corelab::Namer	file:
ID	lib/ObjTrace/CtxObjtrace.cpp	/^char CtxObjtrace::ID = 0;$/;"	m	class:CtxObjtrace	file:
ID	lib/ObjTrace/CtxObjtrace.h	/^			static char ID;$/;"	m	class:corelab::CtxObjtrace
ID	lib/ObjTrace/ObjTrace.cpp	/^char ObjTrace::ID = 0;$/;"	m	class:ObjTrace	file:
ID	lib/ObjTrace/ObjTrace.h	/^      static char ID;$/;"	m	class:corelab::ObjTrace
ID	lib/Utilities/FindFunctionExitBB.cpp	/^char FindFunctionExitBB::ID = 0;$/;"	m	class:FindFunctionExitBB	file:
IDAndSubclassData	include/IR/Type.h	/^  uint32_t IDAndSubclassData;$/;"	m	class:llvm::Type
IITDescriptor	include/IR/Intrinsics.h	/^  struct IITDescriptor {$/;"	s	namespace:llvm::Intrinsic
IITDescriptorKind	include/IR/Intrinsics.h	/^    enum IITDescriptorKind {$/;"	g	struct:llvm::Intrinsic::IITDescriptor
IIty	include/IR/InstIterator.h	/^  typedef II_t IIty;$/;"	t	class:llvm::InstIterator
INSTR_CALL	include/corelab/Metadata/Metadata.h	/^		INSTR_CALL = 0x1,$/;"	e	enum:corelab::__anon3
INSTR_LOAD	include/corelab/Metadata/Metadata.h	/^		INSTR_LOAD = 0x2,$/;"	e	enum:corelab::__anon3
INSTR_OTHER	include/corelab/Metadata/Metadata.h	/^		INSTR_OTHER = 0x8$/;"	e	enum:corelab::__anon3
INSTR_STORE	include/corelab/Metadata/Metadata.h	/^		INSTR_STORE = 0x4,$/;"	e	enum:corelab::__anon3
INSTR_TYPE	include/corelab/Metadata/Metadata.h	/^	} INSTR_TYPE;$/;"	t	namespace:corelab	typeref:enum:corelab::__anon3
INST_INSERTION_POINT_H	include/corelab/Utilities/InstInsertPt.h	2;"	d
INTEGER_ALIGN	include/IR/DataLayout.h	/^  INTEGER_ALIGN = 'i',$/;"	e	enum:llvm::AlignTypeEnum
INVALID_ALIGN	include/IR/DataLayout.h	/^  INVALID_ALIGN = 0,$/;"	e	enum:llvm::AlignTypeEnum
IRBuilder	include/IR/IRBuilder.h	/^  IRBuilder(BasicBlock *TheBB, BasicBlock::iterator IP, const T& F,$/;"	f	class:llvm::IRBuilder
IRBuilder	include/IR/IRBuilder.h	/^  IRBuilder(BasicBlock *TheBB, BasicBlock::iterator IP,$/;"	f	class:llvm::IRBuilder
IRBuilder	include/IR/IRBuilder.h	/^  IRBuilder(LLVMContext &C, const T &F, const Inserter &I = Inserter(),$/;"	f	class:llvm::IRBuilder
IRBuilder	include/IR/IRBuilder.h	/^  explicit IRBuilder(BasicBlock *TheBB, MDNode *FPMathTag = nullptr)$/;"	f	class:llvm::IRBuilder
IRBuilder	include/IR/IRBuilder.h	/^  explicit IRBuilder(BasicBlock *TheBB, const T &F, MDNode *FPMathTag = nullptr)$/;"	f	class:llvm::IRBuilder
IRBuilder	include/IR/IRBuilder.h	/^  explicit IRBuilder(Instruction *IP, MDNode *FPMathTag = nullptr)$/;"	f	class:llvm::IRBuilder
IRBuilder	include/IR/IRBuilder.h	/^  explicit IRBuilder(LLVMContext &C, MDNode *FPMathTag = nullptr)$/;"	f	class:llvm::IRBuilder
IRBuilder	include/IR/IRBuilder.h	/^  explicit IRBuilder(Use &U, MDNode *FPMathTag = nullptr)$/;"	f	class:llvm::IRBuilder
IRBuilder	include/IR/IRBuilder.h	/^class IRBuilder : public IRBuilderBase, public Inserter {$/;"	c	namespace:llvm
IRBuilderBase	include/IR/IRBuilder.h	/^  IRBuilderBase(LLVMContext &context, MDNode *FPMathTag = nullptr)$/;"	f	class:llvm::IRBuilderBase
IRBuilderBase	include/IR/IRBuilder.h	/^class IRBuilderBase {$/;"	c	namespace:llvm
IRBuilderDefaultInserter	include/IR/IRBuilder.h	/^class IRBuilderDefaultInserter {$/;"	c	namespace:llvm
Idx	include/IR/Metadata.h	/^    unsigned Idx;$/;"	m	class:llvm::NamedMDNode::op_iterator_impl
ImmutableCallSite	include/IR/CallSite.h	/^  ImmutableCallSite() {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	include/IR/CallSite.h	/^  ImmutableCallSite(CallSite CS) : Base(CS.getInstruction()) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	include/IR/CallSite.h	/^  ImmutableCallSite(const CallInst *CI) : Base(CI) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	include/IR/CallSite.h	/^  ImmutableCallSite(const Instruction *II) : Base(II) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	include/IR/CallSite.h	/^  ImmutableCallSite(const InvokeInst *II) : Base(II) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	include/IR/CallSite.h	/^  ImmutableCallSite(const Value* V) : Base(V) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	include/IR/CallSite.h	/^class ImmutableCallSite : public CallSiteBase<> {$/;"	c	namespace:llvm
ImmutablePasses	include/IR/LegacyPassManagers.h	/^  SmallVector<ImmutablePass *, 16> ImmutablePasses;$/;"	m	class:llvm::PMTopLevelManager
ImmutableStatepoint	include/IR/Statepoint.h	/^  explicit ImmutableStatepoint(ImmutableCallSite CS) : Base(CS) {}$/;"	f	class:llvm::ImmutableStatepoint
ImmutableStatepoint	include/IR/Statepoint.h	/^  explicit ImmutableStatepoint(const Instruction *I) : Base(I) {}$/;"	f	class:llvm::ImmutableStatepoint
ImmutableStatepoint	include/IR/Statepoint.h	/^class ImmutableStatepoint$/;"	c	namespace:llvm
InAlloca	include/IR/Attributes.h	/^    InAlloca,              \/\/\/< Pass structure in an alloca$/;"	e	enum:llvm::Attribute::AttrKind
InReg	include/IR/Attributes.h	/^    InReg,                 \/\/\/< Force argument to be passed in register$/;"	e	enum:llvm::Attribute::AttrKind
Index	include/IR/Instructions.h	/^    unsigned Index;$/;"	m	class:llvm::SwitchInst::CaseIteratorT
Indices	include/IR/Instructions.h	/^  SmallVector<unsigned, 4> Indices;$/;"	m	class:llvm::ExtractValueInst
Indices	include/IR/Instructions.h	/^  SmallVector<unsigned, 4> Indices;$/;"	m	class:llvm::InsertValueInst
IndirectBrInst	include/IR/Instructions.h	/^class IndirectBrInst : public TerminatorInst {$/;"	c	namespace:llvm
IndirectCall	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef const Instruction * IndirectCall;$/;"	t	class:corelab::IndirectCallAnal
IndirectCall	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      typedef const Instruction * IndirectCall;$/;"	t	class:corelab::LoopTraverse
IndirectCall	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef const Instruction * IndirectCall;$/;"	t	class:corelab::RecursiveFuncAnal
IndirectCall	include/corelab/CAMP/ContextTreeBuilder.h	/^			typedef const Instruction * IndirectCall;$/;"	t	class:corelab::ContextTreeBuilder
IndirectCall	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef const Instruction * IndirectCall;$/;"	t	class:corelab::IndirectCallAnal
IndirectCall	lib/AliasAnalysis/LoopTraverse.hpp	/^      typedef const Instruction * IndirectCall;$/;"	t	class:corelab::LoopTraverse
IndirectCall	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef const Instruction * IndirectCall;$/;"	t	class:corelab::RecursiveFuncAnal
IndirectCall	lib/CAMP/ContextTreeBuilder.h	/^			typedef const Instruction * IndirectCall;$/;"	t	class:corelab::ContextTreeBuilder
IndirectCallAnal	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			IndirectCallAnal() : ModulePass(ID) {}$/;"	f	class:corelab::IndirectCallAnal
IndirectCallAnal	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^	class IndirectCallAnal : public ModulePass {$/;"	c	namespace:corelab
IndirectCallAnal	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			IndirectCallAnal() : ModulePass(ID) {}$/;"	f	class:corelab::IndirectCallAnal
IndirectCallAnal	lib/AliasAnalysis/IndirectCallAnal.hpp	/^	class IndirectCallAnal : public ModulePass {$/;"	c	namespace:corelab
IndirectCallList	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::vector<IndirectCall> IndirectCallList;$/;"	t	class:corelab::IndirectCallAnal
IndirectCallList	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::vector<const Instruction *> IndirectCallList;$/;"	t	class:corelab::LoopTraverse
IndirectCallList	include/corelab/CAMP/CAMP.h	/^			typedef std::vector<const Instruction *> IndirectCallList;$/;"	t	class:corelab::CAMPInstaller
IndirectCallList	include/corelab/CAMP/CampExectime.h	/^			typedef std::vector<const Instruction *> IndirectCallList;$/;"	t	class:corelab::CAMPExectime
IndirectCallList	include/corelab/ObjTrace/CtxObjtrace.h	/^			typedef std::vector<const Instruction *> IndirectCallList;$/;"	t	class:corelab::CtxObjtrace
IndirectCallList	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::vector<IndirectCall> IndirectCallList;$/;"	t	class:corelab::IndirectCallAnal
IndirectCallList	lib/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::vector<const Instruction *> IndirectCallList;$/;"	t	class:corelab::LoopTraverse
IndirectCallList	lib/CAMP/CAMP.h	/^			typedef std::vector<const Instruction *> IndirectCallList;$/;"	t	class:corelab::CAMPInstaller
IndirectCallList	lib/CAMP/CampExectime.h	/^			typedef std::vector<const Instruction *> IndirectCallList;$/;"	t	class:corelab::CAMPExectime
IndirectCallList	lib/ObjTrace/CtxObjtrace.h	/^			typedef std::vector<const Instruction *> IndirectCallList;$/;"	t	class:corelab::CtxObjtrace
IndirectCallMap	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::unordered_map<IndirectCall, CandidateFunctions> IndirectCallMap; \/\/ 1:m (one to many matching)$/;"	t	class:corelab::LoopTraverse
IndirectCallMap	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::unordered_map<IndirectCall, CandidateFunctions> IndirectCallMap; \/\/ 1:m (one to many matching)$/;"	t	class:corelab::RecursiveFuncAnal
IndirectCallMap	include/corelab/CAMP/ContextTreeBuilder.h	/^			typedef std::unordered_map<IndirectCall, CandidateFunctions> IndirectCallMap; \/\/ 1:m (one to many matching)$/;"	t	class:corelab::ContextTreeBuilder
IndirectCallMap	lib/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::unordered_map<IndirectCall, CandidateFunctions> IndirectCallMap; \/\/ 1:m (one to many matching)$/;"	t	class:corelab::LoopTraverse
IndirectCallMap	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::unordered_map<IndirectCall, CandidateFunctions> IndirectCallMap; \/\/ 1:m (one to many matching)$/;"	t	class:corelab::RecursiveFuncAnal
IndirectCallMap	lib/CAMP/ContextTreeBuilder.h	/^			typedef std::unordered_map<IndirectCall, CandidateFunctions> IndirectCallMap; \/\/ 1:m (one to many matching)$/;"	t	class:corelab::ContextTreeBuilder
IndirectPassManagers	include/IR/LegacyPassManagers.h	/^  SmallVector<PMDataManager *, 8> IndirectPassManagers;$/;"	m	class:llvm::PMTopLevelManager
InheritedAnalysis	include/IR/LegacyPassManagers.h	/^  DenseMap<AnalysisID, Pass *> *InheritedAnalysis[PMT_Last];$/;"	m	class:llvm::PMDataManager
InitialExecTLSModel	include/IR/GlobalValue.h	/^    InitialExecTLSModel,$/;"	e	enum:llvm::GlobalValue::ThreadLocalMode
InlineAsm	include/IR/InlineAsm.h	/^class InlineAsm : public Value {$/;"	c	namespace:llvm
InlineAsmDiagHandlerTy	include/IR/LLVMContext.h	/^  typedef void (*InlineAsmDiagHandlerTy)(const SMDiagnostic&, void *Context,$/;"	t	class:llvm::LLVMContext
InlineAsmVal	include/IR/Value.h	/^    InlineAsmVal,             \/\/ This is an instance of InlineAsm$/;"	e	enum:llvm::Value::ValueTy
InlineHint	include/IR/Attributes.h	/^    InlineHint,            \/\/\/< Source said inlining was desirable$/;"	e	enum:llvm::Attribute::AttrKind
Insert	include/IR/IRBuilder.h	/^  Constant *Insert(Constant *C, const Twine& = "") const {$/;"	f	class:llvm::IRBuilder
Insert	include/IR/IRBuilder.h	/^  InstTy *Insert(InstTy *I, const Twine &Name = "") const {$/;"	f	class:llvm::IRBuilder
InsertElementInst	include/IR/Instructions.h	/^class InsertElementInst : public Instruction {$/;"	c	namespace:llvm
InsertHelper	include/IR/IRBuilder.h	/^  void InsertHelper(Instruction *I, const Twine &Name,$/;"	f	class:llvm::IRBuilderDefaultInserter
InsertPoint	include/IR/IRBuilder.h	/^    InsertPoint() : Block(nullptr) {}$/;"	f	class:llvm::IRBuilderBase::InsertPoint
InsertPoint	include/IR/IRBuilder.h	/^    InsertPoint(BasicBlock *InsertBlock, BasicBlock::iterator InsertPoint)$/;"	f	class:llvm::IRBuilderBase::InsertPoint
InsertPoint	include/IR/IRBuilder.h	/^  class InsertPoint {$/;"	c	class:llvm::IRBuilderBase
InsertPointGuard	include/IR/IRBuilder.h	/^    InsertPointGuard(IRBuilderBase &B)$/;"	f	class:llvm::IRBuilderBase::InsertPointGuard
InsertPointGuard	include/IR/IRBuilder.h	/^  class InsertPointGuard {$/;"	c	class:llvm::IRBuilderBase
InsertPt	include/IR/IRBuilder.h	/^  BasicBlock::iterator InsertPt;$/;"	m	class:llvm::IRBuilderBase
InsertValueInst	include/IR/Instructions.h	/^InsertValueInst::InsertValueInst(Value *Agg,$/;"	f	class:llvm::InsertValueInst
InsertValueInst	include/IR/Instructions.h	/^class InsertValueInst : public Instruction {$/;"	c	namespace:llvm
InstInsertPt	include/corelab/Utilities/InstInsertPt.h	/^      InstInsertPt()$/;"	f	class:corelab::InstInsertPt
InstInsertPt	include/corelab/Utilities/InstInsertPt.h	/^      InstInsertPt(bool b4, Instruction *position)$/;"	f	class:corelab::InstInsertPt
InstInsertPt	include/corelab/Utilities/InstInsertPt.h	/^      InstInsertPt(const InstInsertPt &pt)$/;"	f	class:corelab::InstInsertPt
InstInsertPt	include/corelab/Utilities/InstInsertPt.h	/^  class InstInsertPt {$/;"	c	namespace:corelab
InstInsertPts	include/corelab/Utilities/InstInsertPt.h	/^  typedef std::vector<InstInsertPt> InstInsertPts;$/;"	t	namespace:corelab
InstIterator	include/IR/InstIterator.h	/^  InstIterator() {}$/;"	f	class:llvm::InstIterator
InstIterator	include/IR/InstIterator.h	/^  InstIterator(InstIterator<A,B,C,D> &II)$/;"	f	class:llvm::InstIterator
InstIterator	include/IR/InstIterator.h	/^  InstIterator(const InstIterator<A,B,C,D> &II)$/;"	f	class:llvm::InstIterator
InstIterator	include/IR/InstIterator.h	/^  template<class M> InstIterator(M &m)$/;"	f	class:llvm::InstIterator
InstIterator	include/IR/InstIterator.h	/^  template<class M> InstIterator(M &m, bool)$/;"	f	class:llvm::InstIterator
InstIterator	include/IR/InstIterator.h	/^template <class BB_t, class BB_i_t, class BI_t, class II_t> class InstIterator {$/;"	c	namespace:llvm
InstList	include/IR/BasicBlock.h	/^  InstListType InstList;$/;"	m	class:llvm::BasicBlock
InstListType	include/IR/BasicBlock.h	/^  typedef iplist<Instruction> InstListType;$/;"	t	class:llvm::BasicBlock
InstVisitor	include/IR/InstVisitor.h	/^class InstVisitor {$/;"	c	namespace:llvm
Instr	include/IR/DiagnosticInfo.h	/^  const Instruction *Instr;$/;"	m	class:llvm::DiagnosticInfoInlineAsm
InstrID	include/corelab/CAMP/campCommon.h	/^		typedef uint16_t 	InstrID;$/;"	t	namespace:corelab::CAMP
InstrID	include/corelab/ObjTrace/ObjTrace.h	/^  typedef uint16_t InstrID;$/;"	t	namespace:corelab
InstrID	lib/CAMP/campCommon.h	/^		typedef uint16_t 	InstrID;$/;"	t	namespace:corelab::CAMP
InstrID	lib/ObjTrace/ObjTrace.h	/^  typedef uint16_t InstrID;$/;"	t	namespace:corelab
InstrID	tools/camp/campExecRuntime.h	/^typedef uint16_t InstrID;$/;"	t
InstrID	tools/camp/campRuntime.h	/^typedef uint16_t InstrID;$/;"	t
InstrID	tools/campSampling/campRuntime.h	/^typedef uint16_t InstrID;$/;"	t
InstrID	tools/objtrace/ctxObjtraceRuntime.h	/^typedef uint32_t InstrID;$/;"	t
InstrProfIncrementInst	include/IR/IntrinsicInst.h	/^  class InstrProfIncrementInst : public IntrinsicInst {$/;"	c	namespace:llvm
InstrType	include/corelab/CAMP/campCommon.h	/^		} InstrType;$/;"	t	namespace:corelab::CAMP	typeref:enum:corelab::CAMP::__anon2
InstrType	lib/CAMP/campCommon.h	/^		} InstrType;$/;"	t	namespace:corelab::CAMP	typeref:enum:corelab::CAMP::__anon26
Instruction	include/IR/Instruction.h	/^class Instruction : public User, public ilist_node<Instruction> {$/;"	c	namespace:llvm
InstructionVal	include/IR/Value.h	/^    InstructionVal,           \/\/ This is an instance of Instruction$/;"	e	enum:llvm::Value::ValueTy
IntToPtrInst	include/IR/Instructions.h	/^class IntToPtrInst : public CastInst {$/;"	c	namespace:llvm
Integer	include/IR/Intrinsics.h	/^      Integer, Vector, Pointer, Struct,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
IntegerTyID	include/IR/Type.h	/^    IntegerTyID,     \/\/\/< 10: Arbitrary bit width integers$/;"	e	enum:llvm::Type::TypeID
IntegerType	include/IR/DerivedTypes.h	/^  explicit IntegerType(LLVMContext &C, unsigned NumBits) : Type(C, IntegerTyID){$/;"	f	class:llvm::IntegerType
IntegerType	include/IR/DerivedTypes.h	/^class IntegerType : public Type {$/;"	c	namespace:llvm
Integer_Width	include/IR/Intrinsics.h	/^      unsigned Integer_Width;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon15
Intel_OCL_BI	include/IR/CallingConv.h	/^    Intel_OCL_BI = 77,$/;"	e	enum:llvm::CallingConv::__anon7
InternalLinkage	include/IR/GlobalValue.h	/^    InternalLinkage,    \/\/\/< Rename collisions when linking (static functions).$/;"	e	enum:llvm::GlobalValue::LinkageTypes
Intrinsic	include/IR/Intrinsics.h	/^namespace Intrinsic {$/;"	n	namespace:llvm
IntrinsicID_match	include/IR/PatternMatch.h	/^  IntrinsicID_match(Intrinsic::ID IntrID) : ID(IntrID) {}$/;"	f	struct:llvm::PatternMatch::IntrinsicID_match
IntrinsicID_match	include/IR/PatternMatch.h	/^struct IntrinsicID_match {$/;"	s	namespace:llvm::PatternMatch
IntrinsicInst	include/IR/IntrinsicInst.h	/^  class IntrinsicInst : public CallInst {$/;"	c	namespace:llvm
InvalidAlignmentElem	include/IR/DataLayout.h	/^  static const LayoutAlignElem InvalidAlignmentElem;$/;"	m	class:llvm::DataLayout
InvalidPointerElem	include/IR/DataLayout.h	/^  static const PointerAlignElem InvalidPointerElem;$/;"	m	class:llvm::DataLayout
InvalidateAllAnalysesPass	include/IR/PassManager.h	/^struct InvalidateAllAnalysesPass {$/;"	s	namespace:llvm
InvalidateAnalysisPass	include/IR/PassManager.h	/^template <typename AnalysisT> struct InvalidateAnalysisPass {$/;"	s	namespace:llvm
InversedLastUser	include/IR/LegacyPassManagers.h	/^  DenseMap<Pass *, SmallPtrSet<Pass *, 8> > InversedLastUser;$/;"	m	class:llvm::PMTopLevelManager
InvokeInst	include/IR/Instructions.h	/^InvokeInst::InvokeInst(Value *Func,$/;"	f	class:llvm::InvokeInst
InvokeInst	include/IR/Instructions.h	/^class InvokeInst : public TerminatorInst {$/;"	c	namespace:llvm
IsAlignStack	include/IR/InlineAsm.h	/^  bool IsAlignStack;$/;"	m	class:llvm::InlineAsm
IsDefinition	include/IR/DebugInfoMetadata.h	/^  bool IsDefinition;$/;"	m	class:llvm::MDGlobalVariable
IsDefinition	include/IR/DebugInfoMetadata.h	/^  bool IsDefinition;$/;"	m	class:llvm::MDSubprogram
IsExact	include/IR/Operator.h	/^    IsExact = (1 << 0)$/;"	e	enum:llvm::PossiblyExactOperator::__anon20
IsInBounds	include/IR/Operator.h	/^    IsInBounds = (1 << 0)$/;"	e	enum:llvm::GEPOperator::__anon22
IsLocalToUnit	include/IR/DebugInfoMetadata.h	/^  bool IsLocalToUnit;$/;"	m	class:llvm::MDGlobalVariable
IsLocalToUnit	include/IR/DebugInfoMetadata.h	/^  bool IsLocalToUnit;$/;"	m	class:llvm::MDSubprogram
IsOptimized	include/IR/DebugInfoMetadata.h	/^  bool IsOptimized;$/;"	m	class:llvm::MDCompileUnit
IsOptimized	include/IR/DebugInfoMetadata.h	/^  bool IsOptimized;$/;"	m	class:llvm::MDSubprogram
IsValidPointer	include/IR/Metadata.h	/^template <class V, class M> struct IsValidPointer {$/;"	s	namespace:llvm::mdconst::detail
IsValidReference	include/IR/Metadata.h	/^template <class V, class M> struct IsValidReference {$/;"	s	namespace:llvm::mdconst::detail
It	include/IR/CFG.h	/^  USE_iterator It;$/;"	m	class:llvm::PredIterator
IterCnt	include/corelab/CAMP/campCommon.h	/^		typedef uint8_t 	IterCnt;$/;"	t	namespace:corelab::CAMP
IterCnt	lib/CAMP/campCommon.h	/^		typedef uint8_t 	IterCnt;$/;"	t	namespace:corelab::CAMP
IterRelation	tools/camp/campRuntime.h	/^typedef uint32_t IterRelation;$/;"	t
IterRelation	tools/camp/campRuntime.h	/^typedef uint64_t IterRelation;$/;"	t
IterRelation	tools/campSampling/campRuntime.h	/^typedef uint32_t IterRelation;$/;"	t
IterRelation	tools/campSampling/campRuntime.h	/^typedef uint64_t IterRelation;$/;"	t
IterRelation	tools/objtrace/ctxObjtraceRuntime.h	/^typedef uint32_t IterRelation;$/;"	t
IterRelation	tools/objtrace/ctxObjtraceRuntime.h	/^typedef uint64_t IterRelation;$/;"	t
IterStack	tools/camp/campRuntime.h	/^typedef union IterStack{$/;"	u
IterStack	tools/camp/campRuntime.h	/^} IterStack;$/;"	t	typeref:union:IterStack
IterStack	tools/campSampling/campRuntime.h	/^typedef union IterStack{$/;"	u
IterStack	tools/campSampling/campRuntime.h	/^} IterStack;$/;"	t	typeref:union:IterStack
IterStack	tools/objtrace/ctxObjtraceRuntime.h	/^typedef union IterStack{$/;"	u
IterStack	tools/objtrace/ctxObjtraceRuntime.h	/^} IterStack;$/;"	t	typeref:union:IterStack
Iterator	include/corelab/CAMP/CampCache.h	/^			int Iterator;$/;"	m	class:corelab::CAMPCache
Iterator	lib/CAMP/CampCache.h	/^			int Iterator;$/;"	m	class:corelab::CAMPCache
JumpTable	include/IR/Attributes.h	/^    JumpTable,             \/\/\/< Build jump-instruction tables and replace refs.$/;"	e	enum:llvm::Attribute::AttrKind
Key	include/IR/Module.h	/^    MDString *Key;$/;"	m	struct:llvm::Module::ModuleFlagEntry
KeySansPointerT	include/IR/ValueMap.h	/^  typedef typename std::remove_pointer<KeyT>::type KeySansPointerT;$/;"	t	class:llvm::ValueMapCallbackVH
Kind	include/IR/DiagnosticInfo.h	/^  const \/* DiagnosticKind *\/ int Kind;$/;"	m	class:llvm::DiagnosticInfo
Kind	include/IR/Intrinsics.h	/^    } Kind;$/;"	m	struct:llvm::Intrinsic::IITDescriptor	typeref:enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::AnyBinaryOp_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::BinOp2_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::BinaryOp_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::MaxMin_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::OverflowingBinaryOp_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::fneg_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::neg_match
L	include/IR/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::not_match
L	include/IR/PatternMatch.h	/^  LTy L;$/;"	m	struct:llvm::PatternMatch::match_combine_and
L	include/IR/PatternMatch.h	/^  LTy L;$/;"	m	struct:llvm::PatternMatch::match_combine_or
LAST_BINARY_INST	include/IR/Instruction.h	452;"	d
LAST_BINOP	include/IR/Instructions.h	/^    LAST_BINOP = UMin,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
LAST_CAST_INST	include/IR/Instruction.h	466;"	d
LAST_FCMP_PREDICATE	include/IR/InstrTypes.h	/^    LAST_FCMP_PREDICATE = FCMP_TRUE,$/;"	e	enum:llvm::CmpInst::Predicate
LAST_ICMP_PREDICATE	include/IR/InstrTypes.h	/^    LAST_ICMP_PREDICATE = ICMP_SLE,$/;"	e	enum:llvm::CmpInst::Predicate
LAST_MEMORY_INST	include/IR/Instruction.h	459;"	d
LAST_OTHER_INST	include/IR/Instruction.h	473;"	d
LAST_TERM_INST	include/IR/Instruction.h	445;"	d
LEVEL	Makefile	/^LEVEL = .$/;"	m
LEVEL	lib/AliasAnalysis/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	lib/CAMP/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	lib/Makefile	/^LEVEL=..$/;"	m
LEVEL	lib/Metadata/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	lib/ObjTrace/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	lib/Utilities/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	tools/Makefile	/^LEVEL=..$/;"	m
LEVEL	tools/camp/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	tools/campSampling/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	tools/objtrace/Makefile	/^LEVEL=..\/..$/;"	m
LIBRARYNAME	lib/AliasAnalysis/Makefile	/^LIBRARYNAME=AliasAnalysis$/;"	m
LIBRARYNAME	lib/CAMP/Makefile	/^LIBRARYNAME=CAMP$/;"	m
LIBRARYNAME	lib/Metadata/Makefile	/^LIBRARYNAME=Metadata$/;"	m
LIBRARYNAME	lib/ObjTrace/Makefile	/^LIBRARYNAME=ObjTrace$/;"	m
LIBRARYNAME	lib/Utilities/Makefile	/^LIBRARYNAME=Utils$/;"	m
LIBRARYNAME	tools/camp/Makefile	/^LIBRARYNAME=campExecTime$/;"	m
LIBRARYNAME	tools/campSampling/Makefile	/^LIBRARYNAME=campSampling$/;"	m
LIBRARYNAME	tools/objtrace/Makefile	/^LIBRARYNAME=objtrace$/;"	m
LLVMContext	include/IR/LLVMContext.h	/^class LLVMContext {$/;"	c	namespace:llvm
LLVMTargetDataRef	include/IR/DataLayout.h	/^typedef struct LLVMOpaqueTargetData *LLVMTargetDataRef;$/;"	t	typeref:struct:LLVMOpaqueTargetData
LLVM_ANALYSIS_PROFILEINFO_H	include/corelab/Utilities/ProfileInfo.h	22;"	d
LLVM_COMMA	include/IR/Dominators.h	42;"	d
LLVM_COMMA	include/IR/Dominators.h	50;"	d
LLVM_CORELAB_CAMP_COTEXT_TREE_BUILDER_H	include/corelab/CAMP/ContextTreeBuilder.h	2;"	d
LLVM_CORELAB_CAMP_COTEXT_TREE_BUILDER_H	lib/CAMP/ContextTreeBuilder.h	2;"	d
LLVM_CORELAB_CAMP_INSTALLER_H	include/corelab/CAMP/CAMP.h	2;"	d
LLVM_CORELAB_CAMP_INSTALLER_H	include/corelab/CAMP/CampExectime.h	2;"	d
LLVM_CORELAB_CAMP_INSTALLER_H	include/corelab/CAMP/CampPlain.h	2;"	d
LLVM_CORELAB_CAMP_INSTALLER_H	lib/CAMP/CAMP.h	2;"	d
LLVM_CORELAB_CAMP_INSTALLER_H	lib/CAMP/CampExectime.h	2;"	d
LLVM_CORELAB_CAMP_INSTALLER_H	lib/CAMP/CampPlain.h	2;"	d
LLVM_CORELAB_CTX_OBJ_H	include/corelab/ObjTrace/CtxObjtrace.h	2;"	d
LLVM_CORELAB_CTX_OBJ_H	lib/ObjTrace/CtxObjtrace.h	2;"	d
LLVM_CORELAB_INDIRECT_CALL_ANAL_H	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	2;"	d
LLVM_CORELAB_INDIRECT_CALL_ANAL_H	lib/AliasAnalysis/IndirectCallAnal.hpp	2;"	d
LLVM_CORELAB_LOADNAMER_H	include/corelab/Metadata/LoadNamer.h	2;"	d
LLVM_CORELAB_LOOP_TRAVERSE_H	include/corelab/AliasAnalysis/LoopTraverse.hpp	2;"	d
LLVM_CORELAB_LOOP_TRAVERSE_H	lib/AliasAnalysis/LoopTraverse.hpp	2;"	d
LLVM_CORELAB_METADATA_MANAGER	include/corelab/Metadata/Metadata.h	2;"	d
LLVM_CORELAB_NAMEDMETADATA_H	include/corelab/Metadata/NamedMetadata.h	2;"	d
LLVM_CORELAB_OBJTRACE_H	include/corelab/ObjTrace/ObjTrace.h	2;"	d
LLVM_CORELAB_OBJTRACE_H	lib/ObjTrace/ObjTrace.h	2;"	d
LLVM_CORELAB_OBJTRACE_RUNTIME_H	tools/objtrace/objtraceruntime.h	2;"	d
LLVM_CORELAB_RECURSIVE_FUNC_ANAL_H	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	2;"	d
LLVM_CORELAB_RECURSIVE_FUNC_ANAL_H	lib/AliasAnalysis/RecursiveFuncAnal.hpp	2;"	d
LLVM_CORELAB_REGI_INTER_ITER_DEP_FINDER_H	include/corelab/CAMP/RegiInterIterDepFinder.h	2;"	d
LLVM_CORELAB_REGI_INTER_ITER_DEP_FINDER_H	lib/CAMP/RegiInterIterDepFinder.h	2;"	d
LLVM_CORELAB_TEST_AA_CLIENT_H	include/corelab/AliasAnalysis/TestClient.hpp	2;"	d
LLVM_END_WITH_NULL	include/IR/Constants.h	/^  static Constant *get(StructType *T, ...) LLVM_END_WITH_NULL;$/;"	m	class:llvm::ConstantStruct
LLVM_END_WITH_NULL	include/IR/DerivedTypes.h	/^  static StructType *create(StringRef Name, Type *elt1, ...) LLVM_END_WITH_NULL;$/;"	m	class:llvm::StructType
LLVM_END_WITH_NULL	include/IR/DerivedTypes.h	/^  static StructType *get(Type *elt1, ...) LLVM_END_WITH_NULL;$/;"	m	class:llvm::StructType
LLVM_END_WITH_NULL	include/IR/DerivedTypes.h	/^  void setBody(Type *elt1, ...) LLVM_END_WITH_NULL;$/;"	m	class:llvm::StructType
LLVM_END_WITH_NULL	include/IR/Module.h	/^                                Type *RetTy, ...) LLVM_END_WITH_NULL;$/;"	m	class:llvm::Module
LLVM_END_WITH_NULL	include/IR/Module.h	/^    LLVM_END_WITH_NULL;$/;"	m	class:llvm::Module
LLVM_IR_ARGUMENT_H	include/IR/Argument.h	15;"	d
LLVM_IR_ASSEMBLYANNOTATIONWRITER_H	include/IR/AssemblyAnnotationWriter.h	18;"	d
LLVM_IR_ATTRIBUTES_H	include/IR/Attributes.h	17;"	d
LLVM_IR_AUTOUPGRADE_H	include/IR/AutoUpgrade.h	15;"	d
LLVM_IR_BASICBLOCK_H	include/IR/BasicBlock.h	15;"	d
LLVM_IR_CALLINGCONV_H	include/IR/CallingConv.h	15;"	d
LLVM_IR_CALLSITE_H	include/IR/CallSite.h	27;"	d
LLVM_IR_CFG_H	include/IR/CFG.h	16;"	d
LLVM_IR_COMDAT_H	include/IR/Comdat.h	17;"	d
LLVM_IR_CONSTANTFOLDER_H	include/IR/ConstantFolder.h	18;"	d
LLVM_IR_CONSTANTRANGE_H	include/IR/ConstantRange.h	33;"	d
LLVM_IR_CONSTANTS_H	include/IR/Constants.h	22;"	d
LLVM_IR_CONSTANT_H	include/IR/Constant.h	15;"	d
LLVM_IR_DATALAYOUT_H	include/IR/DataLayout.h	21;"	d
LLVM_IR_DEBUGINFOMETADATA_H	include/IR/DebugInfoMetadata.h	15;"	d
LLVM_IR_DEBUGINFO_H	include/IR/DebugInfo.h	18;"	d
LLVM_IR_DEBUGLOC_H	include/IR/DebugLoc.h	16;"	d
LLVM_IR_DERIVEDTYPES_H	include/IR/DerivedTypes.h	19;"	d
LLVM_IR_DIAGNOSTICINFO_H	include/IR/DiagnosticInfo.h	16;"	d
LLVM_IR_DIAGNOSTICPRINTER_H	include/IR/DiagnosticPrinter.h	17;"	d
LLVM_IR_DIBUILDER_H	include/IR/DIBuilder.h	16;"	d
LLVM_IR_DOMINATORS_H	include/IR/Dominators.h	16;"	d
LLVM_IR_FUNCTION_H	include/IR/Function.h	19;"	d
LLVM_IR_GETELEMENTPTRTYPEITERATOR_H	include/IR/GetElementPtrTypeIterator.h	16;"	d
LLVM_IR_GLOBALALIAS_H	include/IR/GlobalAlias.h	16;"	d
LLVM_IR_GLOBALOBJECT_H	include/IR/GlobalObject.h	16;"	d
LLVM_IR_GLOBALVALUE_H	include/IR/GlobalValue.h	19;"	d
LLVM_IR_GLOBALVARIABLE_H	include/IR/GlobalVariable.h	21;"	d
LLVM_IR_GVMATERIALIZER_H	include/IR/GVMaterializer.h	19;"	d
LLVM_IR_INLINEASM_H	include/IR/InlineAsm.h	17;"	d
LLVM_IR_INSTITERATOR_H	include/IR/InstIterator.h	20;"	d
LLVM_IR_INSTRTYPES_H	include/IR/InstrTypes.h	17;"	d
LLVM_IR_INSTRUCTIONS_H	include/IR/Instructions.h	17;"	d
LLVM_IR_INSTRUCTION_H	include/IR/Instruction.h	16;"	d
LLVM_IR_INSTVISITOR_H	include/IR/InstVisitor.h	12;"	d
LLVM_IR_INTRINSICINST_H	include/IR/IntrinsicInst.h	25;"	d
LLVM_IR_INTRINSICS_H	include/IR/Intrinsics.h	17;"	d
LLVM_IR_IRBUILDER_H	include/IR/IRBuilder.h	16;"	d
LLVM_IR_IRPRINTINGPASSES_H	include/IR/IRPrintingPasses.h	20;"	d
LLVM_IR_LEGACYPASSMANAGERS_H	include/IR/LegacyPassManagers.h	15;"	d
LLVM_IR_LEGACYPASSMANAGER_H	include/IR/LegacyPassManager.h	18;"	d
LLVM_IR_LEGACYPASSNAMEPARSER_H	include/IR/LegacyPassNameParser.h	27;"	d
LLVM_IR_LLVMCONTEXT_H	include/IR/LLVMContext.h	16;"	d
LLVM_IR_MANGLER_H	include/IR/Mangler.h	15;"	d
LLVM_IR_MDBUILDER_H	include/IR/MDBuilder.h	16;"	d
LLVM_IR_METADATATRACKING_H	include/IR/MetadataTracking.h	15;"	d
LLVM_IR_METADATA_H	include/IR/Metadata.h	17;"	d
LLVM_IR_MODULE_H	include/IR/Module.h	16;"	d
LLVM_IR_NOFOLDER_H	include/IR/NoFolder.h	23;"	d
LLVM_IR_OPERANDTRAITS_H	include/IR/OperandTraits.h	16;"	d
LLVM_IR_OPERATOR_H	include/IR/Operator.h	16;"	d
LLVM_IR_PASSMANAGERINTERNAL_H	include/IR/PassManagerInternal.h	19;"	d
LLVM_IR_PASSMANAGER_H	include/IR/PassManager.h	39;"	d
LLVM_IR_PATTERNMATCH_H	include/IR/PatternMatch.h	30;"	d
LLVM_IR_PREDITERATORCACHE_H	include/IR/PredIteratorCache.h	15;"	d
LLVM_IR_SYMBOLTABLELISTTRAITS_H	include/IR/SymbolTableListTraits.h	26;"	d
LLVM_IR_TRACKINGMDREF_H	include/IR/TrackingMDRef.h	15;"	d
LLVM_IR_TYPEBUILDER_H	include/IR/TypeBuilder.h	16;"	d
LLVM_IR_TYPEFINDER_H	include/IR/TypeFinder.h	15;"	d
LLVM_IR_TYPE_H	include/IR/Type.h	16;"	d
LLVM_IR_USELISTORDER_H	include/IR/UseListOrder.h	16;"	d
LLVM_IR_USER_H	include/IR/User.h	20;"	d
LLVM_IR_USE_H	include/IR/Use.h	26;"	d
LLVM_IR_VALUEHANDLE_H	include/IR/ValueHandle.h	15;"	d
LLVM_IR_VALUEMAP_H	include/IR/ValueMap.h	27;"	d
LLVM_IR_VALUESYMBOLTABLE_H	include/IR/ValueSymbolTable.h	15;"	d
LLVM_IR_VALUE_H	include/IR/Value.h	15;"	d
LLVM_IR_VERIFIER_H	include/IR/Verifier.h	22;"	d
LLVM_READONLY	include/IR/Function.h	/^  unsigned getIntrinsicID() const LLVM_READONLY;$/;"	m	class:llvm::Function
LLVM_READONLY	include/IR/Function.h	/^  unsigned lookupIntrinsicID() const LLVM_READONLY;$/;"	m	class:llvm::Function
LLVM_READONLY	include/IR/Type.h	/^  Type *getScalarType() LLVM_READONLY;$/;"	m	class:llvm::Type
LLVM_READONLY	include/IR/Type.h	/^  const Type *getScalarType() const LLVM_READONLY;$/;"	m	class:llvm::Type
LLVM_READONLY	include/IR/Type.h	/^  unsigned getPrimitiveSizeInBits() const LLVM_READONLY;$/;"	m	class:llvm::Type
LLVM_READONLY	include/IR/Type.h	/^  unsigned getScalarSizeInBits() const LLVM_READONLY;$/;"	m	class:llvm::Type
LOAD	include/corelab/CAMP/campCommon.h	/^			LOAD 	= 0x00,$/;"	e	enum:corelab::CAMP::__anon2
LOAD	lib/CAMP/campCommon.h	/^			LOAD 	= 0x00,$/;"	e	enum:corelab::CAMP::__anon26
LOADABLE_MODULE	lib/AliasAnalysis/Makefile	/^LOADABLE_MODULE = 1$/;"	m
LOADABLE_MODULE	lib/CAMP/Makefile	/^LOADABLE_MODULE = 1$/;"	m
LOADABLE_MODULE	lib/Metadata/Makefile	/^LOADABLE_MODULE = 1$/;"	m
LOADABLE_MODULE	lib/ObjTrace/Makefile	/^LOADABLE_MODULE = 1$/;"	m
LOADABLE_MODULE	lib/Utilities/Makefile	/^LOADABLE_MODULE = 1$/;"	m
LShrOperator	include/IR/Operator.h	/^class LShrOperator$/;"	c	namespace:llvm
LabelTyID	include/IR/Type.h	/^    LabelTyID,       \/\/\/<  7: Labels$/;"	e	enum:llvm::Type::TypeID
LandingPadInst	include/IR/Instructions.h	/^class LandingPadInst : public Instruction {$/;"	c	namespace:llvm
Largest	include/IR/Comdat.h	/^    Largest,      \/\/\/< The linker will choose the largest COMDAT.$/;"	e	enum:llvm::Comdat::SelectionKind
LastUnique	include/IR/ValueSymbolTable.h	/^  mutable uint32_t LastUnique; \/\/\/< Counter for tracking unique names$/;"	m	class:llvm::ValueSymbolTable
LastUser	include/IR/LegacyPassManagers.h	/^  DenseMap<Pass *, Pass *> LastUser;$/;"	m	class:llvm::PMTopLevelManager
LayoutAlignElem	include/IR/DataLayout.h	/^struct LayoutAlignElem {$/;"	s	namespace:llvm
LayoutMap	include/IR/DataLayout.h	/^  mutable void *LayoutMap;$/;"	m	class:llvm::DataLayout
LegalIntWidths	include/IR/DataLayout.h	/^  SmallVector<unsigned char, 8> LegalIntWidths;$/;"	m	class:llvm::DataLayout
Line	include/IR/DebugInfoMetadata.h	/^  unsigned Line;$/;"	m	class:llvm::MDImportedEntity
Line	include/IR/DebugInfoMetadata.h	/^  unsigned Line;$/;"	m	class:llvm::MDLexicalBlock
Line	include/IR/DebugInfoMetadata.h	/^  unsigned Line;$/;"	m	class:llvm::MDNamespace
Line	include/IR/DebugInfoMetadata.h	/^  unsigned Line;$/;"	m	class:llvm::MDObjCProperty
Line	include/IR/DebugInfoMetadata.h	/^  unsigned Line;$/;"	m	class:llvm::MDSubprogram
Line	include/IR/DebugInfoMetadata.h	/^  unsigned Line;$/;"	m	class:llvm::MDType
Line	include/IR/DebugInfoMetadata.h	/^  unsigned Line;$/;"	m	class:llvm::MDVariable
LineNum	include/IR/DiagnosticInfo.h	/^  unsigned LineNum;$/;"	m	class:llvm::DiagnosticInfoSampleProfile
LineTablesOnly	include/IR/DIBuilder.h	/^    enum DebugEmissionKind { FullDebug=1, LineTablesOnly };$/;"	e	enum:llvm::DIBuilder::DebugEmissionKind
LinkOnceAnyLinkage	include/IR/GlobalValue.h	/^    LinkOnceAnyLinkage, \/\/\/< Keep one copy of function when linking (inline)$/;"	e	enum:llvm::GlobalValue::LinkageTypes
LinkOnceODRLinkage	include/IR/GlobalValue.h	/^    LinkOnceODRLinkage, \/\/\/< Same, but only replaced by something equivalent.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
LinkageTypes	include/IR/GlobalValue.h	/^  enum LinkageTypes {$/;"	g	class:llvm::GlobalValue
LinkerPrivate	include/IR/Mangler.h	/^    LinkerPrivate          \/\/\/< Emit "linker private" prefix before each symbol.$/;"	e	enum:llvm::Mangler::ManglerPrefixTy
Lo	include/IR/DebugInfoMetadata.h	/^  int64_t Lo;$/;"	m	class:llvm::MDSubrange
LoadHistoryMap	tools/camp/campRuntime.h	/^typedef std::map<CampID, IterStack> LoadHistoryMap;$/;"	t
LoadHistoryMap	tools/campSampling/campRuntime.h	/^typedef std::map<CampID, IterStack> LoadHistoryMap;$/;"	t
LoadInst	include/IR/Instructions.h	/^class LoadInst : public UnaryInstruction {$/;"	c	namespace:llvm
LoadNamer	include/corelab/Metadata/LoadNamer.h	/^			LoadNamer() : ModulePass(ID) {}$/;"	f	class:corelab::LoadNamer
LoadNamer	include/corelab/Metadata/LoadNamer.h	/^	class LoadNamer : public ModulePass$/;"	c	namespace:corelab
LoadStoreInfo	tools/objtrace/ctxObjtraceRuntime.h	/^typedef std::set<FullID> LoadStoreInfo;$/;"	t
LoadStoreInfo	tools/objtrace/objtraceruntime.h	/^typedef std::set<FullID> LoadStoreInfo;$/;"	t
LoadStoreMap	tools/objtrace/ctxObjtraceRuntime.h	/^typedef std::map<FullID, LoadStoreInfo> LoadStoreMap;$/;"	t
LoadStoreMap	tools/objtrace/objtraceruntime.h	/^typedef std::map<FullID, LoadStoreInfo> LoadStoreMap;$/;"	t
Loc	include/IR/DebugLoc.h	/^    TrackingMDNodeRef Loc;$/;"	m	class:llvm::DebugLoc
LocCookie	include/IR/DiagnosticInfo.h	/^  unsigned LocCookie;$/;"	m	class:llvm::DiagnosticInfoInlineAsm
LocIDMapForCallSite	include/corelab/CAMP/ContextTreeBuilder.h	/^	typedef DenseMap<const Instruction *, LocalContextID> LocIDMapForCallSite;\/\/ if key is instrID of indirect call, then value is -1$/;"	t	namespace:corelab
LocIDMapForCallSite	lib/CAMP/ContextTreeBuilder.h	/^	typedef DenseMap<const Instruction *, LocalContextID> LocIDMapForCallSite;\/\/ if key is instrID of indirect call, then value is -1$/;"	t	namespace:corelab
LocIDMapForIndirectCalls	include/corelab/CAMP/ContextTreeBuilder.h	/^	typedef DenseMap<const Instruction *, std::vector<std::pair<Function *, LocalContextID>>> LocIDMapForIndirectCalls;$/;"	t	namespace:corelab
LocIDMapForIndirectCalls	lib/CAMP/ContextTreeBuilder.h	/^	typedef DenseMap<const Instruction *, std::vector<std::pair<Function *, LocalContextID>>> LocIDMapForIndirectCalls;$/;"	t	namespace:corelab
LocIDMapForLoop	include/corelab/CAMP/ContextTreeBuilder.h	/^	typedef std::unordered_map<CntxID, LocalContextID> LocIDMapForLoop; \/\/ CntxID == LoopID;$/;"	t	namespace:corelab
LocIDMapForLoop	lib/CAMP/ContextTreeBuilder.h	/^	typedef std::unordered_map<CntxID, LocalContextID> LocIDMapForLoop; \/\/ CntxID == LoopID;$/;"	t	namespace:corelab
LocalAsMetadata	include/IR/Metadata.h	/^  LocalAsMetadata(Value *Local)$/;"	f	class:llvm::LocalAsMetadata
LocalAsMetadata	include/IR/Metadata.h	/^class LocalAsMetadata : public ValueAsMetadata {$/;"	c	namespace:llvm
LocalAsMetadataKind	include/IR/Metadata.h	/^    LocalAsMetadataKind,$/;"	e	enum:llvm::Metadata::MetadataKind
LocalContextID	include/corelab/CAMP/ContextTreeBuilder.h	/^	typedef uint16_t LocalContextID;$/;"	t	namespace:corelab
LocalContextID	lib/CAMP/ContextTreeBuilder.h	/^	typedef uint16_t LocalContextID;$/;"	t	namespace:corelab
LocalDynamicTLSModel	include/IR/GlobalValue.h	/^    LocalDynamicTLSModel,$/;"	e	enum:llvm::GlobalValue::ThreadLocalMode
LocalExecTLSModel	include/IR/GlobalValue.h	/^    LocalExecTLSModel$/;"	e	enum:llvm::GlobalValue::ThreadLocalMode
LocalRelocation	include/IR/Constant.h	/^    LocalRelocation = 1,$/;"	e	enum:llvm::Constant::PossibleRelocationsTy
LoopEntry	include/corelab/Metadata/Metadata.h	/^	} LoopEntry;$/;"	t	namespace:corelab	typeref:struct:corelab::__anon6
LoopID	include/corelab/CAMP/CAMP.h	/^			typedef CntxID LoopID;$/;"	t	class:corelab::CAMPInstaller
LoopID	include/corelab/CAMP/CampExectime.h	/^			typedef CntxID LoopID;$/;"	t	class:corelab::CAMPExectime
LoopID	include/corelab/CAMP/RegiInterIterDepFinder.h	/^	typedef CntxID LoopID;$/;"	t	namespace:corelab
LoopID	include/corelab/ObjTrace/CtxObjtrace.h	/^			typedef CntxID LoopID;$/;"	t	class:corelab::CtxObjtrace
LoopID	lib/CAMP/CAMP.h	/^			typedef CntxID LoopID;$/;"	t	class:corelab::CAMPInstaller
LoopID	lib/CAMP/CampExectime.h	/^			typedef CntxID LoopID;$/;"	t	class:corelab::CAMPExectime
LoopID	lib/CAMP/RegiInterIterDepFinder.h	/^	typedef CntxID LoopID;$/;"	t	namespace:corelab
LoopID	lib/ObjTrace/CtxObjtrace.h	/^			typedef CntxID LoopID;$/;"	t	class:corelab::CtxObjtrace
LoopIdOf	include/corelab/CAMP/ContextTreeBuilder.h	/^			typedef DenseMap<const Loop *, CntxID > LoopIdOf; \/\/ CntxID == LoopID;$/;"	t	class:corelab::ContextTreeBuilder
LoopIdOf	lib/CAMP/ContextTreeBuilder.h	/^			typedef DenseMap<const Loop *, CntxID > LoopIdOf; \/\/ CntxID == LoopID;$/;"	t	class:corelab::ContextTreeBuilder
LoopInfoOfFunc	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      typedef DenseMap<const Function *, LoopInfo * > LoopInfoOfFunc; $/;"	t	class:corelab::LoopTraverse
LoopInfoOfFunc	include/corelab/CAMP/ContextTreeBuilder.h	/^			typedef DenseMap<const Function *, LoopInfo * > LoopInfoOfFunc; $/;"	t	class:corelab::ContextTreeBuilder
LoopInfoOfFunc	lib/AliasAnalysis/LoopTraverse.hpp	/^      typedef DenseMap<const Function *, LoopInfo * > LoopInfoOfFunc; $/;"	t	class:corelab::LoopTraverse
LoopInfoOfFunc	lib/CAMP/ContextTreeBuilder.h	/^			typedef DenseMap<const Function *, LoopInfo * > LoopInfoOfFunc; $/;"	t	class:corelab::ContextTreeBuilder
LoopNodeTraverse	lib/CAMP/ContextTreeBuilder.cpp	/^bool ContextTreeBuilder::LoopNodeTraverse(ContextTreeNode *loopNode){$/;"	f	class:ContextTreeBuilder
LoopOfCntxID	include/corelab/CAMP/ContextTreeBuilder.h	/^			typedef std::map<CntxID, const Loop *> LoopOfCntxID;\/\/inverse of LoopIdOf$/;"	t	class:corelab::ContextTreeBuilder
LoopOfCntxID	lib/CAMP/ContextTreeBuilder.h	/^			typedef std::map<CntxID, const Loop *> LoopOfCntxID;\/\/inverse of LoopIdOf$/;"	t	class:corelab::ContextTreeBuilder
LoopTraverse	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      LoopTraverse() : ModulePass(ID) {}$/;"	f	class:corelab::LoopTraverse
LoopTraverse	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^  class LoopTraverse : public ModulePass {$/;"	c	namespace:corelab
LoopTraverse	lib/AliasAnalysis/LoopTraverse.hpp	/^      LoopTraverse() : ModulePass(ID) {}$/;"	f	class:corelab::LoopTraverse
LoopTraverse	lib/AliasAnalysis/LoopTraverse.hpp	/^  class LoopTraverse : public ModulePass {$/;"	c	namespace:corelab
Lower	include/IR/ConstantRange.h	/^  APInt Lower, Upper;$/;"	m	class:llvm::ConstantRange
M	include/IR/DIBuilder.h	/^    Module &M;$/;"	m	class:llvm::DIBuilder
M	include/IR/DiagnosticInfo.h	/^  const Module &M;$/;"	m	class:llvm::DiagnosticInfoDebugMetadataVersion
M	include/IR/LegacyPassManager.h	/^  Module *M;$/;"	m	class:llvm::legacy::FunctionPassManager
M	include/IR/LegacyPassManagers.h	/^  Module *M;$/;"	m	class:llvm::PassManagerPrettyStackEntry
MAM	include/IR/PassManager.h	/^    const ModuleAnalysisManager *MAM;$/;"	m	class:llvm::ModuleAnalysisManagerFunctionProxy::Result
MAM	include/IR/PassManager.h	/^  const ModuleAnalysisManager *MAM;$/;"	m	class:llvm::ModuleAnalysisManagerFunctionProxy
MAX_CNTX_LV	include/corelab/CAMP/campCommon.h	18;"	d
MAX_CNTX_LV	lib/CAMP/campCommon.h	18;"	d
MAX_INT_BITS	include/IR/DerivedTypes.h	/^    MAX_INT_BITS = (1<<23)-1 \/\/\/< Maximum number of bits that can be specified$/;"	e	enum:llvm::IntegerType::__anon10
MAX_LINE_SIZE	tools/camp/campExecRuntime.cpp	29;"	d	file:
MAX_LINE_SIZE	tools/objtrace/ctxObjtraceRuntime.cpp	19;"	d	file:
MD	include/IR/Metadata.h	/^  Metadata *MD;$/;"	m	class:llvm::MDOperand
MD	include/IR/Metadata.h	/^  Metadata *MD;$/;"	m	class:llvm::MetadataAsValue
MD	include/IR/TrackingMDRef.h	/^  Metadata *MD;$/;"	m	class:llvm::TrackingMDRef
MD	include/IR/ValueMap.h	/^  MDMapT &MD() {$/;"	f	class:llvm::ValueMap
MDBasicType	include/IR/DebugInfoMetadata.h	/^  MDBasicType(LLVMContext &C, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDBasicType
MDBasicType	include/IR/DebugInfoMetadata.h	/^class MDBasicType : public MDType {$/;"	c	namespace:llvm
MDBasicTypeKind	include/IR/Metadata.h	/^    MDBasicTypeKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDBuilder	include/IR/MDBuilder.h	/^  MDBuilder(LLVMContext &context) : Context(context) {}$/;"	f	class:llvm::MDBuilder
MDBuilder	include/IR/MDBuilder.h	/^class MDBuilder {$/;"	c	namespace:llvm
MDCompileUnit	include/IR/DebugInfoMetadata.h	/^  MDCompileUnit(LLVMContext &C, StorageType Storage, unsigned SourceLanguage,$/;"	f	class:llvm::MDCompileUnit
MDCompileUnit	include/IR/DebugInfoMetadata.h	/^class MDCompileUnit : public MDScope {$/;"	c	namespace:llvm
MDCompileUnitKind	include/IR/Metadata.h	/^    MDCompileUnitKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDCompositeType	include/IR/DebugInfoMetadata.h	/^  MDCompositeType(LLVMContext &C, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDCompositeType
MDCompositeType	include/IR/DebugInfoMetadata.h	/^class MDCompositeType : public MDCompositeTypeBase {$/;"	c	namespace:llvm
MDCompositeTypeBase	include/IR/DebugInfoMetadata.h	/^  MDCompositeTypeBase(LLVMContext &C, unsigned ID, StorageType Storage,$/;"	f	class:llvm::MDCompositeTypeBase
MDCompositeTypeBase	include/IR/DebugInfoMetadata.h	/^class MDCompositeTypeBase : public MDDerivedTypeBase {$/;"	c	namespace:llvm
MDCompositeTypeKind	include/IR/Metadata.h	/^    MDCompositeTypeKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDDerivedType	include/IR/DebugInfoMetadata.h	/^  MDDerivedType(LLVMContext &C, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDDerivedType
MDDerivedType	include/IR/DebugInfoMetadata.h	/^class MDDerivedType : public MDDerivedTypeBase {$/;"	c	namespace:llvm
MDDerivedTypeBase	include/IR/DebugInfoMetadata.h	/^  MDDerivedTypeBase(LLVMContext &C, unsigned ID, StorageType Storage,$/;"	f	class:llvm::MDDerivedTypeBase
MDDerivedTypeBase	include/IR/DebugInfoMetadata.h	/^class MDDerivedTypeBase : public MDType {$/;"	c	namespace:llvm
MDDerivedTypeKind	include/IR/Metadata.h	/^    MDDerivedTypeKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDEnumerator	include/IR/DebugInfoMetadata.h	/^  MDEnumerator(LLVMContext &C, StorageType Storage, int64_t Value,$/;"	f	class:llvm::MDEnumerator
MDEnumerator	include/IR/DebugInfoMetadata.h	/^class MDEnumerator : public DebugNode {$/;"	c	namespace:llvm
MDEnumeratorKind	include/IR/Metadata.h	/^    MDEnumeratorKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDExpression	include/IR/DebugInfoMetadata.h	/^  MDExpression(LLVMContext &C, StorageType Storage, ArrayRef<uint64_t> Elements)$/;"	f	class:llvm::MDExpression
MDExpression	include/IR/DebugInfoMetadata.h	/^class MDExpression : public MDNode {$/;"	c	namespace:llvm
MDExpressionKind	include/IR/Metadata.h	/^    MDExpressionKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDFile	include/IR/DebugInfoMetadata.h	/^  MDFile(LLVMContext &C, StorageType Storage, ArrayRef<Metadata *> Ops)$/;"	f	class:llvm::MDFile
MDFile	include/IR/DebugInfoMetadata.h	/^class MDFile : public MDScope {$/;"	c	namespace:llvm
MDFileKind	include/IR/Metadata.h	/^    MDFileKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDGlobalVariable	include/IR/DebugInfoMetadata.h	/^  MDGlobalVariable(LLVMContext &C, StorageType Storage, unsigned Line,$/;"	f	class:llvm::MDGlobalVariable
MDGlobalVariable	include/IR/DebugInfoMetadata.h	/^class MDGlobalVariable : public MDVariable {$/;"	c	namespace:llvm
MDGlobalVariableKind	include/IR/Metadata.h	/^    MDGlobalVariableKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDImportedEntity	include/IR/DebugInfoMetadata.h	/^  MDImportedEntity(LLVMContext &C, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDImportedEntity
MDImportedEntity	include/IR/DebugInfoMetadata.h	/^class MDImportedEntity : public DebugNode {$/;"	c	namespace:llvm
MDImportedEntityKind	include/IR/Metadata.h	/^    MDImportedEntityKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDLexicalBlock	include/IR/DebugInfoMetadata.h	/^  MDLexicalBlock(LLVMContext &C, StorageType Storage, unsigned Line,$/;"	f	class:llvm::MDLexicalBlock
MDLexicalBlock	include/IR/DebugInfoMetadata.h	/^class MDLexicalBlock : public MDLexicalBlockBase {$/;"	c	namespace:llvm
MDLexicalBlockBase	include/IR/DebugInfoMetadata.h	/^  MDLexicalBlockBase(LLVMContext &C, unsigned ID, StorageType Storage,$/;"	f	class:llvm::MDLexicalBlockBase
MDLexicalBlockBase	include/IR/DebugInfoMetadata.h	/^class MDLexicalBlockBase : public MDLocalScope {$/;"	c	namespace:llvm
MDLexicalBlockFile	include/IR/DebugInfoMetadata.h	/^  MDLexicalBlockFile(LLVMContext &C, StorageType Storage,$/;"	f	class:llvm::MDLexicalBlockFile
MDLexicalBlockFile	include/IR/DebugInfoMetadata.h	/^class MDLexicalBlockFile : public MDLexicalBlockBase {$/;"	c	namespace:llvm
MDLexicalBlockFileKind	include/IR/Metadata.h	/^    MDLexicalBlockFileKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDLexicalBlockKind	include/IR/Metadata.h	/^    MDLexicalBlockKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDLocalScope	include/IR/DebugInfoMetadata.h	/^  MDLocalScope(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDLocalScope
MDLocalScope	include/IR/DebugInfoMetadata.h	/^class MDLocalScope : public MDScope {$/;"	c	namespace:llvm
MDLocalVariable	include/IR/DebugInfoMetadata.h	/^  MDLocalVariable(LLVMContext &C, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDLocalVariable
MDLocalVariable	include/IR/DebugInfoMetadata.h	/^class MDLocalVariable : public MDVariable {$/;"	c	namespace:llvm
MDLocalVariableKind	include/IR/Metadata.h	/^    MDLocalVariableKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDLocation	include/IR/DebugInfoMetadata.h	/^class MDLocation : public MDNode {$/;"	c	namespace:llvm
MDLocationKind	include/IR/Metadata.h	/^    MDLocationKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDMap	include/IR/ValueMap.h	/^  std::unique_ptr<MDMapT> MDMap;$/;"	m	class:llvm::ValueMap
MDMapT	include/IR/ValueMap.h	/^  typedef DenseMap<const Metadata *, TrackingMDRef> MDMapT;$/;"	t	class:llvm::ValueMap
MDNamespace	include/IR/DebugInfoMetadata.h	/^  MDNamespace(LLVMContext &Context, StorageType Storage, unsigned Line,$/;"	f	class:llvm::MDNamespace
MDNamespace	include/IR/DebugInfoMetadata.h	/^class MDNamespace : public MDScope {$/;"	c	namespace:llvm
MDNamespaceKind	include/IR/Metadata.h	/^    MDNamespaceKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDNode	include/IR/Metadata.h	/^class MDNode : public Metadata {$/;"	c	namespace:llvm
MDObjCProperty	include/IR/DebugInfoMetadata.h	/^  MDObjCProperty(LLVMContext &C, StorageType Storage, unsigned Line,$/;"	f	class:llvm::MDObjCProperty
MDObjCProperty	include/IR/DebugInfoMetadata.h	/^class MDObjCProperty : public DebugNode {$/;"	c	namespace:llvm
MDObjCPropertyKind	include/IR/Metadata.h	/^    MDObjCPropertyKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDOperand	include/IR/Metadata.h	/^  MDOperand() : MD(nullptr) {}$/;"	f	class:llvm::MDOperand
MDOperand	include/IR/Metadata.h	/^class MDOperand {$/;"	c	namespace:llvm
MDScope	include/IR/DebugInfoMetadata.h	/^  MDScope(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDScope
MDScope	include/IR/DebugInfoMetadata.h	/^class MDScope : public DebugNode {$/;"	c	namespace:llvm
MDString	include/IR/Metadata.h	/^  MDString() : Metadata(MDStringKind, Uniqued), Entry(nullptr) {}$/;"	f	class:llvm::MDString
MDString	include/IR/Metadata.h	/^  MDString(MDString &&) : Metadata(MDStringKind, Uniqued) {}$/;"	f	class:llvm::MDString
MDString	include/IR/Metadata.h	/^class MDString : public Metadata {$/;"	c	namespace:llvm
MDStringKind	include/IR/Metadata.h	/^    MDStringKind$/;"	e	enum:llvm::Metadata::MetadataKind
MDSubprogram	include/IR/DebugInfoMetadata.h	/^  MDSubprogram(LLVMContext &C, StorageType Storage, unsigned Line,$/;"	f	class:llvm::MDSubprogram
MDSubprogram	include/IR/DebugInfoMetadata.h	/^class MDSubprogram : public MDLocalScope {$/;"	c	namespace:llvm
MDSubprogramKind	include/IR/Metadata.h	/^    MDSubprogramKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDSubrange	include/IR/DebugInfoMetadata.h	/^  MDSubrange(LLVMContext &C, StorageType Storage, int64_t Count, int64_t Lo)$/;"	f	class:llvm::MDSubrange
MDSubrange	include/IR/DebugInfoMetadata.h	/^class MDSubrange : public DebugNode {$/;"	c	namespace:llvm
MDSubrangeKind	include/IR/Metadata.h	/^    MDSubrangeKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDSubroutineType	include/IR/DebugInfoMetadata.h	/^  MDSubroutineType(LLVMContext &C, StorageType Storage, unsigned Flags,$/;"	f	class:llvm::MDSubroutineType
MDSubroutineType	include/IR/DebugInfoMetadata.h	/^class MDSubroutineType : public MDCompositeTypeBase {$/;"	c	namespace:llvm
MDSubroutineTypeKind	include/IR/Metadata.h	/^    MDSubroutineTypeKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDTemplateParameter	include/IR/DebugInfoMetadata.h	/^  MDTemplateParameter(LLVMContext &Context, unsigned ID, StorageType Storage,$/;"	f	class:llvm::MDTemplateParameter
MDTemplateParameter	include/IR/DebugInfoMetadata.h	/^class MDTemplateParameter : public DebugNode {$/;"	c	namespace:llvm
MDTemplateTypeParameter	include/IR/DebugInfoMetadata.h	/^  MDTemplateTypeParameter(LLVMContext &Context, StorageType Storage,$/;"	f	class:llvm::MDTemplateTypeParameter
MDTemplateTypeParameter	include/IR/DebugInfoMetadata.h	/^class MDTemplateTypeParameter : public MDTemplateParameter {$/;"	c	namespace:llvm
MDTemplateTypeParameterKind	include/IR/Metadata.h	/^    MDTemplateTypeParameterKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDTemplateValueParameter	include/IR/DebugInfoMetadata.h	/^  MDTemplateValueParameter(LLVMContext &Context, StorageType Storage,$/;"	f	class:llvm::MDTemplateValueParameter
MDTemplateValueParameter	include/IR/DebugInfoMetadata.h	/^class MDTemplateValueParameter : public MDTemplateParameter {$/;"	c	namespace:llvm
MDTemplateValueParameterKind	include/IR/Metadata.h	/^    MDTemplateValueParameterKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDTuple	include/IR/Metadata.h	/^  MDTuple(LLVMContext &C, StorageType Storage, unsigned Hash,$/;"	f	class:llvm::MDTuple
MDTuple	include/IR/Metadata.h	/^class MDTuple : public MDNode {$/;"	c	namespace:llvm
MDTupleKind	include/IR/Metadata.h	/^    MDTupleKind,$/;"	e	enum:llvm::Metadata::MetadataKind
MDType	include/IR/DebugInfoMetadata.h	/^  MDType(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDType
MDType	include/IR/DebugInfoMetadata.h	/^class MDType : public MDScope {$/;"	c	namespace:llvm
MDVariable	include/IR/DebugInfoMetadata.h	/^  MDVariable(LLVMContext &C, unsigned ID, StorageType Storage, unsigned Tag,$/;"	f	class:llvm::MDVariable
MDVariable	include/IR/DebugInfoMetadata.h	/^class MDVariable : public DebugNode {$/;"	c	namespace:llvm
MD_alias_scope	include/IR/LLVMContext.h	/^    MD_alias_scope = 7, \/\/ "alias.scope"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_dbg	include/IR/LLVMContext.h	/^    MD_dbg = 0,  \/\/ "dbg"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_fpmath	include/IR/LLVMContext.h	/^    MD_fpmath = 3,  \/\/ "fpmath"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_invariant_load	include/IR/LLVMContext.h	/^    MD_invariant_load = 6, \/\/ "invariant.load"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_mem_parallel_loop_access	include/IR/LLVMContext.h	/^    MD_mem_parallel_loop_access = 10, \/\/ "llvm.mem.parallel_loop_access"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_noalias	include/IR/LLVMContext.h	/^    MD_noalias = 8, \/\/ "noalias",$/;"	e	enum:llvm::LLVMContext::__anon8
MD_nonnull	include/IR/LLVMContext.h	/^    MD_nonnull = 11 \/\/ "nonnull"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_nontemporal	include/IR/LLVMContext.h	/^    MD_nontemporal = 9, \/\/ "nontemporal"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_prof	include/IR/LLVMContext.h	/^    MD_prof = 2,  \/\/ "prof"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_range	include/IR/LLVMContext.h	/^    MD_range = 4, \/\/ "range"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_tbaa	include/IR/LLVMContext.h	/^    MD_tbaa = 1, \/\/ "tbaa"$/;"	e	enum:llvm::LLVMContext::__anon8
MD_tbaa_struct	include/IR/LLVMContext.h	/^    MD_tbaa_struct = 5, \/\/ "tbaa.struct"$/;"	e	enum:llvm::LLVMContext::__anon8
MI	include/corelab/Utilities/ProfileInfo.h	/^    ProfileInfoT<MachineFunction, MachineBasicBlock> *MI() {$/;"	f	class:llvm::ProfileInfoT
MIN_CNTX_LV	include/corelab/CAMP/campCommon.h	19;"	d
MIN_CNTX_LV	lib/CAMP/campCommon.h	19;"	d
MIN_INT_BITS	include/IR/DerivedTypes.h	/^    MIN_INT_BITS = 1,        \/\/\/< Minimum number of bits that can be specified$/;"	e	enum:llvm::IntegerType::__anon10
MMX	include/IR/Intrinsics.h	/^      Void, VarArg, MMX, Metadata, Half, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
MM_ELF	include/IR/DataLayout.h	/^    MM_ELF,$/;"	e	enum:llvm::DataLayout::ManglingModeT
MM_MachO	include/IR/DataLayout.h	/^    MM_MachO,$/;"	e	enum:llvm::DataLayout::ManglingModeT
MM_Mips	include/IR/DataLayout.h	/^    MM_Mips$/;"	e	enum:llvm::DataLayout::ManglingModeT
MM_None	include/IR/DataLayout.h	/^    MM_None,$/;"	e	enum:llvm::DataLayout::ManglingModeT
MM_WinCOFF	include/IR/DataLayout.h	/^    MM_WinCOFF,$/;"	e	enum:llvm::DataLayout::ManglingModeT
MM_WinCOFFX86	include/IR/DataLayout.h	/^    MM_WinCOFFX86,$/;"	e	enum:llvm::DataLayout::ManglingModeT
MODIFICATION_MSG	include/IR/LegacyPassManagers.h	/^  MODIFICATION_MSG, \/\/ "Made Modification '" + PassName$/;"	e	enum:llvm::PassDebuggingString
MSP430_INTR	include/IR/CallingConv.h	/^    MSP430_INTR = 69,$/;"	e	enum:llvm::CallingConv::__anon7
MachineProfile	include/corelab/Utilities/ProfileInfo.h	/^    ProfileInfoT<MachineFunction, MachineBasicBlock> *MachineProfile;$/;"	m	class:llvm::ProfileInfoT
MachineProfileInfo	include/corelab/Utilities/ProfileInfo.h	/^  typedef ProfileInfoT<MachineFunction, MachineBasicBlock> MachineProfileInfo;$/;"	t	namespace:llvm
Mangler	include/IR/Mangler.h	/^  Mangler(const DataLayout *DL) : DL(DL), NextAnonGlobalID(1) {}$/;"	f	class:llvm::Mangler
Mangler	include/IR/Mangler.h	/^class Mangler {$/;"	c	namespace:llvm
ManglerPrefixTy	include/IR/Mangler.h	/^  enum ManglerPrefixTy {$/;"	g	class:llvm::Mangler
ManglingMode	include/IR/DataLayout.h	/^  ManglingModeT ManglingMode;$/;"	m	class:llvm::DataLayout
ManglingModeT	include/IR/DataLayout.h	/^  enum ManglingModeT {$/;"	g	class:llvm::DataLayout
Map	include/IR/ValueMap.h	/^  MapT Map;$/;"	m	class:llvm::ValueMap
Map	include/IR/ValueMap.h	/^  ValueMapT *Map;$/;"	m	class:llvm::ValueMapCallbackVH
MapT	include/IR/ValueMap.h	/^  typedef DenseMap<ValueMapCVH, ValueT, DenseMapInfo<ValueMapCVH> > MapT;$/;"	t	class:llvm::ValueMap
Matching	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::unordered_map<IndirectCall, CandidateFunctions> Matching; \/\/ 1:m (one to many matching)$/;"	t	class:corelab::IndirectCallAnal
Matching	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			typedef std::map<IndirectCall, CandidateFunctions> Matching; \/\/ 1:m (one to many matching)$/;"	t	class:corelab::IndirectCallAnal
MatchingInput	include/IR/InlineAsm.h	/^    signed char MatchingInput;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
MatchingInput	include/IR/InlineAsm.h	/^    signed char MatchingInput;$/;"	m	struct:llvm::InlineAsm::SubConstraintInfo
Materializer	include/IR/Module.h	/^  Materializer;                   \/\/\/< Used to materialize GlobalValues$/;"	m	class:llvm::Module
Max	include/IR/Instructions.h	/^    Max,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
MaxAlignmentExponent	include/IR/Value.h	/^  static const unsigned MaxAlignmentExponent = 29;$/;"	m	class:llvm::Value
MaxMin_match	include/IR/PatternMatch.h	/^  MaxMin_match(const LHS_t &LHS, const RHS_t &RHS) : L(LHS), R(RHS) {}$/;"	f	struct:llvm::PatternMatch::MaxMin_match
MaxMin_match	include/IR/PatternMatch.h	/^struct MaxMin_match {$/;"	s	namespace:llvm::PatternMatch
MaximumAlignment	include/IR/Value.h	/^  static const unsigned MaximumAlignment = 1u << MaxAlignmentExponent;$/;"	m	class:llvm::Value
MemCpyInst	include/IR/IntrinsicInst.h	/^  class MemCpyInst : public MemTransferInst {$/;"	c	namespace:llvm
MemIntrinsic	include/IR/IntrinsicInst.h	/^  class MemIntrinsic : public IntrinsicInst {$/;"	c	namespace:llvm
MemMoveInst	include/IR/IntrinsicInst.h	/^  class MemMoveInst : public MemTransferInst {$/;"	c	namespace:llvm
MemSetInst	include/IR/IntrinsicInst.h	/^  class MemSetInst : public MemIntrinsic {$/;"	c	namespace:llvm
MemTransferInst	include/IR/IntrinsicInst.h	/^  class MemTransferInst : public MemIntrinsic {$/;"	c	namespace:llvm
MemberOffsets	include/IR/DataLayout.h	/^  uint64_t MemberOffsets[1]; \/\/ variable sized array!$/;"	m	class:llvm::StructLayout
Memory	include/IR/PredIteratorCache.h	/^    BumpPtrAllocator Memory;$/;"	m	class:llvm::PredIteratorCache
MemoryOps	include/IR/Instruction.h	/^  enum MemoryOps {$/;"	g	class:llvm::Instruction
Metadata	include/IR/Intrinsics.h	/^      Void, VarArg, MMX, Metadata, Half, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
Metadata	include/IR/Metadata.h	/^  Metadata(unsigned ID, StorageType Storage)$/;"	f	class:llvm::Metadata
Metadata	include/IR/Metadata.h	/^class Metadata {$/;"	c	namespace:llvm
MetadataAsValue	include/IR/Metadata.h	/^class MetadataAsValue : public Value {$/;"	c	namespace:llvm
MetadataAsValueVal	include/IR/Value.h	/^    MetadataAsValueVal,       \/\/ This is an instance of MetadataAsValue$/;"	e	enum:llvm::Value::ValueTy
MetadataKind	include/IR/Metadata.h	/^  enum MetadataKind {$/;"	g	class:llvm::Metadata
MetadataNode	include/corelab/Metadata/NamedMetadata.h	/^			typedef struct MetadataNode {$/;"	s	class:corelab::EsperantoNamer
MetadataNode	include/corelab/Metadata/NamedMetadata.h	/^			} MetadataNode;$/;"	t	class:corelab::EsperantoNamer	typeref:struct:corelab::EsperantoNamer::MetadataNode
MetadataTracking	include/IR/MetadataTracking.h	/^class MetadataTracking {$/;"	c	namespace:llvm
MetadataTyID	include/IR/Type.h	/^    MetadataTyID,    \/\/\/<  8: Metadata$/;"	e	enum:llvm::Type::TypeID
MetadataVersion	include/IR/DiagnosticInfo.h	/^  unsigned MetadataVersion;$/;"	m	class:llvm::DiagnosticInfoDebugMetadataVersion
Min	include/IR/Instructions.h	/^    Min,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
MinSize	include/IR/Attributes.h	/^    MinSize,               \/\/\/< Function must be optimized for size first$/;"	e	enum:llvm::Attribute::AttrKind
MissingValue	include/corelab/Utilities/ProfileInfo.h	/^    static const double MissingValue;$/;"	m	class:llvm::ProfileInfoT
ModFlagBehavior	include/IR/Module.h	/^  enum ModFlagBehavior {$/;"	g	class:llvm::Module
ModFlagBehaviorFirstVal	include/IR/Module.h	/^    ModFlagBehaviorFirstVal = Error,$/;"	e	enum:llvm::Module::ModFlagBehavior
ModFlagBehaviorLastVal	include/IR/Module.h	/^    ModFlagBehaviorLastVal = AppendUnique$/;"	e	enum:llvm::Module::ModFlagBehavior
Module	include/IR/Module.h	/^class Module {$/;"	c	namespace:llvm
ModuleAnalysisManager	include/IR/PassManager.h	/^typedef AnalysisManager<Module> ModuleAnalysisManager;$/;"	t	namespace:llvm
ModuleAnalysisManagerFunctionProxy	include/IR/PassManager.h	/^  ModuleAnalysisManagerFunctionProxy($/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy
ModuleAnalysisManagerFunctionProxy	include/IR/PassManager.h	/^  ModuleAnalysisManagerFunctionProxy(ModuleAnalysisManagerFunctionProxy &&Arg)$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy
ModuleAnalysisManagerFunctionProxy	include/IR/PassManager.h	/^  ModuleAnalysisManagerFunctionProxy(const ModuleAnalysisManager &MAM)$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy
ModuleAnalysisManagerFunctionProxy	include/IR/PassManager.h	/^class ModuleAnalysisManagerFunctionProxy {$/;"	c	namespace:llvm
ModuleFlagEntry	include/IR/Module.h	/^    ModuleFlagEntry(ModFlagBehavior B, MDString *K, Metadata *V)$/;"	f	struct:llvm::Module::ModuleFlagEntry
ModuleFlagEntry	include/IR/Module.h	/^  struct ModuleFlagEntry {$/;"	s	class:llvm::Module
ModuleID	include/IR/Module.h	/^  std::string ModuleID;           \/\/\/< Human readable identifier for the module$/;"	m	class:llvm::Module
ModulePassManager	include/IR/PassManager.h	/^typedef PassManager<Module> ModulePassManager;$/;"	t	namespace:llvm
ModuleToFunctionPassAdaptor	include/IR/PassManager.h	/^  ModuleToFunctionPassAdaptor(ModuleToFunctionPassAdaptor &&Arg)$/;"	f	class:llvm::ModuleToFunctionPassAdaptor
ModuleToFunctionPassAdaptor	include/IR/PassManager.h	/^  ModuleToFunctionPassAdaptor(const ModuleToFunctionPassAdaptor &Arg)$/;"	f	class:llvm::ModuleToFunctionPassAdaptor
ModuleToFunctionPassAdaptor	include/IR/PassManager.h	/^  explicit ModuleToFunctionPassAdaptor(FunctionPassT Pass)$/;"	f	class:llvm::ModuleToFunctionPassAdaptor
ModuleToFunctionPassAdaptor	include/IR/PassManager.h	/^template <typename FunctionPassT> class ModuleToFunctionPassAdaptor {$/;"	c	namespace:llvm
Monotonic	include/IR/Instructions.h	/^  Monotonic = 2,$/;"	e	enum:llvm::AtomicOrdering
Msg	include/IR/DiagnosticInfo.h	/^  const Twine &Msg;$/;"	m	class:llvm::DiagnosticInfoOptimizationBase
Msg	include/IR/DiagnosticInfo.h	/^  const Twine &Msg;$/;"	m	class:llvm::DiagnosticInfoSampleProfile
MsgStr	include/IR/DiagnosticInfo.h	/^  const Twine &MsgStr;$/;"	m	class:llvm::DiagnosticInfoInlineAsm
MulOperator	include/IR/Operator.h	/^class MulOperator$/;"	c	namespace:llvm
N_SHIFT_FOR_ONE_ELEM	tools/camp/ShadowMemory.hpp	26;"	d
N_SHIFT_FOR_ONE_ELEM	tools/campSampling/ShadowMemory.hpp	26;"	d
N_SHIFT_FOR_ONE_ELEM	tools/objtrace/ShadowMemory.hpp	26;"	d
N_SHIFT_FOR_ONE_SIZE_T	tools/camp/ShadowMemory.hpp	27;"	d
N_SHIFT_FOR_ONE_SIZE_T	tools/campSampling/ShadowMemory.hpp	27;"	d
N_SHIFT_FOR_ONE_SIZE_T	tools/objtrace/ShadowMemory.hpp	27;"	d
Naked	include/IR/Attributes.h	/^    Naked,                 \/\/\/< Naked function$/;"	e	enum:llvm::Attribute::AttrKind
Name	include/IR/Comdat.h	/^  StringMapEntry<Comdat> *Name;$/;"	m	class:llvm::Comdat
Name	include/IR/Metadata.h	/^  std::string Name;$/;"	m	class:llvm::NamedMDNode
NameAndIsUsedByMD	include/IR/Value.h	/^  PointerIntPair<ValueName *, 1> NameAndIsUsedByMD;$/;"	m	class:llvm::Value
NamedMDList	include/IR/Module.h	/^  NamedMDListType NamedMDList;    \/\/\/< The named metadata in the module$/;"	m	class:llvm::Module
NamedMDListType	include/IR/Module.h	/^  typedef ilist<NamedMDNode> NamedMDListType;$/;"	t	class:llvm::Module
NamedMDNode	include/IR/Metadata.h	/^class NamedMDNode : public ilist_node<NamedMDNode> {$/;"	c	namespace:llvm
NamedMDSymTab	include/IR/Module.h	/^  void *NamedMDSymTab;            \/\/\/< NamedMDNode names.$/;"	m	class:llvm::Module
Namer	include/corelab/Metadata/Metadata.h	/^	class Namer: public ModulePass$/;"	c	namespace:corelab
Namer	lib/Metadata/Namer.cpp	/^	Namer::Namer() : ModulePass(ID) {}$/;"	f	class:corelab::Namer
Nand	include/IR/Instructions.h	/^    Nand,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
Nest	include/IR/Attributes.h	/^    Nest,                  \/\/\/< Nested function static chain$/;"	e	enum:llvm::Attribute::AttrKind
Next	include/IR/Constants.h	/^  ConstantDataSequential *Next;$/;"	m	class:llvm::ConstantDataSequential
Next	include/IR/Use.h	/^  Use *Next;$/;"	m	class:llvm::Use
Next	include/IR/ValueHandle.h	/^  ValueHandleBase *Next;$/;"	m	class:llvm::ValueHandleBase
NextAnonGlobalID	include/IR/Mangler.h	/^  mutable unsigned NextAnonGlobalID;$/;"	m	class:llvm::Mangler
NextIndex	include/IR/Metadata.h	/^  uint64_t NextIndex;$/;"	m	class:llvm::ReplaceableMetadataImpl
No	include/IR/Metadata.h	/^  typedef char No[2];$/;"	t	struct:llvm::mdconst::detail::HasDereference
NoAlias	include/IR/Attributes.h	/^    NoAlias,               \/\/\/< Considered to not alias after call$/;"	e	enum:llvm::Attribute::AttrKind
NoAlias	include/IR/Metadata.h	/^  MDNode *NoAlias;$/;"	m	struct:llvm::AAMDNodes
NoBuiltin	include/IR/Attributes.h	/^    NoBuiltin,             \/\/\/< Callee isn't recognized as a builtin$/;"	e	enum:llvm::Attribute::AttrKind
NoCapture	include/IR/Attributes.h	/^    NoCapture,             \/\/\/< Function creates no aliases of pointer$/;"	e	enum:llvm::Attribute::AttrKind
NoDuplicate	include/IR/Attributes.h	/^    NoDuplicate,           \/\/\/< Call cannot be duplicated$/;"	e	enum:llvm::Attribute::AttrKind
NoDuplicates	include/IR/Comdat.h	/^    NoDuplicates, \/\/\/< No other Module may specify this COMDAT.$/;"	e	enum:llvm::Comdat::SelectionKind
NoFolder	include/IR/NoFolder.h	/^  explicit NoFolder() {}$/;"	f	class:llvm::NoFolder
NoFolder	include/IR/NoFolder.h	/^class NoFolder {$/;"	c	namespace:llvm
NoImplicitFloat	include/IR/Attributes.h	/^    NoImplicitFloat,       \/\/\/< Disable implicit floating point insts$/;"	e	enum:llvm::Attribute::AttrKind
NoInfs	include/IR/Operator.h	/^    NoInfs          = (1 << 2),$/;"	e	enum:llvm::FastMathFlags::__anon21
NoInline	include/IR/Attributes.h	/^    NoInline,              \/\/\/< inline=never$/;"	e	enum:llvm::Attribute::AttrKind
NoNaNs	include/IR/Operator.h	/^    NoNaNs          = (1 << 1),$/;"	e	enum:llvm::FastMathFlags::__anon21
NoRedZone	include/IR/Attributes.h	/^    NoRedZone,             \/\/\/< Disable redzone$/;"	e	enum:llvm::Attribute::AttrKind
NoRelocation	include/IR/Constant.h	/^    NoRelocation = 0,$/;"	e	enum:llvm::Constant::PossibleRelocationsTy
NoReturn	include/IR/Attributes.h	/^    NoReturn,              \/\/\/< Mark the function as not returning$/;"	e	enum:llvm::Attribute::AttrKind
NoSignedWrap	include/IR/Operator.h	/^    NoSignedWrap   = (1 << 1)$/;"	e	enum:llvm::OverflowingBinaryOperator::__anon19
NoSignedZeros	include/IR/Operator.h	/^    NoSignedZeros   = (1 << 3),$/;"	e	enum:llvm::FastMathFlags::__anon21
NoUnsignedWrap	include/IR/Operator.h	/^    NoUnsignedWrap = (1 << 0),$/;"	e	enum:llvm::OverflowingBinaryOperator::__anon19
NoUnwind	include/IR/Attributes.h	/^    NoUnwind,              \/\/\/< Function doesn't unwind stack$/;"	e	enum:llvm::Attribute::AttrKind
Node	include/IR/Metadata.h	/^    const NamedMDNode *Node;$/;"	m	class:llvm::NamedMDNode::op_iterator_impl
NodeType	include/IR/CFG.h	/^  typedef BasicBlock NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	include/IR/CFG.h	/^  typedef const BasicBlock NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	include/IR/Dominators.h	/^  typedef DomTreeNode NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	include/IR/Type.h	/^  typedef Type NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	include/IR/Type.h	/^  typedef const Type NodeType;$/;"	t	struct:llvm::GraphTraits
NodesSeen	include/IR/DebugInfo.h	/^  SmallPtrSet<MDNode *, 64> NodesSeen;$/;"	m	class:llvm::DebugInfoFinder
NonLazyBind	include/IR/Attributes.h	/^    NonLazyBind,           \/\/\/< Function is called early and\/or$/;"	e	enum:llvm::Attribute::AttrKind
NonNull	include/IR/Attributes.h	/^    NonNull,               \/\/\/< Pointer is known to be not null$/;"	e	enum:llvm::Attribute::AttrKind
NonRecursiveFuncList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::unordered_set<const Function *> NonRecursiveFuncList;$/;"	t	class:corelab::RecursiveFuncAnal
NonRecursiveFuncList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::unordered_set<const Function *> NonRecursiveFuncList;$/;"	t	class:corelab::RecursiveFuncAnal
None	include/IR/Attributes.h	/^    None,                  \/\/\/< No attributes have been set$/;"	e	enum:llvm::Attribute::AttrKind
NotAtomic	include/IR/Instructions.h	/^  NotAtomic = 0,$/;"	e	enum:llvm::AtomicOrdering
NotThreadLocal	include/IR/GlobalValue.h	/^    NotThreadLocal = 0,$/;"	e	enum:llvm::GlobalValue::ThreadLocalMode
NumContainedTys	include/IR/Type.h	/^  unsigned NumContainedTys;$/;"	m	class:llvm::Type
NumElements	include/IR/DataLayout.h	/^  unsigned NumElements;$/;"	m	class:llvm::StructLayout
NumElements	include/IR/DerivedTypes.h	/^  uint64_t NumElements;$/;"	m	class:llvm::ArrayType
NumElements	include/IR/DerivedTypes.h	/^  unsigned NumElements;$/;"	m	class:llvm::VectorType
NumLoopCarriedDepMap	include/corelab/CAMP/RegiInterIterDepFinder.h	/^	typedef std::map<LoopID, unsigned> NumLoopCarriedDepMap;\/\/inverse of LoopIdOf$/;"	t	namespace:corelab
NumLoopCarriedDepMap	lib/CAMP/RegiInterIterDepFinder.h	/^	typedef std::map<LoopID, unsigned> NumLoopCarriedDepMap;\/\/inverse of LoopIdOf$/;"	t	namespace:corelab
NumLowBitsAvailable	include/IR/Instruction.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon14
NumLowBitsAvailable	include/IR/Use.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon23
NumLowBitsAvailable	include/IR/Value.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon24
NumLowBitsAvailable	include/IR/ValueHandle.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon9
NumOperands	include/IR/Metadata.h	/^  unsigned NumOperands;$/;"	m	class:llvm::MDNode
NumOperands	include/IR/Value.h	/^  unsigned NumOperands;$/;"	m	class:llvm::Value
NumUnresolved	include/IR/Metadata.h	/^  unsigned NumUnresolved;$/;"	m	class:llvm::MDNode
OESI	include/corelab/Metadata/typedefs.h	/^  typedef OutEdgeSet::const_iterator            OESI;$/;"	t	namespace:corelab
ON_BASICBLOCK_MSG	include/IR/LegacyPassManagers.h	/^  ON_BASICBLOCK_MSG, \/\/ "' on BasicBlock '" + InstructionName + "'...\\n"$/;"	e	enum:llvm::PassDebuggingString
ON_CG_MSG	include/IR/LegacyPassManagers.h	/^  ON_CG_MSG \/\/ "' on Call Graph Nodes '" + Msg + "'...\\n'"$/;"	e	enum:llvm::PassDebuggingString
ON_FUNCTION_MSG	include/IR/LegacyPassManagers.h	/^  ON_FUNCTION_MSG, \/\/ "' on Function '" + FunctionName + "'...\\n"$/;"	e	enum:llvm::PassDebuggingString
ON_LOOP_MSG	include/IR/LegacyPassManagers.h	/^  ON_LOOP_MSG, \/\/ "' on Loop '" + Msg + "'...\\n'"$/;"	e	enum:llvm::PassDebuggingString
ON_MODULE_MSG	include/IR/LegacyPassManagers.h	/^  ON_MODULE_MSG, \/\/ "' on Module '" + ModuleName + "'...\\n"$/;"	e	enum:llvm::PassDebuggingString
ON_REGION_MSG	include/IR/LegacyPassManagers.h	/^  ON_REGION_MSG, \/\/ "' on Region '" + Msg + "'...\\n'"$/;"	e	enum:llvm::PassDebuggingString
OS	include/IR/Dominators.h	/^  raw_ostream &OS;$/;"	m	class:llvm::DominatorTreePrinterPass
OS	include/IR/IRPrintingPasses.h	/^  raw_ostream &OS;$/;"	m	class:llvm::PrintFunctionPass
OS	include/IR/IRPrintingPasses.h	/^  raw_ostream &OS;$/;"	m	class:llvm::PrintModulePass
OUT	include/corelab/CAMP/campCommon.h	15;"	d
OUT	lib/CAMP/campCommon.h	15;"	d
ObjComdat	include/IR/GlobalObject.h	/^  Comdat *ObjComdat;$/;"	m	class:llvm::GlobalObject
ObjTrace	include/corelab/ObjTrace/ObjTrace.h	/^      ObjTrace() : ModulePass(ID) {}$/;"	f	class:corelab::ObjTrace
ObjTrace	include/corelab/ObjTrace/ObjTrace.h	/^  class ObjTrace : public ModulePass {$/;"	c	namespace:corelab
ObjTrace	lib/ObjTrace/ObjTrace.h	/^      ObjTrace() : ModulePass(ID) {}$/;"	f	class:corelab::ObjTrace
ObjTrace	lib/ObjTrace/ObjTrace.h	/^  class ObjTrace : public ModulePass {$/;"	c	namespace:corelab
Offset	include/IR/MDBuilder.h	/^    uint64_t Offset;$/;"	m	struct:llvm::MDBuilder::TBAAStructField
OffsetInBits	include/IR/DebugInfoMetadata.h	/^  uint64_t OffsetInBits;$/;"	m	class:llvm::MDType
OneUse_match	include/IR/PatternMatch.h	/^  OneUse_match(const SubPattern_t &SP) : SubPattern(SP) {}$/;"	f	struct:llvm::PatternMatch::OneUse_match
OneUse_match	include/IR/PatternMatch.h	/^template <typename SubPattern_t> struct OneUse_match {$/;"	s	namespace:llvm::PatternMatch
OnlyNamed	include/IR/TypeFinder.h	/^  bool OnlyNamed;$/;"	m	class:llvm::TypeFinder
Op	include/IR/DebugInfoMetadata.h	/^    ExprOperand Op;$/;"	m	class:llvm::MDExpression::expr_op_iterator
Op	include/IR/DebugInfoMetadata.h	/^    const uint64_t *Op;$/;"	m	class:llvm::MDExpression::ExprOperand
Op	include/IR/PatternMatch.h	/^  Op_t Op;$/;"	m	struct:llvm::PatternMatch::CastClass_match
Op	include/IR/User.h	/^  template <int Idx> Use &Op() {$/;"	f	class:llvm::User
Op	include/IR/User.h	/^  template <int Idx> const Use &Op() const {$/;"	f	class:llvm::User
OpFrom	include/IR/User.h	/^  template <int Idx, typename U> static Use &OpFrom(const U *that) {$/;"	f	class:llvm::User
OpI	include/IR/PatternMatch.h	/^  unsigned OpI;$/;"	m	struct:llvm::PatternMatch::Argument_match
OpIt	include/IR/GetElementPtrTypeIterator.h	/^    ItTy OpIt;$/;"	m	class:llvm::generic_gep_type_iterator
Operand	include/IR/DebugInfo.h	/^    Operand() {}$/;"	f	class:llvm::DIExpression::Operand
Operand	include/IR/DebugInfo.h	/^    Operand(MDExpression::element_iterator I) : I(I) {}$/;"	f	class:llvm::DIExpression::Operand
Operand	include/IR/DebugInfo.h	/^  class Operand {$/;"	c	class:llvm::DIExpression
OperandList	include/IR/User.h	/^  Use *OperandList;$/;"	m	class:llvm::User
OperandTraits	include/IR/Constants.h	/^struct OperandTraits<BlockAddress> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Constants.h	/^struct OperandTraits<ConstantArray> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Constants.h	/^struct OperandTraits<ConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Constants.h	/^struct OperandTraits<ConstantStruct> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Constants.h	/^struct OperandTraits<ConstantVector> :$/;"	s	namespace:llvm
OperandTraits	include/IR/GlobalAlias.h	/^struct OperandTraits<GlobalAlias> :$/;"	s	namespace:llvm
OperandTraits	include/IR/GlobalVariable.h	/^struct OperandTraits<GlobalVariable> :$/;"	s	namespace:llvm
OperandTraits	include/IR/InstrTypes.h	/^struct OperandTraits<BinaryOperator> :$/;"	s	namespace:llvm
OperandTraits	include/IR/InstrTypes.h	/^struct OperandTraits<CmpInst> : public FixedNumOperandTraits<CmpInst, 2> {$/;"	s	namespace:llvm
OperandTraits	include/IR/InstrTypes.h	/^struct OperandTraits<UnaryInstruction> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<AtomicCmpXchgInst> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<AtomicRMWInst>$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<BranchInst> : public VariadicOperandTraits<BranchInst, 1> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<CallInst> : public VariadicOperandTraits<CallInst, 1> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<ExtractElementInst> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<GetElementPtrInst> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<IndirectBrInst> : public HungoffOperandTraits<1> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<InsertElementInst> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<InsertValueInst> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<InvokeInst> : public VariadicOperandTraits<InvokeInst, 3> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<LandingPadInst> : public HungoffOperandTraits<2> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<PHINode> : public HungoffOperandTraits<2> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<ResumeInst> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<ReturnInst> : public VariadicOperandTraits<ReturnInst> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<SelectInst> : public FixedNumOperandTraits<SelectInst, 3> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<ShuffleVectorInst> :$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<StoreInst> : public FixedNumOperandTraits<StoreInst, 2> {$/;"	s	namespace:llvm
OperandTraits	include/IR/Instructions.h	/^struct OperandTraits<SwitchInst> : public HungoffOperandTraits<2> {$/;"	s	namespace:llvm
Operands	include/IR/Metadata.h	/^  void *Operands; \/\/ SmallVector<TrackingMDRef, 4>$/;"	m	class:llvm::NamedMDNode
OperationEquivalenceFlags	include/IR/Instruction.h	/^  enum OperationEquivalenceFlags {$/;"	g	class:llvm::Instruction
Operator	include/IR/Operator.h	/^class Operator : public User {$/;"	c	namespace:llvm
OptimizeForSize	include/IR/Attributes.h	/^    OptimizeForSize,       \/\/\/< opt_size$/;"	e	enum:llvm::Attribute::AttrKind
OptimizeNone	include/IR/Attributes.h	/^    OptimizeNone,          \/\/\/< Function must not be optimized.$/;"	e	enum:llvm::Attribute::AttrKind
OptionalOperandTraits	include/IR/OperandTraits.h	/^struct OptionalOperandTraits : public FixedNumOperandTraits<SubClass, ARITY> {$/;"	s	namespace:llvm
Or	include/IR/Instructions.h	/^    Or,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
OtherOps	include/IR/Instruction.h	/^  enum OtherOps {$/;"	g	class:llvm::Instruction
OutEdge	include/corelab/Metadata/typedefs.h	/^  typedef std::pair<TerminatorInst *, unsigned> OutEdge;$/;"	t	namespace:corelab
OutEdgeList	include/corelab/Metadata/typedefs.h	/^  typedef std::vector<OutEdge>                  OutEdgeList;$/;"	t	namespace:corelab
OutEdgeSet	include/corelab/Metadata/typedefs.h	/^  typedef DenseSet<OutEdge>                     OutEdgeSet;$/;"	t	namespace:corelab
OverflowingBinaryOp_match	include/IR/PatternMatch.h	/^  OverflowingBinaryOp_match(const LHS_t &LHS, const RHS_t &RHS)$/;"	f	struct:llvm::PatternMatch::OverflowingBinaryOp_match
OverflowingBinaryOp_match	include/IR/PatternMatch.h	/^struct OverflowingBinaryOp_match {$/;"	s	namespace:llvm::PatternMatch
OverflowingBinaryOperator	include/IR/Operator.h	/^class OverflowingBinaryOperator : public Operator {$/;"	c	namespace:llvm
Override	include/IR/Module.h	/^    Override = 4,$/;"	e	enum:llvm::Module::ModFlagBehavior
OwnerTy	include/IR/Metadata.h	/^  typedef MetadataTracking::OwnerTy OwnerTy;$/;"	t	class:llvm::ReplaceableMetadataImpl
OwnerTy	include/IR/MetadataTracking.h	/^  typedef PointerUnion<MetadataAsValue *, Metadata *> OwnerTy;$/;"	t	class:llvm::MetadataTracking
P	include/IR/LegacyPassManagers.h	/^  Pass *P;$/;"	m	class:llvm::PassManagerPrettyStackEntry
PAGE_SIZE	tools/camp/ShadowMemory.hpp	24;"	d
PAGE_SIZE	tools/campSampling/ShadowMemory.hpp	24;"	d
PAGE_SIZE	tools/objtrace/ShadowMemory.hpp	24;"	d
PHINode	include/IR/Instructions.h	/^  PHINode(Type *Ty, unsigned NumReservedValues, const Twine &NameStr,$/;"	f	class:llvm::PHINode
PHINode	include/IR/Instructions.h	/^  explicit PHINode(Type *Ty, unsigned NumReservedValues,$/;"	f	class:llvm::PHINode
PHINode	include/IR/Instructions.h	/^class PHINode : public Instruction {$/;"	c	namespace:llvm
PM	include/IR/LegacyPassManager.h	/^  PassManagerImpl *PM;$/;"	m	class:llvm::legacy::PassManager
PMDataManager	include/IR/LegacyPassManagers.h	/^  explicit PMDataManager() : TPM(nullptr), Depth(0) {$/;"	f	class:llvm::PMDataManager
PMDataManager	include/IR/LegacyPassManagers.h	/^class PMDataManager {$/;"	c	namespace:llvm
PMStack	include/IR/LegacyPassManagers.h	/^class PMStack {$/;"	c	namespace:llvm
PMTopLevelManager	include/IR/LegacyPassManagers.h	/^class PMTopLevelManager {$/;"	c	namespace:llvm
PPC_FP128TyID	include/IR/Type.h	/^    PPC_FP128TyID,   \/\/\/<  6: 128-bit floating point type (two 64-bits, PowerPC)$/;"	e	enum:llvm::Type::TypeID
PT	include/IR/Instruction.h	/^  typedef Instruction* PT;$/;"	t	class:llvm::PointerLikeTypeTraits
PT	include/IR/Value.h	/^  typedef Value* PT;$/;"	t	class:llvm::PointerLikeTypeTraits
PTX_Device	include/IR/CallingConv.h	/^    PTX_Device = 72,$/;"	e	enum:llvm::CallingConv::__anon7
PTX_Kernel	include/IR/CallingConv.h	/^    PTX_Kernel = 71,$/;"	e	enum:llvm::CallingConv::__anon7
Parent	include/IR/Argument.h	/^  Function *Parent;$/;"	m	class:llvm::Argument
Parent	include/IR/BasicBlock.h	/^  Function *Parent;$/;"	m	class:llvm::BasicBlock
Parent	include/IR/GlobalValue.h	/^  Module *Parent;             \/\/ The containing module.$/;"	m	class:llvm::GlobalValue
Parent	include/IR/Instruction.h	/^  BasicBlock *Parent;$/;"	m	class:llvm::Instruction
Parent	include/IR/Metadata.h	/^  Module *Parent;$/;"	m	class:llvm::NamedMDNode
ParentTy	include/IR/Instructions.h	/^    typedef CaseIteratorT<SwitchInst, ConstantInt, BasicBlock> ParentTy;$/;"	t	class:llvm::SwitchInst::CaseIt
ParseConstraints	include/IR/InlineAsm.h	/^  ConstraintInfoVector ParseConstraints() const {$/;"	f	class:llvm::InlineAsm
Pass	include/IR/PassManager.h	/^  FunctionPassT Pass;$/;"	m	class:llvm::ModuleToFunctionPassAdaptor
Pass	include/IR/PassManagerInternal.h	/^  PassT Pass;$/;"	m	struct:llvm::detail::AnalysisPassModel
Pass	include/IR/PassManagerInternal.h	/^  PassT Pass;$/;"	m	struct:llvm::detail::PassModel
PassArgFilter	include/IR/LegacyPassNameParser.h	/^class PassArgFilter {$/;"	c	namespace:llvm
PassConcept	include/IR/PassManagerInternal.h	/^template <typename IRUnitT> struct PassConcept {$/;"	s	namespace:llvm::detail
PassConceptT	include/IR/PassManager.h	/^  typedef detail::AnalysisPassConcept<IRUnitT> PassConceptT;$/;"	t	class:llvm::detail::AnalysisManagerBase
PassConceptT	include/IR/PassManager.h	/^  typedef detail::PassConcept<IRUnitT> PassConceptT;$/;"	t	class:llvm::PassManager
PassConceptT	include/IR/PassManager.h	/^  typedef typename BaseT::PassConceptT PassConceptT;$/;"	t	class:llvm::AnalysisManager
PassDebuggingString	include/IR/LegacyPassManagers.h	/^enum PassDebuggingString {$/;"	g	namespace:llvm
PassID	include/IR/Dominators.h	/^  static char PassID;$/;"	m	class:llvm::DominatorTreeAnalysis
PassID	include/IR/PassManager.h	/^  static char PassID;$/;"	m	class:llvm::FunctionAnalysisManagerModuleProxy
PassID	include/IR/PassManager.h	/^  static char PassID;$/;"	m	class:llvm::ModuleAnalysisManagerFunctionProxy
PassManager	include/IR/LegacyPassManager.h	/^class PassManager : public PassManagerBase {$/;"	c	namespace:llvm::legacy
PassManager	include/IR/PassManager.h	/^  PassManager(PassManager &&Arg)$/;"	f	class:llvm::PassManager
PassManager	include/IR/PassManager.h	/^  PassManager(bool DebugLogging = false) : DebugLogging(DebugLogging) {}$/;"	f	class:llvm::PassManager
PassManager	include/IR/PassManager.h	/^template <typename IRUnitT> class PassManager {$/;"	c	namespace:llvm
PassManagerBase	include/IR/LegacyPassManager.h	/^class PassManagerBase {$/;"	c	namespace:llvm::legacy
PassManagerPrettyStackEntry	include/IR/LegacyPassManagers.h	/^  PassManagerPrettyStackEntry(Pass *p, Module &m)$/;"	f	class:llvm::PassManagerPrettyStackEntry
PassManagerPrettyStackEntry	include/IR/LegacyPassManagers.h	/^  PassManagerPrettyStackEntry(Pass *p, Value &v)$/;"	f	class:llvm::PassManagerPrettyStackEntry
PassManagerPrettyStackEntry	include/IR/LegacyPassManagers.h	/^  explicit PassManagerPrettyStackEntry(Pass *p)$/;"	f	class:llvm::PassManagerPrettyStackEntry
PassManagerPrettyStackEntry	include/IR/LegacyPassManagers.h	/^class PassManagerPrettyStackEntry : public PrettyStackTraceEntry {$/;"	c	namespace:llvm
PassManagers	include/IR/LegacyPassManagers.h	/^  SmallVector<PMDataManager *, 8> PassManagers;$/;"	m	class:llvm::PMTopLevelManager
PassModel	include/IR/PassManagerInternal.h	/^  PassModel(PassModel &&Arg) : Pass(std::move(Arg.Pass)) {}$/;"	f	struct:llvm::detail::PassModel
PassModel	include/IR/PassManagerInternal.h	/^  PassModel(const PassModel &Arg) : Pass(Arg.Pass) {}$/;"	f	struct:llvm::detail::PassModel
PassModel	include/IR/PassManagerInternal.h	/^  explicit PassModel(PassT Pass) : Pass(std::move(Pass)) {}$/;"	f	struct:llvm::detail::PassModel
PassModel	include/IR/PassManagerInternal.h	/^struct PassModel<IRUnitT, PassT, PreservedAnalysesT, false>$/;"	s	namespace:llvm::detail
PassModel	include/IR/PassManagerInternal.h	/^struct PassModel<IRUnitT, PassT, PreservedAnalysesT, true>$/;"	s	namespace:llvm::detail
PassName	include/IR/DiagnosticInfo.h	/^  const char *PassName;$/;"	m	class:llvm::DiagnosticInfoOptimizationBase
PassNameParser	include/IR/LegacyPassNameParser.h	/^class PassNameParser : public PassRegistrationListener,$/;"	c	namespace:llvm
PassRunAcceptsAnalysisManager	include/IR/PassManagerInternal.h	/^class PassRunAcceptsAnalysisManager {$/;"	c	namespace:llvm::detail
PassVector	include/IR/LegacyPassManagers.h	/^  SmallVector<Pass *, 16> PassVector;$/;"	m	class:llvm::PMDataManager
Passes	include/IR/PassManager.h	/^  std::vector<std::unique_ptr<PassConceptT>> Passes;$/;"	m	class:llvm::PassManager
Path	include/corelab/Utilities/ProfileInfo.h	/^    typedef std::map<const BType*, const BType*> Path;$/;"	t	class:llvm::ProfileInfoT
PatternMatch	include/IR/PatternMatch.h	/^namespace PatternMatch {$/;"	n	namespace:llvm
Point	include/IR/IRBuilder.h	/^    BasicBlock::iterator Point;$/;"	m	class:llvm::IRBuilderBase::InsertPoint
Point	include/IR/IRBuilder.h	/^    BasicBlock::iterator Point;$/;"	m	class:llvm::IRBuilderBase::InsertPointGuard
Pointer	include/IR/Intrinsics.h	/^      Integer, Vector, Pointer, Struct,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
PointerAlignElem	include/IR/DataLayout.h	/^struct PointerAlignElem {$/;"	s	namespace:llvm
PointerLikeTypeTraits	include/IR/Instruction.h	/^class PointerLikeTypeTraits<Instruction*> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	include/IR/Use.h	/^template <> class PointerLikeTypeTraits<Use **> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	include/IR/Value.h	/^class PointerLikeTypeTraits<Value*> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	include/IR/ValueHandle.h	/^class PointerLikeTypeTraits<ValueHandleBase**> {$/;"	c	namespace:llvm
PointerTyID	include/IR/Type.h	/^    PointerTyID,     \/\/\/< 14: Pointers$/;"	e	enum:llvm::Type::TypeID
PointerType	include/IR/DerivedTypes.h	/^class PointerType : public SequentialType {$/;"	c	namespace:llvm
Pointer_AddressSpace	include/IR/Intrinsics.h	/^      unsigned Pointer_AddressSpace;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon15
Pointers	include/IR/DataLayout.h	/^  PointersTy Pointers;$/;"	m	class:llvm::DataLayout
PointersTy	include/IR/DataLayout.h	/^  typedef SmallVector<PointerAlignElem, 8> PointersTy;$/;"	t	class:llvm::DataLayout
PossibleRelocationsTy	include/IR/Constant.h	/^  enum PossibleRelocationsTy {$/;"	g	class:llvm::Constant
PossiblyExactOperator	include/IR/Operator.h	/^class PossiblyExactOperator : public Operator {$/;"	c	namespace:llvm
PredIterator	include/IR/CFG.h	/^  PredIterator() {}$/;"	f	class:llvm::PredIterator
PredIterator	include/IR/CFG.h	/^  explicit inline PredIterator(Ptr *bb) : It(bb->user_begin()) {$/;"	f	class:llvm::PredIterator
PredIterator	include/IR/CFG.h	/^  inline PredIterator(Ptr *bb, bool) : It(bb->user_end()) {}$/;"	f	class:llvm::PredIterator
PredIterator	include/IR/CFG.h	/^class PredIterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
PredIteratorCache	include/IR/PredIteratorCache.h	/^  class PredIteratorCache {$/;"	c	namespace:llvm
Predicate	include/IR/InstrTypes.h	/^  enum Predicate {$/;"	g	class:llvm::CmpInst
Predicate	include/IR/PatternMatch.h	/^  PredicateTy &Predicate;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
PrefAlign	include/IR/DataLayout.h	/^  unsigned PrefAlign : 16;$/;"	m	struct:llvm::LayoutAlignElem
PrefAlign	include/IR/DataLayout.h	/^  unsigned PrefAlign;$/;"	m	struct:llvm::PointerAlignElem
PreserveAll	include/IR/CallingConv.h	/^    PreserveAll = 15,$/;"	e	enum:llvm::CallingConv::__anon7
PreserveMost	include/IR/CallingConv.h	/^    PreserveMost = 14,$/;"	e	enum:llvm::CallingConv::__anon7
PreservedAnalyses	include/IR/PassManager.h	/^  PreservedAnalyses() {}$/;"	f	class:llvm::PreservedAnalyses
PreservedAnalyses	include/IR/PassManager.h	/^  PreservedAnalyses(PreservedAnalyses &&Arg)$/;"	f	class:llvm::PreservedAnalyses
PreservedAnalyses	include/IR/PassManager.h	/^  PreservedAnalyses(const PreservedAnalyses &Arg)$/;"	f	class:llvm::PreservedAnalyses
PreservedAnalyses	include/IR/PassManager.h	/^class PreservedAnalyses {$/;"	c	namespace:llvm
PreservedPassIDs	include/IR/PassManager.h	/^  SmallPtrSet<void *, 2> PreservedPassIDs;$/;"	m	class:llvm::PreservedAnalyses
PreservedVariables	include/IR/DIBuilder.h	/^    DenseMap<MDNode *, std::vector<TrackingMDNodeRef>> PreservedVariables;$/;"	m	class:llvm::DIBuilder
Prev	include/IR/Use.h	/^  PointerIntPair<Use **, 2, PrevPtrTag> Prev;$/;"	m	class:llvm::Use
PrevPair	include/IR/ValueHandle.h	/^  PointerIntPair<ValueHandleBase**, 2, HandleBaseKind> PrevPair;$/;"	m	class:llvm::ValueHandleBase
PrevPtrTag	include/IR/Use.h	/^  enum PrevPtrTag { zeroDigitTag, oneDigitTag, stopTag, fullStopTag };$/;"	g	class:llvm::Use
PrintFunctionPass	include/IR/IRPrintingPasses.h	/^class PrintFunctionPass {$/;"	c	namespace:llvm
PrintModulePass	include/IR/IRPrintingPasses.h	/^class PrintModulePass {$/;"	c	namespace:llvm
Private	include/IR/Mangler.h	/^    Private,               \/\/\/< Emit "private" prefix before each symbol.$/;"	e	enum:llvm::Mangler::ManglerPrefixTy
PrivateLinkage	include/IR/GlobalValue.h	/^    PrivateLinkage,     \/\/\/< Like Internal, but omit from symbol table.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
Profile	include/IR/Attributes.h	/^  void Profile(FoldingSetNodeID &ID) const {$/;"	f	class:llvm::Attribute
ProfileInfo	include/corelab/Utilities/ProfileInfo.h	/^  typedef ProfileInfoT<Function, BasicBlock> ProfileInfo;$/;"	t	namespace:llvm
ProfileInfoT	include/corelab/Utilities/ProfileInfo.h	/^  class ProfileInfoT {$/;"	c	namespace:llvm
ProtectedVisibility	include/IR/GlobalValue.h	/^    ProtectedVisibility     \/\/\/< The GV is protected$/;"	e	enum:llvm::GlobalValue::VisibilityTypes
Ptr	include/IR/Metadata.h	/^  PointerUnion<LLVMContext *, ReplaceableMetadataImpl *> Ptr;$/;"	m	class:llvm::ContextAndReplaceableUses
PtrToArgument	include/IR/Intrinsics.h	/^      SameVecWidthArgument, PtrToArgument, VecOfPtrsToElt$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
PtrToIntInst	include/IR/Instructions.h	/^class PtrToIntInst : public CastInst {$/;"	c	namespace:llvm
PtrToIntOperator	include/IR/Operator.h	/^class PtrToIntOperator$/;"	c	namespace:llvm
R	include/IR/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::AnyBinaryOp_match
R	include/IR/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::BinOp2_match
R	include/IR/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::BinaryOp_match
R	include/IR/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
R	include/IR/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::MaxMin_match
R	include/IR/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::OverflowingBinaryOp_match
R	include/IR/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
R	include/IR/PatternMatch.h	/^  RTy R;$/;"	m	struct:llvm::PatternMatch::match_combine_and
R	include/IR/PatternMatch.h	/^  RTy R;$/;"	m	struct:llvm::PatternMatch::match_combine_or
RANDOM_SAMPLING_CYCLE	tools/campSampling/campRuntime.cpp	28;"	d	file:
ReadNone	include/IR/Attributes.h	/^    ReadNone,              \/\/\/< Function does not access memory$/;"	e	enum:llvm::Attribute::AttrKind
ReadOnly	include/IR/Attributes.h	/^    ReadOnly,              \/\/\/< Function only reads from memory$/;"	e	enum:llvm::Attribute::AttrKind
RecursiveCallList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::vector<const Instruction *> RecursiveCallList;$/;"	t	class:corelab::RecursiveFuncAnal
RecursiveCallList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::vector<const Instruction *> RecursiveCallList;$/;"	t	class:corelab::RecursiveFuncAnal
RecursiveFunCallList	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::vector<const Instruction *> RecursiveFunCallList;$/;"	t	class:corelab::LoopTraverse
RecursiveFunCallList	include/corelab/CAMP/ContextTreeBuilder.h	/^			typedef std::vector<const Instruction *> RecursiveFunCallList;$/;"	t	class:corelab::ContextTreeBuilder
RecursiveFunCallList	lib/AliasAnalysis/LoopTraverse.hpp	/^      typedef std::vector<const Instruction *> RecursiveFunCallList;$/;"	t	class:corelab::LoopTraverse
RecursiveFunCallList	lib/CAMP/ContextTreeBuilder.h	/^			typedef std::vector<const Instruction *> RecursiveFunCallList;$/;"	t	class:corelab::ContextTreeBuilder
RecursiveFuncAnal	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveFuncAnal() : ModulePass(ID) {}$/;"	f	class:corelab::RecursiveFuncAnal
RecursiveFuncAnal	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^  class RecursiveFuncAnal : public ModulePass {$/;"	c	namespace:corelab
RecursiveFuncAnal	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveFuncAnal() : ModulePass(ID) {}$/;"	f	class:corelab::RecursiveFuncAnal
RecursiveFuncAnal	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^  class RecursiveFuncAnal : public ModulePass {$/;"	c	namespace:corelab
RecursiveFuncList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::unordered_set<const Function *> RecursiveFuncList;$/;"	t	class:corelab::RecursiveFuncAnal
RecursiveFuncList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef std::unordered_set<const Function *> RecursiveFuncList;$/;"	t	class:corelab::RecursiveFuncAnal
Ref	include/IR/TrackingMDRef.h	/^  TrackingMDRef Ref;$/;"	m	class:llvm::TypedTrackingMDRef
RegiInterIterDepFinder	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			RegiInterIterDepFinder() : ModulePass(ID) {}$/;"	f	class:corelab::RegiInterIterDepFinder
RegiInterIterDepFinder	include/corelab/CAMP/RegiInterIterDepFinder.h	/^	class RegiInterIterDepFinder : public ModulePass$/;"	c	namespace:corelab
RegiInterIterDepFinder	lib/CAMP/RegiInterIterDepFinder.h	/^			RegiInterIterDepFinder() : ModulePass(ID) {}$/;"	f	class:corelab::RegiInterIterDepFinder
RegiInterIterDepFinder	lib/CAMP/RegiInterIterDepFinder.h	/^	class RegiInterIterDepFinder : public ModulePass$/;"	c	namespace:corelab
Release	include/IR/Instructions.h	/^  Release = 5,$/;"	e	enum:llvm::AtomicOrdering
RelocateCS	include/IR/Statepoint.h	/^  ImmutableCallSite RelocateCS;$/;"	m	class:llvm::GCRelocateOperands
ReplaceableMetadataImpl	include/IR/Metadata.h	/^  ReplaceableMetadataImpl(LLVMContext &Context)$/;"	f	class:llvm::ReplaceableMetadataImpl
ReplaceableMetadataImpl	include/IR/Metadata.h	/^class ReplaceableMetadataImpl {$/;"	c	namespace:llvm
Require	include/IR/Module.h	/^    Require = 3,$/;"	e	enum:llvm::Module::ModFlagBehavior
RequireAnalysisPass	include/IR/PassManager.h	/^template <typename AnalysisT> struct RequireAnalysisPass {$/;"	s	namespace:llvm
Res	include/IR/PatternMatch.h	/^  const APInt *&Res;$/;"	m	struct:llvm::PatternMatch::api_pred_ty
Res	include/IR/PatternMatch.h	/^  const APInt *&Res;$/;"	m	struct:llvm::PatternMatch::apint_match
ReservedSpace	include/IR/Instructions.h	/^  unsigned ReservedSpace;$/;"	m	class:llvm::IndirectBrInst
ReservedSpace	include/IR/Instructions.h	/^  unsigned ReservedSpace;$/;"	m	class:llvm::LandingPadInst
ReservedSpace	include/IR/Instructions.h	/^  unsigned ReservedSpace;$/;"	m	class:llvm::PHINode
ReservedSpace	include/IR/Instructions.h	/^  unsigned ReservedSpace;$/;"	m	class:llvm::SwitchInst
Result	include/IR/Dominators.h	/^  typedef DominatorTree Result;$/;"	t	class:llvm::DominatorTreeAnalysis
Result	include/IR/PassManager.h	/^    Result(Result &&Arg) : MAM(std::move(Arg.MAM)) {}$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy::Result
Result	include/IR/PassManager.h	/^    Result(const Result &Arg) : MAM(Arg.MAM) {}$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy::Result
Result	include/IR/PassManager.h	/^    explicit Result(const ModuleAnalysisManager &MAM) : MAM(&MAM) {}$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy::Result
Result	include/IR/PassManager.h	/^  Result(Result &&Arg) : FAM(std::move(Arg.FAM)) {}$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy::Result
Result	include/IR/PassManager.h	/^  Result(const Result &Arg) : FAM(Arg.FAM) {}$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy::Result
Result	include/IR/PassManager.h	/^  class Result {$/;"	c	class:llvm::ModuleAnalysisManagerFunctionProxy
Result	include/IR/PassManager.h	/^  explicit Result(FunctionAnalysisManager &FAM) : FAM(&FAM) {}$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy::Result
Result	include/IR/PassManager.h	/^class FunctionAnalysisManagerModuleProxy::Result {$/;"	c	class:llvm::FunctionAnalysisManagerModuleProxy
Result	include/IR/PassManagerInternal.h	/^  ResultT Result;$/;"	m	struct:llvm::detail::AnalysisResultModel
ResultConceptT	include/IR/PassManager.h	/^  typedef detail::AnalysisResultConcept<IRUnitT> ResultConceptT;$/;"	t	class:llvm::detail::AnalysisManagerBase
ResultConceptT	include/IR/PassManager.h	/^  typedef typename BaseT::ResultConceptT ResultConceptT;$/;"	t	class:llvm::AnalysisManager
ResultHasInvalidateMethod	include/IR/PassManagerInternal.h	/^template <typename IRUnitT, typename ResultT> class ResultHasInvalidateMethod {$/;"	c	namespace:llvm::detail
ResultModelT	include/IR/PassManagerInternal.h	/^      ResultModelT;$/;"	t	struct:llvm::detail::AnalysisPassModel
ResumeInst	include/IR/Instructions.h	/^class ResumeInst : public TerminatorInst {$/;"	c	namespace:llvm
ReturnInst	include/IR/Instructions.h	/^class ReturnInst : public TerminatorInst {$/;"	c	namespace:llvm
Returned	include/IR/Attributes.h	/^    Returned,              \/\/\/< Return value is always equal to this argument$/;"	e	enum:llvm::Attribute::AttrKind
ReturnsTwice	include/IR/Attributes.h	/^    ReturnsTwice,          \/\/\/< Function can return twice$/;"	e	enum:llvm::Attribute::AttrKind
RuntimeLang	include/IR/DebugInfoMetadata.h	/^  unsigned RuntimeLang;$/;"	m	class:llvm::MDCompositeTypeBase
RuntimeVersion	include/IR/DebugInfoMetadata.h	/^  unsigned RuntimeVersion;$/;"	m	class:llvm::MDCompileUnit
S	include/IR/LegacyPassManagers.h	/^  std::vector<PMDataManager *> S;$/;"	m	class:llvm::PMStack
SAMPLING_THRESHOLD	tools/camp/campRuntime.h	42;"	d
SAMPLING_THRESHOLD	tools/campSampling/campRuntime.h	42;"	d
SCCList	include/corelab/Metadata/typedefs.h	/^  typedef std::list<SCCNode *> SCCList;$/;"	t	namespace:corelab
SCCSet	include/corelab/Metadata/typedefs.h	/^  typedef DenseSet<SCCNode*> SCCSet;$/;"	t	namespace:corelab
SCDB_HasBody	include/IR/DerivedTypes.h	/^    SCDB_HasBody = 1,$/;"	e	enum:llvm::StructType::__anon11
SCDB_IsLiteral	include/IR/DerivedTypes.h	/^    SCDB_IsLiteral = 4,$/;"	e	enum:llvm::StructType::__anon11
SCDB_IsSized	include/IR/DerivedTypes.h	/^    SCDB_IsSized = 8$/;"	e	enum:llvm::StructType::__anon11
SCDB_Packed	include/IR/DerivedTypes.h	/^    SCDB_Packed = 2,$/;"	e	enum:llvm::StructType::__anon11
SDivOperator	include/IR/Operator.h	/^class SDivOperator$/;"	c	namespace:llvm
SET	include/corelab/AliasAnalysis/TestClient.hpp	20;"	d
SExt	include/IR/Attributes.h	/^    SExt,                  \/\/\/< Sign extended before\/after call$/;"	e	enum:llvm::Attribute::AttrKind
SExtInst	include/IR/Instructions.h	/^class SExtInst : public CastInst {$/;"	c	namespace:llvm
SFINAE	include/IR/Metadata.h	/^  template <size_t N> struct SFINAE {};$/;"	s	struct:llvm::mdconst::detail::HasDereference
SHADOW_MEM_H	tools/camp/ShadowMemory.hpp	2;"	d
SHADOW_MEM_H	tools/campSampling/ShadowMemory.hpp	2;"	d
SHADOW_MEM_H	tools/objtrace/ShadowMemory.hpp	2;"	d
SHADOW_XMASK1	tools/camp/ShadowMemory.hpp	22;"	d
SHADOW_XMASK1	tools/campSampling/ShadowMemory.hpp	22;"	d
SHADOW_XMASK1	tools/objtrace/ShadowMemory.hpp	22;"	d
SHADOW_XMASK2	tools/camp/ShadowMemory.hpp	23;"	d
SHADOW_XMASK2	tools/campSampling/ShadowMemory.hpp	23;"	d
SHADOW_XMASK2	tools/objtrace/ShadowMemory.hpp	23;"	d
SHARED_LIBRARY	lib/AliasAnalysis/Makefile	/^SHARED_LIBRARY=1$/;"	m
SHARED_LIBRARY	lib/Utilities/Makefile	/^SHARED_LIBRARY=1$/;"	m
SHARED_LIBRARY	tools/camp/Makefile	/^SHARED_LIBRARY=1$/;"	m
SHARED_LIBRARY	tools/campSampling/Makefile	/^SHARED_LIBRARY=1$/;"	m
SHARED_LIBRARY	tools/objtrace/Makefile	/^SHARED_LIBRARY=1$/;"	m
SI	include/IR/Instructions.h	/^    SwitchInstTy *SI;$/;"	m	class:llvm::SwitchInst::CaseIteratorT
SIToFPInst	include/IR/Instructions.h	/^class SIToFPInst : public CastInst {$/;"	c	namespace:llvm
SIZE_ELEM	tools/camp/ShadowMemory.hpp	25;"	d
SIZE_ELEM	tools/campSampling/ShadowMemory.hpp	25;"	d
SIZE_ELEM	tools/objtrace/ShadowMemory.hpp	25;"	d
SK	include/IR/Comdat.h	/^  SelectionKind SK;$/;"	m	class:llvm::Comdat
SPIR_FUNC	include/IR/CallingConv.h	/^    SPIR_FUNC = 75,$/;"	e	enum:llvm::CallingConv::__anon7
SPIR_KERNEL	include/IR/CallingConv.h	/^    SPIR_KERNEL = 76,$/;"	e	enum:llvm::CallingConv::__anon7
SPs	include/IR/DebugInfo.h	/^  SmallVector<DISubprogram, 8> SPs;$/;"	m	class:llvm::DebugInfoFinder
STANDARD_LIBRARY_FUNCTIONS_NAME_H	include/corelab/Utilities/StandardLibraryFunctionsName.h	2;"	d
STK_CNTXID_SIZE	include/corelab/CAMP/campCommon.h	22;"	d
STK_CNTXID_SIZE	lib/CAMP/campCommon.h	22;"	d
STK_ITERCNT_SIZE	include/corelab/CAMP/campCommon.h	23;"	d
STK_ITERCNT_SIZE	lib/CAMP/campCommon.h	23;"	d
STK_MAX_SIZE	tools/camp/campRuntime.h	7;"	d
STK_MAX_SIZE	tools/campSampling/campRuntime.h	7;"	d
STK_MAX_SIZE	tools/objtrace/ctxObjtraceRuntime.h	8;"	d
STK_MAX_SIZE_DIV_BY_8	tools/camp/campRuntime.h	8;"	d
STK_MAX_SIZE_DIV_BY_8	tools/campSampling/campRuntime.h	8;"	d
STK_MAX_SIZE_DIV_BY_8	tools/objtrace/ctxObjtraceRuntime.h	9;"	d
STORE	include/corelab/CAMP/campCommon.h	/^			STORE = 0x01$/;"	e	enum:corelab::CAMP::__anon2
STORE	lib/CAMP/campCommon.h	/^			STORE = 0x01$/;"	e	enum:corelab::CAMP::__anon26
SameSize	include/IR/Comdat.h	/^    SameSize,     \/\/\/< The data referenced by the COMDAT must be the same size.$/;"	e	enum:llvm::Comdat::SelectionKind
SameVecWidthArgument	include/IR/Intrinsics.h	/^      SameVecWidthArgument, PtrToArgument, VecOfPtrsToElt$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
SanitizeAddress	include/IR/Attributes.h	/^    SanitizeAddress,       \/\/\/< AddressSanitizer is on.$/;"	e	enum:llvm::Attribute::AttrKind
SanitizeMemory	include/IR/Attributes.h	/^    SanitizeMemory,        \/\/\/< MemorySanitizer is on.$/;"	e	enum:llvm::Attribute::AttrKind
SanitizeThread	include/IR/Attributes.h	/^    SanitizeThread,        \/\/\/< ThreadSanitizer is on.$/;"	e	enum:llvm::Attribute::AttrKind
Scope	include/IR/Metadata.h	/^  MDNode *Scope;$/;"	m	struct:llvm::AAMDNodes
ScopeLine	include/IR/DebugInfoMetadata.h	/^  unsigned ScopeLine;$/;"	m	class:llvm::MDSubprogram
Scopes	include/IR/DebugInfo.h	/^  SmallVector<DIScope, 8> Scopes;$/;"	m	class:llvm::DebugInfoFinder
Section	include/IR/GlobalObject.h	/^  std::string Section;     \/\/ Section to emit this into, empty means default$/;"	m	class:llvm::GlobalObject
SegFaultHandler	tools/camp/ShadowMemory.hpp	/^		static void SegFaultHandler (int sig, siginfo_t* si, void* unused){$/;"	f	class:ShadowMemoryManager
SegFaultHandler	tools/campSampling/ShadowMemory.hpp	/^		static void SegFaultHandler (int sig, siginfo_t* si, void* unused){$/;"	f	class:ShadowMemoryManager
SegFaultHandler	tools/objtrace/ShadowMemory.hpp	/^		static void SegFaultHandler (int sig, siginfo_t* si, void* unused){$/;"	f	class:ShadowMemoryManager
SelectClass_match	include/IR/PatternMatch.h	/^  SelectClass_match(const Cond_t &Cond, const LHS_t &LHS, const RHS_t &RHS)$/;"	f	struct:llvm::PatternMatch::SelectClass_match
SelectClass_match	include/IR/PatternMatch.h	/^struct SelectClass_match {$/;"	s	namespace:llvm::PatternMatch
SelectInst	include/IR/Instructions.h	/^  SelectInst(Value *C, Value *S1, Value *S2, const Twine &NameStr,$/;"	f	class:llvm::SelectInst
SelectInst	include/IR/Instructions.h	/^class SelectInst : public Instruction {$/;"	c	namespace:llvm
SelectionKind	include/IR/Comdat.h	/^  enum SelectionKind {$/;"	g	class:llvm::Comdat
Self	include/IR/CFG.h	/^  typedef PredIterator<Ptr, USE_iterator> Self;$/;"	t	class:llvm::PredIterator
Self	include/IR/CFG.h	/^  typedef SuccIterator<Term_, BB_> Self;$/;"	t	class:llvm::SuccIterator
Self	include/IR/Instructions.h	/^    typedef CaseIteratorT<SwitchInstTy, ConstantIntTy, BasicBlockTy> Self;$/;"	t	class:llvm::SwitchInst::CaseIteratorT
Sentinel	include/IR/BasicBlock.h	/^  mutable ilist_half_node<BasicBlock> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	include/IR/Function.h	/^  mutable ilist_half_node<Argument> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	include/IR/Instruction.h	/^  mutable ilist_half_node<Instruction> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	include/IR/Module.h	/^  mutable ilist_node<Function> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	include/IR/Module.h	/^  mutable ilist_node<GlobalAlias> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	include/IR/Module.h	/^  mutable ilist_node<GlobalVariable> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	include/IR/Module.h	/^  mutable ilist_node<NamedMDNode> Sentinel;$/;"	m	struct:llvm::ilist_traits
SequentialType	include/IR/DerivedTypes.h	/^  SequentialType(TypeID TID, Type *ElType)$/;"	f	class:llvm::SequentialType
SequentialType	include/IR/DerivedTypes.h	/^class SequentialType : public CompositeType {$/;"	c	namespace:llvm
SequentiallyConsistent	include/IR/Instructions.h	/^  SequentiallyConsistent = 7$/;"	e	enum:llvm::AtomicOrdering
Set	include/corelab/CAMP/campTimer.h	/^			Set ()$/;"	f	namespace:corelab::CAMP::Timer
SetCurrentDebugLocation	include/IR/IRBuilder.h	/^  void SetCurrentDebugLocation(DebugLoc L) { CurDbgLocation = std::move(L); }$/;"	f	class:llvm::IRBuilderBase
SetDefaultFPMathTag	include/IR/IRBuilder.h	/^  void SetDefaultFPMathTag(MDNode *FPMathTag) { DefaultFPMathTag = FPMathTag; }$/;"	f	class:llvm::IRBuilderBase
SetFastMathFlags	include/IR/IRBuilder.h	/^  void SetFastMathFlags(FastMathFlags NewFMF) { FMF = NewFMF; }$/;"	f	class:llvm::IRBuilderBase
SetInsertPoint	include/IR/IRBuilder.h	/^  void SetInsertPoint(BasicBlock *TheBB) {$/;"	f	class:llvm::IRBuilderBase
SetInsertPoint	include/IR/IRBuilder.h	/^  void SetInsertPoint(BasicBlock *TheBB, BasicBlock::iterator IP) {$/;"	f	class:llvm::IRBuilderBase
SetInsertPoint	include/IR/IRBuilder.h	/^  void SetInsertPoint(Instruction *I) {$/;"	f	class:llvm::IRBuilderBase
SetInsertPoint	include/IR/IRBuilder.h	/^  void SetInsertPoint(Use &U) {$/;"	f	class:llvm::IRBuilderBase
SetInstDebugLocation	include/IR/IRBuilder.h	/^  void SetInstDebugLocation(Instruction *I) const {$/;"	f	class:llvm::IRBuilderBase
Severity	include/IR/DiagnosticInfo.h	/^  const DiagnosticSeverity Severity;$/;"	m	class:llvm::DiagnosticInfo
ShadowMemoryManager	tools/camp/ShadowMemory.hpp	/^class ShadowMemoryManager{$/;"	c
ShadowMemoryManager	tools/campSampling/ShadowMemory.hpp	/^class ShadowMemoryManager{$/;"	c
ShadowMemoryManager	tools/objtrace/ShadowMemory.hpp	/^class ShadowMemoryManager{$/;"	c
ShlOperator	include/IR/Operator.h	/^class ShlOperator$/;"	c	namespace:llvm
Shuffle	include/IR/UseListOrder.h	/^  std::vector<unsigned> Shuffle;$/;"	m	struct:llvm::UseListOrder
ShuffleVectorInst	include/IR/Instructions.h	/^class ShuffleVectorInst : public Instruction {$/;"	c	namespace:llvm
SimpleType	include/IR/Metadata.h	/^  typedef Metadata *SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	include/IR/TrackingMDRef.h	/^  typedef Metadata *SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	include/IR/TrackingMDRef.h	/^  typedef T *SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	include/IR/Use.h	/^  typedef Value *SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	include/IR/Use.h	/^  typedef \/*const*\/ Value *SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	include/IR/User.h	/^  typedef Value* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	include/IR/User.h	/^  typedef \/*const*\/ Value* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	include/IR/ValueHandle.h	/^  typedef Value* SimpleType;$/;"	t	struct:llvm::simplify_type
SingleThread	include/IR/Instructions.h	/^  SingleThread = 0,$/;"	e	enum:llvm::SynchronizationScope
Size	include/IR/MDBuilder.h	/^    uint64_t Size;$/;"	m	struct:llvm::MDBuilder::TBAAStructField
SizeInBits	include/IR/DebugInfoMetadata.h	/^  uint64_t SizeInBits;$/;"	m	class:llvm::MDType
SmallType	include/IR/PassManagerInternal.h	/^  typedef char SmallType;$/;"	t	class:llvm::detail::PassRunAcceptsAnalysisManager
SmallType	include/IR/PassManagerInternal.h	/^  typedef char SmallType;$/;"	t	class:llvm::detail::ResultHasInvalidateMethod
SourceLanguage	include/IR/DebugInfoMetadata.h	/^  unsigned SourceLanguage;$/;"	m	class:llvm::MDCompileUnit
StackAlignment	include/IR/Attributes.h	/^    StackAlignment,        \/\/\/< Alignment of stack for function (3 bits)$/;"	e	enum:llvm::Attribute::AttrKind
StackAlignment	include/IR/Attributes.h	/^  uint64_t StackAlignment;$/;"	m	class:llvm::AttrBuilder
StackNaturalAlign	include/IR/DataLayout.h	/^  unsigned StackNaturalAlign;$/;"	m	class:llvm::DataLayout
StackProtect	include/IR/Attributes.h	/^    StackProtect,          \/\/\/< Stack protection.$/;"	e	enum:llvm::Attribute::AttrKind
StackProtectReq	include/IR/Attributes.h	/^    StackProtectReq,       \/\/\/< Stack protection required.$/;"	e	enum:llvm::Attribute::AttrKind
StackProtectStrong	include/IR/Attributes.h	/^    StackProtectStrong,    \/\/\/< Strong Stack protection.$/;"	e	enum:llvm::Attribute::AttrKind
StackSize	include/IR/DiagnosticInfo.h	/^  unsigned StackSize;$/;"	m	class:llvm::DiagnosticInfoStackSize
Start	include/IR/Dominators.h	/^  const BasicBlock *Start;$/;"	m	class:llvm::BasicBlockEdge
Statepoint	include/IR/Statepoint.h	/^  explicit Statepoint(CallSite CS) : Base(CS) {}$/;"	f	class:llvm::Statepoint
Statepoint	include/IR/Statepoint.h	/^  explicit Statepoint(Instruction *I) : Base(I) {}$/;"	f	class:llvm::Statepoint
Statepoint	include/IR/Statepoint.h	/^class Statepoint : public StatepointBase<Instruction, Value, CallSite> {$/;"	c	namespace:llvm
StatepointBase	include/IR/Statepoint.h	/^  explicit StatepointBase(CallSiteTy CS) : StatepointCS(CS) {$/;"	f	class:llvm::StatepointBase
StatepointBase	include/IR/Statepoint.h	/^  explicit StatepointBase(InstructionTy *I) : StatepointCS(I) {$/;"	f	class:llvm::StatepointBase
StatepointBase	include/IR/Statepoint.h	/^class StatepointBase {$/;"	c	namespace:llvm
StatepointCS	include/IR/Statepoint.h	/^  CallSiteTy StatepointCS;$/;"	m	class:llvm::StatepointBase
StorageType	include/IR/Metadata.h	/^  enum StorageType { Uniqued, Distinct, Temporary };$/;"	g	class:llvm::Metadata
StoreHistoryElem	tools/camp/campRuntime.h	/^typedef struct StoreHistoryElem {$/;"	s
StoreHistoryElem	tools/camp/campRuntime.h	/^} StoreHistoryElem;$/;"	t	typeref:struct:StoreHistoryElem
StoreHistoryElem	tools/campSampling/campRuntime.h	/^typedef struct StoreHistoryElem {$/;"	s
StoreHistoryElem	tools/campSampling/campRuntime.h	/^} StoreHistoryElem;$/;"	t	typeref:struct:StoreHistoryElem
StoreInst	include/IR/Instructions.h	/^class StoreInst : public Instruction {$/;"	c	namespace:llvm
Stream	include/IR/DiagnosticPrinter.h	/^  raw_ostream &Stream;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
StringRepresentation	include/IR/DataLayout.h	/^  std::string StringRepresentation;$/;"	m	class:llvm::DataLayout
Struct	include/IR/Intrinsics.h	/^      Integer, Vector, Pointer, Struct,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
StructAlignment	include/IR/DataLayout.h	/^  unsigned StructAlignment;$/;"	m	class:llvm::StructLayout
StructLayout	include/IR/DataLayout.h	/^class StructLayout {$/;"	c	namespace:llvm
StructRet	include/IR/Attributes.h	/^    StructRet,             \/\/\/< Hidden pointer to structure to return$/;"	e	enum:llvm::Attribute::AttrKind
StructSize	include/IR/DataLayout.h	/^  uint64_t StructSize;$/;"	m	class:llvm::StructLayout
StructTyID	include/IR/Type.h	/^    StructTyID,      \/\/\/< 12: Structures$/;"	e	enum:llvm::Type::TypeID
StructType	include/IR/DerivedTypes.h	/^  StructType(LLVMContext &C)$/;"	f	class:llvm::StructType
StructType	include/IR/DerivedTypes.h	/^class StructType : public CompositeType {$/;"	c	namespace:llvm
StructTypes	include/IR/TypeFinder.h	/^  std::vector<StructType*> StructTypes;$/;"	m	class:llvm::TypeFinder
Struct_NumElements	include/IR/Intrinsics.h	/^      unsigned Struct_NumElements;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon15
Sub	include/IR/Instructions.h	/^    Sub,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
SubConstraintInfo	include/IR/InlineAsm.h	/^    SubConstraintInfo() : MatchingInput(-1) {}$/;"	f	struct:llvm::InlineAsm::SubConstraintInfo
SubConstraintInfo	include/IR/InlineAsm.h	/^  struct SubConstraintInfo {$/;"	s	class:llvm::InlineAsm
SubConstraintInfoVector	include/IR/InlineAsm.h	/^  typedef std::vector<SubConstraintInfo> SubConstraintInfoVector;$/;"	t	class:llvm::InlineAsm
SubOperator	include/IR/Operator.h	/^class SubOperator$/;"	c	namespace:llvm
SubPattern	include/IR/PatternMatch.h	/^  SubPattern_t SubPattern;$/;"	m	struct:llvm::PatternMatch::Exact_match
SubPattern	include/IR/PatternMatch.h	/^  SubPattern_t SubPattern;$/;"	m	struct:llvm::PatternMatch::OneUse_match
SubclassData	include/IR/Value.h	/^  unsigned short SubclassData;$/;"	m	class:llvm::Value
SubclassData16	include/IR/Metadata.h	/^  unsigned short SubclassData16;$/;"	m	class:llvm::Metadata
SubclassData32	include/IR/Metadata.h	/^  unsigned SubclassData32;$/;"	m	class:llvm::Metadata
SubclassID	include/IR/Metadata.h	/^  const unsigned char SubclassID;$/;"	m	class:llvm::Metadata
SubclassID	include/IR/Value.h	/^  const unsigned char SubclassID;   \/\/ Subclass identifier (for isa\/dyn_cast)$/;"	m	class:llvm::Value
Succ	include/IR/PatternMatch.h	/^  BasicBlock *&Succ;$/;"	m	struct:llvm::PatternMatch::br_match
SuccIterator	include/IR/CFG.h	/^  explicit inline SuccIterator(Term_ T) : Term(T), idx(0) {\/\/ begin iterator$/;"	f	class:llvm::SuccIterator
SuccIterator	include/IR/CFG.h	/^  inline SuccIterator(Term_ T, bool)                       \/\/ end iterator$/;"	f	class:llvm::SuccIterator
SuccIterator	include/IR/CFG.h	/^class SuccIterator : public std::iterator<std::random_access_iterator_tag, BB_,$/;"	c	namespace:llvm
SuccessorProxy	include/IR/CFG.h	/^    explicit SuccessorProxy(const Self &it) : it(it) {}$/;"	f	class:llvm::SuccIterator::SuccessorProxy
SuccessorProxy	include/IR/CFG.h	/^  class SuccessorProxy {$/;"	c	class:llvm::SuccIterator
SwitchInst	include/IR/Instructions.h	/^class SwitchInst : public TerminatorInst {$/;"	c	namespace:llvm
SymTab	include/IR/Function.h	/^  ValueSymbolTable *SymTab;               \/\/\/< Symbol table of args\/instructions$/;"	m	class:llvm::Function
SymbolTableEntry	include/IR/DerivedTypes.h	/^  void *SymbolTableEntry;$/;"	m	class:llvm::StructType
SymbolTableListTraits	include/IR/SymbolTableListTraits.h	/^  SymbolTableListTraits() {}$/;"	f	class:llvm::SymbolTableListTraits
SymbolTableListTraits	include/IR/SymbolTableListTraits.h	/^class SymbolTableListTraits : public ilist_default_traits<ValueSubClass> {$/;"	c	namespace:llvm
SynchronizationScope	include/IR/Instructions.h	/^enum SynchronizationScope {$/;"	g	namespace:llvm
T	include/IR/PatternMatch.h	/^  BasicBlock *&T, *&F;$/;"	m	struct:llvm::PatternMatch::brc_match
TBAA	include/IR/MDBuilder.h	/^    MDNode *TBAA;$/;"	m	struct:llvm::MDBuilder::TBAAStructField
TBAA	include/IR/Metadata.h	/^  MDNode *TBAA;$/;"	m	struct:llvm::AAMDNodes
TBAAStructField	include/IR/MDBuilder.h	/^    TBAAStructField(uint64_t Offset, uint64_t Size, MDNode *TBAA) :$/;"	f	struct:llvm::MDBuilder::TBAAStructField
TBAAStructField	include/IR/MDBuilder.h	/^  struct TBAAStructField {$/;"	s	class:llvm::MDBuilder
TCK_MustTail	include/IR/Instructions.h	/^  enum TailCallKind { TCK_None = 0, TCK_Tail = 1, TCK_MustTail = 2 };$/;"	e	enum:llvm::CallInst::TailCallKind
TCK_None	include/IR/Instructions.h	/^  enum TailCallKind { TCK_None = 0, TCK_Tail = 1, TCK_MustTail = 2 };$/;"	e	enum:llvm::CallInst::TailCallKind
TCK_Tail	include/IR/Instructions.h	/^  enum TailCallKind { TCK_None = 0, TCK_Tail = 1, TCK_MustTail = 2 };$/;"	e	enum:llvm::CallInst::TailCallKind
TPM	include/IR/LegacyPassManagers.h	/^  PMTopLevelManager *TPM;$/;"	m	class:llvm::PMDataManager
TRED_BINARY	lib/Utilities/Makefile	/^TRED_BINARY=${shell which tred || which cat }$/;"	m
TREE_MAX_DEPTH_LIMIT	include/corelab/CAMP/ContextTreeBuilder.h	19;"	d
TREE_MAX_DEPTH_LIMIT	lib/CAMP/ContextTreeBuilder.h	19;"	d
TYs	include/IR/DebugInfo.h	/^  SmallVector<DIType, 8> TYs;$/;"	m	class:llvm::DebugInfoFinder
TailCallKind	include/IR/Instructions.h	/^  enum TailCallKind { TCK_None = 0, TCK_Tail = 1, TCK_MustTail = 2 };$/;"	g	class:llvm::CallInst
TargetDepAttrs	include/IR/Attributes.h	/^  std::map<std::string, std::string> TargetDepAttrs;$/;"	m	class:llvm::AttrBuilder
TargetTriple	include/IR/Module.h	/^  std::string TargetTriple;       \/\/\/< Platform target triple Module compiled on$/;"	m	class:llvm::Module
TempEnumTypes	include/IR/DIBuilder.h	/^    MDTuple *TempEnumTypes;$/;"	m	class:llvm::DIBuilder
TempGVs	include/IR/DIBuilder.h	/^    MDTuple *TempGVs;$/;"	m	class:llvm::DIBuilder
TempImportedModules	include/IR/DIBuilder.h	/^    MDTuple *TempImportedModules;$/;"	m	class:llvm::DIBuilder
TempMDNodeDeleter	include/IR/Metadata.h	/^struct TempMDNodeDeleter {$/;"	s	namespace:llvm
TempRetainTypes	include/IR/DIBuilder.h	/^    MDTuple *TempRetainTypes;$/;"	m	class:llvm::DIBuilder
TempSubprograms	include/IR/DIBuilder.h	/^    MDTuple *TempSubprograms;$/;"	m	class:llvm::DIBuilder
Temporary	include/IR/Metadata.h	/^  enum StorageType { Uniqued, Distinct, Temporary };$/;"	e	enum:llvm::Metadata::StorageType
Term	include/IR/CFG.h	/^  Term_ Term;$/;"	m	class:llvm::SuccIterator
TermOps	include/IR/Instruction.h	/^  enum TermOps {       \/\/ These terminate basic blocks$/;"	g	class:llvm::Instruction
TerminatorInst	include/IR/InstrTypes.h	/^  TerminatorInst(Type *Ty, Instruction::TermOps iType,$/;"	f	class:llvm::TerminatorInst
TerminatorInst	include/IR/InstrTypes.h	/^class TerminatorInst : public Instruction {$/;"	c	namespace:llvm
TestAAClient	include/corelab/AliasAnalysis/TestClient.hpp	/^			TestAAClient() : ModulePass(ID) {}$/;"	f	class:corelab::TestAAClient
TestAAClient	include/corelab/AliasAnalysis/TestClient.hpp	/^	class TestAAClient : public ModulePass$/;"	c	namespace:corelab
ThePtr	include/IR/ValueHandle.h	/^  Value *ThePtr;$/;"	m	class:llvm::AssertingVH
ThreadLocalMode	include/IR/GlobalValue.h	/^  enum ThreadLocalMode {$/;"	g	class:llvm::GlobalValue
ThreadNo	include/corelab/Metadata/typedefs.h	/^  typedef unsigned                              ThreadNo;$/;"	t	namespace:corelab
Timer	include/corelab/CAMP/campTimer.h	/^		namespace Timer$/;"	n	namespace:corelab::CAMP
Tmp	include/IR/DebugInfo.h	/^    Operand Tmp;$/;"	m	class:llvm::DIExpression::iterator
Tracking	include/IR/ValueHandle.h	/^    Tracking,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
TrackingMDNodeRef	include/IR/TrackingMDRef.h	/^typedef TypedTrackingMDRef<MDNode> TrackingMDNodeRef;$/;"	t	namespace:llvm
TrackingMDRef	include/IR/TrackingMDRef.h	/^  TrackingMDRef() : MD(nullptr) {}$/;"	f	class:llvm::TrackingMDRef
TrackingMDRef	include/IR/TrackingMDRef.h	/^  TrackingMDRef(TrackingMDRef &&X) : MD(X.MD) { retrack(X); }$/;"	f	class:llvm::TrackingMDRef
TrackingMDRef	include/IR/TrackingMDRef.h	/^  TrackingMDRef(const TrackingMDRef &X) : MD(X.MD) { track(); }$/;"	f	class:llvm::TrackingMDRef
TrackingMDRef	include/IR/TrackingMDRef.h	/^  explicit TrackingMDRef(Metadata *MD) : MD(MD) { track(); }$/;"	f	class:llvm::TrackingMDRef
TrackingMDRef	include/IR/TrackingMDRef.h	/^class TrackingMDRef {$/;"	c	namespace:llvm
TrackingVH	include/IR/ValueHandle.h	/^  TrackingVH() : ValueHandleBase(Tracking) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	include/IR/ValueHandle.h	/^  TrackingVH(ValueTy *P) : ValueHandleBase(Tracking, GetAsValue(P)) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	include/IR/ValueHandle.h	/^  TrackingVH(const TrackingVH &RHS) : ValueHandleBase(Tracking, RHS) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	include/IR/ValueHandle.h	/^class TrackingVH : public ValueHandleBase {$/;"	c	namespace:llvm
TrackingValueAsMetadataRef	include/IR/TrackingMDRef.h	/^typedef TypedTrackingMDRef<ValueAsMetadata> TrackingValueAsMetadataRef;$/;"	t	namespace:llvm
TraitsClass	include/IR/SymbolTableListTraits.h	/^  typedef ilist_traits<ValueSubClass> TraitsClass;$/;"	t	class:llvm::SymbolTableListTraits
TruncArgument	include/IR/Intrinsics.h	/^      Argument, ExtendArgument, TruncArgument, HalfVecArgument,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
TruncInst	include/IR/Instructions.h	/^class TruncInst : public CastInst {$/;"	c	namespace:llvm
Ty	include/IR/PatternMatch.h	/^                            Argument_match<T2>> Ty;$/;"	t	struct:llvm::PatternMatch::m_Intrinsic_Ty
Ty	include/IR/PatternMatch.h	/^                            Argument_match<T3>> Ty;$/;"	t	struct:llvm::PatternMatch::m_Intrinsic_Ty
Ty	include/IR/PatternMatch.h	/^      Ty;$/;"	t	struct:llvm::PatternMatch::m_Intrinsic_Ty
Ty	include/IR/PatternMatch.h	/^  typedef match_combine_and<IntrinsicID_match, Argument_match<T0>> Ty;$/;"	t	struct:llvm::PatternMatch::m_Intrinsic_Ty
Type	include/IR/InlineAsm.h	/^    ConstraintPrefix Type;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
Type	include/IR/Type.h	/^  explicit Type(LLVMContext &C, TypeID tid)$/;"	f	class:llvm::Type
Type	include/IR/Type.h	/^class Type {$/;"	c	namespace:llvm
TypeBitWidth	include/IR/DataLayout.h	/^  unsigned TypeBitWidth : 24;$/;"	m	struct:llvm::LayoutAlignElem
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, A2), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, A2, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, A4), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, A4, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, A4, A5), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, A4, A5, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^class TypeBuilder<types::i<num_bits>, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<> class TypeBuilder<const void*, false>$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<> class TypeBuilder<const volatile void*, false>$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<> class TypeBuilder<double, false> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<> class TypeBuilder<double, true> {};$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<> class TypeBuilder<float, false> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<> class TypeBuilder<float, true> {};$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<> class TypeBuilder<void*, false>$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<> class TypeBuilder<volatile void*, false>$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::fp128, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::ieee_double, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::ieee_float, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::ppc_fp128, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::x86_fp80, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::x86_mmx, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<bool cross> class TypeBuilder<void, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename R, bool cross> class TypeBuilder<R(), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename R, bool cross> class TypeBuilder<R(...), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename R, typename A1, bool cross> class TypeBuilder<R(A1), cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<T&, cross> {};$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<T*, cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<T[], cross> {$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<const T, cross>$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<const volatile T, cross>$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<volatile T, cross>$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename T, bool cross_compilable> class TypeBuilder {};$/;"	c	namespace:llvm
TypeBuilder	include/IR/TypeBuilder.h	/^template<typename T, size_t N, bool cross> class TypeBuilder<T[N], cross> {$/;"	c	namespace:llvm
TypeByteWidth	include/IR/DataLayout.h	/^  uint32_t TypeByteWidth;$/;"	m	struct:llvm::PointerAlignElem
TypeFinder	include/IR/TypeFinder.h	/^  TypeFinder() : OnlyNamed(false) {}$/;"	f	class:llvm::TypeFinder
TypeFinder	include/IR/TypeFinder.h	/^class TypeFinder {$/;"	c	namespace:llvm
TypeID	include/IR/Type.h	/^  enum TypeID {$/;"	g	class:llvm::Type
TypeIdentifierMap	include/IR/DebugInfo.h	/^  DITypeIdentifierMap TypeIdentifierMap;$/;"	m	class:llvm::DebugInfoFinder
TypeMapInitialized	include/IR/DebugInfo.h	/^  bool TypeMapInitialized;$/;"	m	class:llvm::DebugInfoFinder
TypedTrackingMDRef	include/IR/TrackingMDRef.h	/^  TypedTrackingMDRef() {}$/;"	f	class:llvm::TypedTrackingMDRef
TypedTrackingMDRef	include/IR/TrackingMDRef.h	/^  TypedTrackingMDRef(TypedTrackingMDRef &&X) : Ref(std::move(X.Ref)) {}$/;"	f	class:llvm::TypedTrackingMDRef
TypedTrackingMDRef	include/IR/TrackingMDRef.h	/^  TypedTrackingMDRef(const TypedTrackingMDRef &X) : Ref(X.Ref) {}$/;"	f	class:llvm::TypedTrackingMDRef
TypedTrackingMDRef	include/IR/TrackingMDRef.h	/^  explicit TypedTrackingMDRef(T *MD) : Ref(static_cast<Metadata *>(MD)) {}$/;"	f	class:llvm::TypedTrackingMDRef
TypedTrackingMDRef	include/IR/TrackingMDRef.h	/^template <class T> class TypedTrackingMDRef {$/;"	c	namespace:llvm
U	include/IR/Use.h	/^  Use(const Use &U) = delete;$/;"	m	class:llvm::Use
U	include/IR/Value.h	/^    UseT *U;$/;"	m	class:llvm::Value::use_iterator_impl
UDivOperator	include/IR/Operator.h	/^class UDivOperator$/;"	c	namespace:llvm
UI	include/IR/Value.h	/^    use_iterator_impl<Use> UI;$/;"	m	class:llvm::Value::user_iterator_impl
UIToFPInst	include/IR/Instructions.h	/^class UIToFPInst : public CastInst {$/;"	c	namespace:llvm
UMax	include/IR/Instructions.h	/^    UMax,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
UMin	include/IR/Instructions.h	/^    UMin,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
UNIMPLEMENTED	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	16;"	d
UNIMPLEMENTED	include/corelab/AliasAnalysis/LoopTraverse.hpp	15;"	d
UNIMPLEMENTED	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	15;"	d
UNIMPLEMENTED	include/corelab/AliasAnalysis/TestClient.hpp	21;"	d
UNIMPLEMENTED	lib/AliasAnalysis/IndirectCallAnal.hpp	16;"	d
UNIMPLEMENTED	lib/AliasAnalysis/LoopTraverse.hpp	15;"	d
UNIMPLEMENTED	lib/AliasAnalysis/RecursiveFuncAnal.hpp	15;"	d
UNUSED	include/corelab/CAMP/campCommon.h	16;"	d
UNUSED	lib/CAMP/campCommon.h	16;"	d
UWTable	include/IR/Attributes.h	/^    UWTable,               \/\/\/< Function must be in a unwind table$/;"	e	enum:llvm::Attribute::AttrKind
UnaryInstruction	include/IR/InstrTypes.h	/^  UnaryInstruction(Type *Ty, unsigned iType, Value *V, BasicBlock *IAE)$/;"	f	class:llvm::UnaryInstruction
UnaryInstruction	include/IR/InstrTypes.h	/^  UnaryInstruction(Type *Ty, unsigned iType, Value *V,$/;"	f	class:llvm::UnaryInstruction
UnaryInstruction	include/IR/InstrTypes.h	/^class UnaryInstruction : public Instruction {$/;"	c	namespace:llvm
UndefValue	include/IR/Constants.h	/^  explicit UndefValue(Type *T) : Constant(T, UndefValueVal, nullptr, 0) {}$/;"	f	class:llvm::UndefValue
UndefValue	include/IR/Constants.h	/^class UndefValue : public Constant {$/;"	c	namespace:llvm
UndefValueVal	include/IR/Value.h	/^    UndefValueVal,            \/\/ This is an instance of UndefValue$/;"	e	enum:llvm::Value::ValueTy
UniqueContextID	include/corelab/CAMP/ContextTreeBuilder.h	/^	typedef uint32_t UniqueContextID;$/;"	t	namespace:corelab
UniqueContextID	lib/CAMP/ContextTreeBuilder.h	/^	typedef uint32_t UniqueContextID;$/;"	t	namespace:corelab
Uniqued	include/IR/Metadata.h	/^  enum StorageType { Uniqued, Distinct, Temporary };$/;"	e	enum:llvm::Metadata::StorageType
Unordered	include/IR/Instructions.h	/^  Unordered = 1,$/;"	e	enum:llvm::AtomicOrdering
UnreachableInst	include/IR/Instructions.h	/^class UnreachableInst : public TerminatorInst {$/;"	c	namespace:llvm
UnresolvedNodes	include/IR/DIBuilder.h	/^    SmallVector<TrackingMDNodeRef, 4> UnresolvedNodes;$/;"	m	class:llvm::DIBuilder
UnsafeAlgebra	include/IR/Operator.h	/^    UnsafeAlgebra   = (1 << 0),$/;"	e	enum:llvm::FastMathFlags::__anon21
Unwrap	include/IR/ValueMap.h	/^  KeyT Unwrap() const { return cast_or_null<KeySansPointerT>(getValPtr()); }$/;"	f	class:llvm::ValueMapCallbackVH
Upper	include/IR/ConstantRange.h	/^  APInt Lower, Upper;$/;"	m	class:llvm::ConstantRange
Use	include/IR/Use.h	/^  Use(PrevPtrTag tag) : Val(nullptr) { Prev.setInt(tag); }$/;"	f	class:llvm::Use
Use	include/IR/Use.h	/^class Use {$/;"	c	namespace:llvm
UseList	include/IR/Value.h	/^  Use *UseList;$/;"	m	class:llvm::Value
UseListOrder	include/IR/UseListOrder.h	/^  UseListOrder() : V(0), F(0) {}$/;"	f	struct:llvm::UseListOrder
UseListOrder	include/IR/UseListOrder.h	/^  UseListOrder(UseListOrder &&X)$/;"	f	struct:llvm::UseListOrder
UseListOrder	include/IR/UseListOrder.h	/^  UseListOrder(const Value *V, const Function *F, size_t ShuffleSize)$/;"	f	struct:llvm::UseListOrder
UseListOrder	include/IR/UseListOrder.h	/^struct UseListOrder {$/;"	s	namespace:llvm
UseListOrderStack	include/IR/UseListOrder.h	/^typedef std::vector<UseListOrder> UseListOrderStack;$/;"	t	namespace:llvm
UseMap	include/IR/Metadata.h	/^  SmallDenseMap<void *, std::pair<OwnerTy, uint64_t>, 4> UseMap;$/;"	m	class:llvm::ReplaceableMetadataImpl
User	include/IR/User.h	/^  User(Type *ty, unsigned vty, Use *OpList, unsigned NumOps)$/;"	f	class:llvm::User
User	include/IR/User.h	/^class User : public Value {$/;"	c	namespace:llvm
UserRef	include/IR/Use.h	/^  typedef PointerIntPair<User *, 1, unsigned> UserRef;$/;"	t	class:llvm::Use
V	include/IR/LegacyPassManagers.h	/^  Value *V;$/;"	m	class:llvm::PassManagerPrettyStackEntry
V	include/IR/Metadata.h	/^  Value *V;$/;"	m	class:llvm::ValueAsMetadata
V	include/IR/UseListOrder.h	/^  const Value *V;$/;"	m	struct:llvm::UseListOrder
V	include/IR/ValueHandle.h	/^  Value* V;$/;"	m	class:llvm::ValueHandleBase
VAArgInst	include/IR/Instructions.h	/^  VAArgInst(Value *List, Type *Ty, const Twine &NameStr = "",$/;"	f	class:llvm::VAArgInst
VAArgInst	include/IR/Instructions.h	/^  VAArgInst(Value *List, Type *Ty, const Twine &NameStr,$/;"	f	class:llvm::VAArgInst
VAArgInst	include/IR/Instructions.h	/^class VAArgInst : public UnaryInstruction {$/;"	c	namespace:llvm
VACopyInst	include/IR/IntrinsicInst.h	/^  class VACopyInst : public IntrinsicInst {$/;"	c	namespace:llvm
VAEndInst	include/IR/IntrinsicInst.h	/^  class VAEndInst : public IntrinsicInst {$/;"	c	namespace:llvm
VAStartInst	include/IR/IntrinsicInst.h	/^  class VAStartInst : public IntrinsicInst {$/;"	c	namespace:llvm
VECTOR_ALIGN	include/IR/DataLayout.h	/^  VECTOR_ALIGN = 'v',$/;"	e	enum:llvm::AlignTypeEnum
VH	include/IR/ValueMap.h	/^  typedef ValueMapCallbackVH<KeyT, ValueT, Config> VH;$/;"	t	struct:llvm::DenseMapInfo
VI	include/corelab/Metadata/typedefs.h	/^  typedef ValueSet::const_iterator              VI;$/;"	t	namespace:corelab
VLI	include/corelab/Metadata/typedefs.h	/^  typedef std::vector<Value*>::const_iterator   VLI;$/;"	t	namespace:corelab
VMContext	include/IR/DIBuilder.h	/^    LLVMContext &VMContext;$/;"	m	class:llvm::DIBuilder
VR	include/IR/PatternMatch.h	/^  Class *&VR;$/;"	m	struct:llvm::PatternMatch::bind_ty
VR	include/IR/PatternMatch.h	/^  uint64_t &VR;$/;"	m	struct:llvm::PatternMatch::bind_const_intval_ty
VTy	include/IR/Value.h	/^  Type *VTy;$/;"	m	class:llvm::Value
Val	include/IR/Constants.h	/^  APFloat Val;$/;"	m	class:llvm::ConstantFP
Val	include/IR/Constants.h	/^  APInt Val;$/;"	m	class:llvm::ConstantInt
Val	include/IR/DebugInfo.h	/^  const Metadata *Val;$/;"	m	class:llvm::DIRef
Val	include/IR/Module.h	/^    Metadata *Val;$/;"	m	struct:llvm::Module::ModuleFlagEntry
Val	include/IR/PatternMatch.h	/^  Opnd_t Val;$/;"	m	struct:llvm::PatternMatch::Argument_match
Val	include/IR/PatternMatch.h	/^  const Value *Val;$/;"	m	struct:llvm::PatternMatch::specificval_ty
Val	include/IR/PatternMatch.h	/^  double Val;$/;"	m	struct:llvm::PatternMatch::specific_fpval
Val	include/IR/PatternMatch.h	/^  uint64_t Val;$/;"	m	struct:llvm::PatternMatch::specific_intval
Val	include/IR/Use.h	/^  Value *Val;$/;"	m	class:llvm::Use
ValLessThan	include/IR/LegacyPassNameParser.h	/^  static int ValLessThan(const PassNameParser::OptionInfo *VT1,$/;"	f	class:llvm::PassNameParser
ValSymTab	include/IR/Module.h	/^  ValueSymbolTable *ValSymTab;    \/\/\/< Symbol table for values$/;"	m	class:llvm::Module
Value	include/IR/DebugInfoMetadata.h	/^  int64_t Value;$/;"	m	class:llvm::MDEnumerator
Value	include/IR/PassManagerInternal.h	/^  enum { Value = sizeof(f<PassT>(nullptr)) == sizeof(SmallType) };$/;"	e	enum:llvm::detail::PassRunAcceptsAnalysisManager::__anon17
Value	include/IR/PassManagerInternal.h	/^  enum { Value = sizeof(f<ResultT>(nullptr)) == sizeof(SmallType) };$/;"	e	enum:llvm::detail::ResultHasInvalidateMethod::__anon18
Value	include/IR/Value.h	/^class Value {$/;"	c	namespace:llvm
ValueAsMetadata	include/IR/Metadata.h	/^  ValueAsMetadata(unsigned ID, Value *V)$/;"	f	class:llvm::ValueAsMetadata
ValueAsMetadata	include/IR/Metadata.h	/^class ValueAsMetadata : public Metadata, ReplaceableMetadataImpl {$/;"	c	namespace:llvm
ValueFn	include/IR/DIBuilder.h	/^    Function *ValueFn;       \/\/ llvm.dbg.value$/;"	m	class:llvm::DIBuilder
ValueHandleBase	include/IR/ValueHandle.h	/^  ValueHandleBase(HandleBaseKind Kind, Value *V)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	include/IR/ValueHandle.h	/^  ValueHandleBase(HandleBaseKind Kind, const ValueHandleBase &RHS)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	include/IR/ValueHandle.h	/^  explicit ValueHandleBase(HandleBaseKind Kind)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	include/IR/ValueHandle.h	/^class ValueHandleBase {$/;"	c	namespace:llvm
ValueList	include/corelab/Metadata/typedefs.h	/^  typedef std::vector<Value*>                   ValueList;$/;"	t	namespace:corelab
ValueLists	include/corelab/Metadata/typedefs.h	/^  typedef std::vector<std::vector<Value*> >     ValueLists;$/;"	t	namespace:corelab
ValueMap	include/IR/ValueMap.h	/^  explicit ValueMap(const ExtraData &Data, unsigned NumInitBuckets = 64)$/;"	f	class:llvm::ValueMap
ValueMap	include/IR/ValueMap.h	/^  explicit ValueMap(unsigned NumInitBuckets = 64)$/;"	f	class:llvm::ValueMap
ValueMap	include/IR/ValueMap.h	/^class ValueMap {$/;"	c	namespace:llvm
ValueMap	include/IR/ValueSymbolTable.h	/^  typedef StringMap<Value*> ValueMap;$/;"	t	class:llvm::ValueSymbolTable
ValueMapCVH	include/IR/ValueMap.h	/^  typedef ValueMapCallbackVH<KeyT, ValueT, Config> ValueMapCVH;$/;"	t	class:llvm::ValueMap
ValueMapCallbackVH	include/IR/ValueMap.h	/^  ValueMapCallbackVH(KeyT Key, ValueMapT *Map)$/;"	f	class:llvm::ValueMapCallbackVH
ValueMapCallbackVH	include/IR/ValueMap.h	/^  ValueMapCallbackVH(Value *V) : CallbackVH(V), Map(nullptr) {}$/;"	f	class:llvm::ValueMapCallbackVH
ValueMapCallbackVH	include/IR/ValueMap.h	/^class ValueMapCallbackVH : public CallbackVH {$/;"	c	namespace:llvm
ValueMapConfig	include/IR/ValueMap.h	/^struct ValueMapConfig {$/;"	s	namespace:llvm
ValueMapConstIterator	include/IR/ValueMap.h	/^  ValueMapConstIterator() : I() {}$/;"	f	class:llvm::ValueMapConstIterator
ValueMapConstIterator	include/IR/ValueMap.h	/^  ValueMapConstIterator(BaseT I) : I(I) {}$/;"	f	class:llvm::ValueMapConstIterator
ValueMapConstIterator	include/IR/ValueMap.h	/^  ValueMapConstIterator(ValueMapIterator<DenseMapT, KeyT> Other)$/;"	f	class:llvm::ValueMapConstIterator
ValueMapConstIterator	include/IR/ValueMap.h	/^class ValueMapConstIterator :$/;"	c	namespace:llvm
ValueMapIterator	include/IR/ValueMap.h	/^  ValueMapIterator() : I() {}$/;"	f	class:llvm::ValueMapIterator
ValueMapIterator	include/IR/ValueMap.h	/^  ValueMapIterator(BaseT I) : I(I) {}$/;"	f	class:llvm::ValueMapIterator
ValueMapIterator	include/IR/ValueMap.h	/^class ValueMapIterator :$/;"	c	namespace:llvm
ValueMapT	include/IR/ValueMap.h	/^  typedef ValueMap<KeyT, ValueT, Config> ValueMapT;$/;"	t	class:llvm::ValueMapCallbackVH
ValueName	include/IR/Value.h	/^typedef StringMapEntry<Value*> ValueName;$/;"	t	namespace:llvm
ValueSet	include/corelab/Metadata/typedefs.h	/^  typedef DenseSet<llvm::Value *>               ValueSet;$/;"	t	namespace:corelab
ValueSets	include/corelab/Metadata/typedefs.h	/^  typedef std::vector<ValueSet>                 ValueSets;$/;"	t	namespace:corelab
ValueSymbolTable	include/IR/ValueSymbolTable.h	/^  ValueSymbolTable() : vmap(0), LastUnique(0) {}$/;"	f	class:llvm::ValueSymbolTable
ValueSymbolTable	include/IR/ValueSymbolTable.h	/^class ValueSymbolTable {$/;"	c	namespace:llvm
ValueT	include/IR/ValueMap.h	/^  typedef typename DenseMapT::mapped_type ValueT;$/;"	t	class:llvm::ValueMapConstIterator
ValueT	include/IR/ValueMap.h	/^  typedef typename DenseMapT::mapped_type ValueT;$/;"	t	class:llvm::ValueMapIterator
ValueTy	include/IR/Value.h	/^  enum ValueTy {$/;"	g	class:llvm::Value
ValueTypeProxy	include/IR/ValueMap.h	/^  struct ValueTypeProxy {$/;"	s	class:llvm::ValueMapConstIterator
ValueTypeProxy	include/IR/ValueMap.h	/^  struct ValueTypeProxy {$/;"	s	class:llvm::ValueMapIterator
VarArg	include/IR/Intrinsics.h	/^      Void, VarArg, MMX, Metadata, Half, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
VariadicOperandTraits	include/IR/OperandTraits.h	/^struct VariadicOperandTraits {$/;"	s	namespace:llvm
VecOfPtrsToElt	include/IR/Intrinsics.h	/^      SameVecWidthArgument, PtrToArgument, VecOfPtrsToElt$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
Vector	include/IR/Intrinsics.h	/^      Integer, Vector, Pointer, Struct,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
VectorTyID	include/IR/Type.h	/^    VectorTyID       \/\/\/< 15: SIMD 'packed' format, or other vector type$/;"	e	enum:llvm::Type::TypeID
VectorType	include/IR/DerivedTypes.h	/^class VectorType : public SequentialType {$/;"	c	namespace:llvm
Vector_Width	include/IR/Intrinsics.h	/^      unsigned Vector_Width;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon15
VerifierPass	include/IR/Verifier.h	/^  explicit VerifierPass(bool FatalErrors = true) : FatalErrors(FatalErrors) {}$/;"	f	class:llvm::VerifierPass
VerifierPass	include/IR/Verifier.h	/^class VerifierPass {$/;"	c	namespace:llvm
Vertex	include/corelab/Metadata/typedefs.h	/^  typedef std::pair<unsigned,SCCNode*> Vertex;$/;"	t	namespace:corelab
VertexList	include/corelab/Metadata/typedefs.h	/^  typedef std::vector<Vertex> VertexList;$/;"	t	namespace:corelab
VirtualIndex	include/IR/DebugInfoMetadata.h	/^  unsigned VirtualIndex;$/;"	m	class:llvm::MDSubprogram
Virtuality	include/IR/DebugInfoMetadata.h	/^  unsigned Virtuality;$/;"	m	class:llvm::MDSubprogram
VisibilityTypes	include/IR/GlobalValue.h	/^  enum VisibilityTypes {$/;"	g	class:llvm::GlobalValue
VisitedConstants	include/IR/TypeFinder.h	/^  DenseSet<const Value*> VisitedConstants;$/;"	m	class:llvm::TypeFinder
VisitedMetadata	include/IR/TypeFinder.h	/^  DenseSet<const MDNode *> VisitedMetadata;$/;"	m	class:llvm::TypeFinder
VisitedTypes	include/IR/TypeFinder.h	/^  DenseSet<Type*> VisitedTypes;$/;"	m	class:llvm::TypeFinder
Void	include/IR/Intrinsics.h	/^      Void, VarArg, MMX, Metadata, Half, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
VoidTyID	include/IR/Type.h	/^    VoidTyID = 0,    \/\/\/<  0: type with no size$/;"	e	enum:llvm::Type::TypeID
Warning	include/IR/Module.h	/^    Warning = 2,$/;"	e	enum:llvm::Module::ModFlagBehavior
Weak	include/IR/ValueHandle.h	/^    Weak$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
WeakAnyLinkage	include/IR/GlobalValue.h	/^    WeakAnyLinkage,     \/\/\/< Keep one copy of named function when linking (weak)$/;"	e	enum:llvm::GlobalValue::LinkageTypes
WeakODRLinkage	include/IR/GlobalValue.h	/^    WeakODRLinkage,     \/\/\/< Same, but only replaced by something equivalent.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
WeakVH	include/IR/ValueHandle.h	/^  WeakVH() : ValueHandleBase(Weak) {}$/;"	f	class:llvm::WeakVH
WeakVH	include/IR/ValueHandle.h	/^  WeakVH(Value *P) : ValueHandleBase(Weak, P) {}$/;"	f	class:llvm::WeakVH
WeakVH	include/IR/ValueHandle.h	/^  WeakVH(const WeakVH &RHS)$/;"	f	class:llvm::WeakVH
WeakVH	include/IR/ValueHandle.h	/^class WeakVH : public ValueHandleBase {$/;"	c	namespace:llvm
WebKit_JS	include/IR/CallingConv.h	/^    WebKit_JS = 12,$/;"	e	enum:llvm::CallingConv::__anon7
Weight	include/corelab/Metadata/typedefs.h	/^  typedef double Weight;$/;"	t	namespace:corelab
Weights	include/corelab/Metadata/typedefs.h	/^  typedef DenseMap<Edge, Weight> Weights;$/;"	t	namespace:corelab
Wrap	include/IR/ValueMap.h	/^  ValueMapCVH Wrap(KeyT key) const {$/;"	f	class:llvm::ValueMap
X	include/IR/UseListOrder.h	/^  UseListOrder &operator=(const UseListOrder &X) = delete;$/;"	m	struct:llvm::UseListOrder
X	include/IR/UseListOrder.h	/^  UseListOrder(const UseListOrder &X) = delete;$/;"	m	struct:llvm::UseListOrder
X86	include/corelab/Metadata/NamedMetadata.h	/^				X86 = 0,$/;"	e	enum:corelab::EsperantoNamer::EsperantoPlatform
X86TIMER_HPP	tools/camp/x86timer.hpp	2;"	d
X86TIMER_HPP	tools/objtrace/x86timer.hpp	2;"	d
X86_64_SysV	include/IR/CallingConv.h	/^    X86_64_SysV = 78,$/;"	e	enum:llvm::CallingConv::__anon7
X86_64_Win64	include/IR/CallingConv.h	/^    X86_64_Win64 = 79,$/;"	e	enum:llvm::CallingConv::__anon7
X86_FP80TyID	include/IR/Type.h	/^    X86_FP80TyID,    \/\/\/<  4: 80-bit floating point type (X87)$/;"	e	enum:llvm::Type::TypeID
X86_FastCall	include/IR/CallingConv.h	/^    X86_FastCall = 65,$/;"	e	enum:llvm::CallingConv::__anon7
X86_MMXTyID	include/IR/Type.h	/^    X86_MMXTyID,     \/\/\/<  9: MMX vectors (64 bits, X86 specific)$/;"	e	enum:llvm::Type::TypeID
X86_StdCall	include/IR/CallingConv.h	/^    X86_StdCall = 64,$/;"	e	enum:llvm::CallingConv::__anon7
X86_ThisCall	include/IR/CallingConv.h	/^    X86_ThisCall = 70,$/;"	e	enum:llvm::CallingConv::__anon7
X86_VectorCall	include/IR/CallingConv.h	/^    X86_VectorCall = 80$/;"	e	enum:llvm::CallingConv::__anon7
Xchg	include/IR/Instructions.h	/^    Xchg,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
Xor	include/IR/Instructions.h	/^    Xor,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
Yes	include/IR/Metadata.h	/^  typedef char Yes[1];$/;"	t	struct:llvm::mdconst::detail::HasDereference
YieldCallbackTy	include/IR/LLVMContext.h	/^  typedef void (*YieldCallbackTy)(LLVMContext *Context, void *OpaqueHandle);$/;"	t	class:llvm::LLVMContext
ZExt	include/IR/Attributes.h	/^    ZExt,                  \/\/\/< Zero extended before\/after call$/;"	e	enum:llvm::Attribute::AttrKind
ZExtInst	include/IR/Instructions.h	/^class ZExtInst : public CastInst {$/;"	c	namespace:llvm
ZExtOperator	include/IR/Operator.h	/^class ZExtOperator : public ConcreteOperator<Operator, Instruction::ZExt> {};$/;"	c	namespace:llvm
_X86_	tools/camp/campExecRuntime.cpp	18;"	d	file:
__FIND_FUNCTION_EXIT_BB_HPP	include/corelab/Utilities/FindFunctionExitBB.hpp	2;"	d
__GNUC__	tools/camp/x86timer.hpp	6;"	d
__GNUC__	tools/objtrace/x86timer.hpp	6;"	d
__LLVM_IR_STATEPOINT_H	include/IR/Statepoint.h	17;"	d
__sync_synchronize	configure	/^        __sync_synchronize();$/;"	f
_ascii	configure	/^ _ascii (); _ebcdic ();$/;"	f
_before	include/corelab/Utilities/InstInsertPt.h	/^      bool                                    _before;$/;"	m	class:corelab::InstInsertPt
a	include/IR/PassManagerInternal.h	/^    char a, b;$/;"	m	struct:llvm::detail::PassRunAcceptsAnalysisManager::BigType
a	include/IR/PassManagerInternal.h	/^    char a, b;$/;"	m	struct:llvm::detail::ResultHasInvalidateMethod::BigType
accumulateConstantOffset	include/IR/Operator.h	/^  bool accumulateConstantOffset(const DataLayout &DL, APInt &Offset) const {$/;"	f	class:llvm::GEPOperator
activeStack	include/IR/LegacyPassManagers.h	/^  PMStack activeStack;$/;"	m	class:llvm::PMTopLevelManager
actualCallee	include/IR/Statepoint.h	/^  ValueTy *actualCallee() {$/;"	f	class:llvm::StatepointBase
addBranchWeights	include/IR/IRBuilder.h	/^  InstTy *addBranchWeights(InstTy *I, MDNode *Weights) {$/;"	f	class:llvm::IRBuilder
addCallSiteInfo	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTree::addCallSiteInfo(const Instruction *invokeOrCallInst_, Function *f, LocIDMapForCallSite &locIdOf_callSite){$/;"	f	class:ContextTree
addChild	include/corelab/CAMP/ContextTreeBuilder.h	/^			void addChild(ContextTreeNode *c){$/;"	f	class:corelab::ContextTree
addChild	lib/CAMP/ContextTreeBuilder.h	/^			void addChild(ContextTreeNode *c){$/;"	f	class:corelab::ContextTree
addFnAttr	include/IR/Function.h	/^  void addFnAttr(Attribute::AttrKind N) {$/;"	f	class:llvm::Function
addFnAttr	include/IR/Function.h	/^  void addFnAttr(StringRef Kind) {$/;"	f	class:llvm::Function
addFnAttr	include/IR/Function.h	/^  void addFnAttr(StringRef Kind, StringRef Value) {$/;"	f	class:llvm::Function
addImmutablePass	include/IR/LegacyPassManagers.h	/^  inline void addImmutablePass(ImmutablePass *P) {$/;"	f	class:llvm::PMTopLevelManager
addIncoming	include/IR/Instructions.h	/^  void addIncoming(Value *V, BasicBlock *BB) {$/;"	f	class:llvm::PHINode
addIndirectPassManager	include/IR/LegacyPassManagers.h	/^  inline void addIndirectPassManager(PMDataManager *Manager) {$/;"	f	class:llvm::PMTopLevelManager
addLoopInfo	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTree::addLoopInfo(Loop *l, CntxID cntxID_, LocIDMapForLoop &locIdOf_loop){$/;"	f	class:ContextTree
addMetadata	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::addMetadata() {$/;"	f	class:corelab::EsperantoNamer
addNodeToList	include/IR/Module.h	/^  void addNodeToList(NamedMDNode *) {}$/;"	f	struct:llvm::ilist_traits
addPass	include/IR/PassManager.h	/^  template <typename PassT> void addPass(PassT Pass) {$/;"	f	class:llvm::PassManager
addPassManager	include/IR/LegacyPassManagers.h	/^  void addPassManager(PMDataManager *Manager) {$/;"	f	class:llvm::PMTopLevelManager
addProfilingCodeForCallSite	lib/CAMP/CAMP.cpp	/^void CAMPInstaller::addProfilingCodeForCallSite(Instruction *invokeOrCallInst, Value *locIDVal){$/;"	f	class:CAMPInstaller
addProfilingCodeForCallSite	lib/CAMP/CampExectime.cpp	/^void CAMPExectime::addProfilingCodeForCallSite(Instruction *invokeOrCallInst, Value *locIDVal){$/;"	f	class:CAMPExectime
addProfilingCodeForCallSite	lib/ObjTrace/CtxObjtrace.cpp	/^void CtxObjtrace::addProfilingCodeForCallSite(Instruction *invokeOrCallInst, Value *locIDVal){$/;"	f	class:CtxObjtrace
addProfilingCodeForLoop	lib/CAMP/CAMP.cpp	/^void CAMPInstaller::addProfilingCodeForLoop(Loop *L, Value *locIDVal){$/;"	f	class:CAMPInstaller
addProfilingCodeForLoop	lib/CAMP/CampExectime.cpp	/^void CAMPExectime::addProfilingCodeForLoop(Loop *L, Value *locIDVal){$/;"	f	class:CAMPExectime
addProfilingCodeForLoop	lib/ObjTrace/CtxObjtrace.cpp	/^void CtxObjtrace::addProfilingCodeForLoop(Loop *L, Value *locIDVal){$/;"	f	class:CtxObjtrace
addTargetComparisonCodeForIndCall	lib/CAMP/CAMP.cpp	/^Value *CAMPInstaller::addTargetComparisonCodeForIndCall(const Instruction *invokeOrCallInst, std::vector<std::pair<Function *, LocalContextID>> &targetLocIDs){$/;"	f	class:CAMPInstaller
addTargetComparisonCodeForIndCall	lib/CAMP/CampExectime.cpp	/^Value *CAMPExectime::addTargetComparisonCodeForIndCall(const Instruction *invokeOrCallInst, std::vector<std::pair<Function *, LocalContextID>> &targetLocIDs){$/;"	f	class:CAMPExectime
addTargetComparisonCodeForIndCall	lib/ObjTrace/CtxObjtrace.cpp	/^Value *CtxObjtrace::addTargetComparisonCodeForIndCall(const Instruction *invokeOrCallInst, std::vector<std::pair<Function *, LocalContextID>> &targetLocIDs){$/;"	f	class:CtxObjtrace
addToList	include/IR/Use.h	/^  void addToList(Use **List) {$/;"	f	class:llvm::Use
addUse	include/IR/Value.h	/^  void addUse(Use &U) { U.addToList(&UseList); }$/;"	f	class:llvm::Value
advancePastNonTerminators	include/IR/CFG.h	/^  inline void advancePastNonTerminators() {$/;"	f	class:llvm::PredIterator
advanceToNextBB	include/IR/InstIterator.h	/^  inline void advanceToNextBB() {$/;"	f	class:llvm::InstIterator
alias_begin	include/IR/Module.h	/^  alias_iterator       alias_begin()            { return AliasList.begin(); }$/;"	f	class:llvm::Module
alias_begin	include/IR/Module.h	/^  const_alias_iterator alias_begin() const      { return AliasList.begin(); }$/;"	f	class:llvm::Module
alias_empty	include/IR/Module.h	/^  bool                 alias_empty() const      { return AliasList.empty(); }$/;"	f	class:llvm::Module
alias_end	include/IR/Module.h	/^  alias_iterator       alias_end  ()            { return AliasList.end();   }$/;"	f	class:llvm::Module
alias_end	include/IR/Module.h	/^  const_alias_iterator alias_end  () const      { return AliasList.end();   }$/;"	f	class:llvm::Module
alias_iterator	include/IR/Module.h	/^  typedef AliasListType::iterator                        alias_iterator;$/;"	t	class:llvm::Module
alias_size	include/IR/Module.h	/^  size_t               alias_size () const      { return AliasList.size();  }$/;"	f	class:llvm::Module
aliases	include/IR/Module.h	/^  iterator_range<alias_iterator> aliases() {$/;"	f	class:llvm::Module
aliases	include/IR/Module.h	/^  iterator_range<const_alias_iterator> aliases() const {$/;"	f	class:llvm::Module
all	include/IR/PassManager.h	/^  static PreservedAnalyses all() {$/;"	f	class:llvm::PreservedAnalyses
allUsesReplacedWith	include/IR/ValueHandle.h	/^  virtual void allUsesReplacedWith(Value *) {}$/;"	f	class:llvm::CallbackVH
allocIdMap	tools/objtrace/objtraceruntime.cpp	/^AllocMap *allocIdMap;$/;"	v
allowReciprocal	include/IR/Operator.h	/^  bool allowReciprocal() { return 0 != (Flags & AllowReciprocal); }$/;"	f	class:llvm::FastMathFlags
alreadyChecked	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<Instruction*> alreadyChecked;$/;"	m	class:corelab::EsperantoNamer
any	include/IR/Operator.h	/^  bool any() { return Flags != 0; }$/;"	f	class:llvm::FastMathFlags
api_pred_ty	include/IR/PatternMatch.h	/^  api_pred_ty(const APInt *&R) : Res(R) {}$/;"	f	struct:llvm::PatternMatch::api_pred_ty
api_pred_ty	include/IR/PatternMatch.h	/^template <typename Predicate> struct api_pred_ty : public Predicate {$/;"	s	namespace:llvm::PatternMatch
apint_match	include/IR/PatternMatch.h	/^  apint_match(const APInt *&R) : Res(R) {}$/;"	f	struct:llvm::PatternMatch::apint_match
apint_match	include/IR/PatternMatch.h	/^struct apint_match {$/;"	s	namespace:llvm::PatternMatch
appendModuleInlineAsm	include/IR/Module.h	/^  void appendModuleInlineAsm(StringRef Asm) {$/;"	f	class:llvm::Module
appendToConstructorArray	lib/Utilities/GlobalCtors.cpp	/^  static void appendToConstructorArray( Function *f, const std::string &name, const unsigned int priority = 65535, const bool ascending = true) {$/;"	f	namespace:corelab
areAllPreserved	include/IR/PassManager.h	/^  bool areAllPreserved() const {$/;"	f	class:llvm::PreservedAnalyses
arg_begin	include/IR/CallSite.h	/^  IterTy arg_begin() const {$/;"	f	class:llvm::CallSiteBase
arg_begin	include/IR/Function.h	/^  arg_iterator arg_begin() {$/;"	f	class:llvm::Function
arg_begin	include/IR/Function.h	/^  const_arg_iterator arg_begin() const {$/;"	f	class:llvm::Function
arg_empty	include/IR/CallSite.h	/^  bool arg_empty() const { return arg_end() == arg_begin(); }$/;"	f	class:llvm::CallSiteBase
arg_end	include/IR/CallSite.h	/^  IterTy arg_end() const { return (*this)->op_end() - getArgumentEndOffset(); }$/;"	f	class:llvm::CallSiteBase
arg_end	include/IR/Function.h	/^  arg_iterator arg_end() {$/;"	f	class:llvm::Function
arg_end	include/IR/Function.h	/^  const_arg_iterator arg_end() const {$/;"	f	class:llvm::Function
arg_iterator	include/IR/CallSite.h	/^  typedef IterTy arg_iterator;$/;"	t	class:llvm::CallSiteBase
arg_iterator	include/IR/Function.h	/^  typedef ArgumentListType::iterator arg_iterator;$/;"	t	class:llvm::Function
arg_iterator	include/IR/Statepoint.h	/^  typedef typename CallSiteTy::arg_iterator arg_iterator;$/;"	t	class:llvm::StatepointBase
arg_operands	include/IR/Instructions.h	/^  iterator_range<const_op_iterator> arg_operands() const {$/;"	f	class:llvm::CallInst
arg_operands	include/IR/Instructions.h	/^  iterator_range<const_op_iterator> arg_operands() const {$/;"	f	class:llvm::InvokeInst
arg_operands	include/IR/Instructions.h	/^  iterator_range<op_iterator> arg_operands() {$/;"	f	class:llvm::CallInst
arg_operands	include/IR/Instructions.h	/^  iterator_range<op_iterator> arg_operands() {$/;"	f	class:llvm::InvokeInst
arg_size	include/IR/CallSite.h	/^  unsigned arg_size() const { return unsigned(arg_end() - arg_begin()); }$/;"	f	class:llvm::CallSiteBase
args	include/IR/Function.h	/^  iterator_range<arg_iterator> args() {$/;"	f	class:llvm::Function
args	include/IR/Function.h	/^  iterator_range<const_arg_iterator> args() const {$/;"	f	class:llvm::Function
armtimer	tools/camp/armtimer.hpp	/^class armtimer{$/;"	c
as_func_failure	configure	/^as_func_failure () {$/;"	f
as_func_ret_failure	configure	/^as_func_ret_failure () {$/;"	f
as_func_ret_success	configure	/^as_func_ret_success () {$/;"	f
as_func_success	configure	/^as_func_success () {$/;"	f
assignerUcID	include/corelab/CAMP/ContextTreeBuilder.h	/^			UniqueContextID assignerUcID;$/;"	m	class:corelab::ContextTreeBuilder
assignerUcID	lib/CAMP/ContextTreeBuilder.h	/^			UniqueContextID assignerUcID;$/;"	m	class:corelab::ContextTreeBuilder
atEnd	include/IR/InstIterator.h	/^  inline bool atEnd() const { return BB == BBs->end(); }$/;"	f	class:llvm::InstIterator
atEnd	include/IR/Value.h	/^    bool atEnd() const { return *this == user_iterator_impl(); }$/;"	f	class:llvm::Value::user_iterator_impl
atSameLineAs	include/IR/DebugInfo.h	/^  bool atSameLineAs(const DILocation &Other) const {$/;"	f	class:llvm::DILocation
b	include/IR/PassManagerInternal.h	/^    char a, b;$/;"	m	struct:llvm::detail::PassRunAcceptsAnalysisManager::BigType
b	include/IR/PassManagerInternal.h	/^    char a, b;$/;"	m	struct:llvm::detail::ResultHasInvalidateMethod::BigType
back	include/IR/BasicBlock.h	/^  inline       Instruction       &back()       { return InstList.back();  }$/;"	f	class:llvm::BasicBlock
back	include/IR/BasicBlock.h	/^  inline const Instruction       &back() const { return InstList.back();  }$/;"	f	class:llvm::BasicBlock
back	include/IR/Function.h	/^        BasicBlock        &back()       { return BasicBlocks.back();  }$/;"	f	class:llvm::Function
back	include/IR/Function.h	/^  const BasicBlock        &back() const { return BasicBlocks.back();  }$/;"	f	class:llvm::Function
base	include/IR/ValueMap.h	/^  BaseT base() const { return I; }$/;"	f	class:llvm::ValueMapConstIterator
base	include/IR/ValueMap.h	/^  BaseT base() const { return I; }$/;"	f	class:llvm::ValueMapIterator
base	include/corelab/CAMP/campTimer.h	/^			static double base;$/;"	m	namespace:corelab::CAMP::Timer
basePtr	include/IR/Statepoint.h	/^  Value *basePtr() {$/;"	f	class:llvm::GCRelocateOperands
basePtrIndex	include/IR/Statepoint.h	/^  unsigned basePtrIndex() {$/;"	f	class:llvm::GCRelocateOperands
basicBlockCount	include/corelab/Metadata/Metadata.h	/^			uint16_t basicBlockCount;$/;"	m	class:corelab::Namer
basicBlockId	include/corelab/Metadata/Metadata.h	/^		uint16_t basicBlockId;$/;"	m	struct:corelab::__anon5
basicBlockId	include/corelab/Metadata/Metadata.h	/^		uint16_t basicBlockId;$/;"	m	struct:corelab::__anon6
bbTripCountMap_t	include/corelab/Metadata/typedefs.h	/^  typedef DenseMap<BasicBlock*, unsigned int>   bbTripCountMap_t;$/;"	t	namespace:corelab
before	include/corelab/Utilities/InstInsertPt.h	/^      bool before() const {$/;"	f	class:corelab::InstInsertPt
begin	include/IR/BasicBlock.h	/^  inline const_iterator          begin() const { return InstList.begin(); }$/;"	f	class:llvm::BasicBlock
begin	include/IR/BasicBlock.h	/^  inline iterator                begin()       { return InstList.begin(); }$/;"	f	class:llvm::BasicBlock
begin	include/IR/DebugInfo.h	/^  iterator begin() const { return get()->elements_begin(); }$/;"	f	class:llvm::DIExpression
begin	include/IR/Function.h	/^  const_iterator          begin() const { return BasicBlocks.begin(); }$/;"	f	class:llvm::Function
begin	include/IR/Function.h	/^  iterator                begin()       { return BasicBlocks.begin(); }$/;"	f	class:llvm::Function
begin	include/IR/GetElementPtrTypeIterator.h	/^    static generic_gep_type_iterator begin(Type *Ty, ItTy It) {$/;"	f	class:llvm::generic_gep_type_iterator
begin	include/IR/LegacyPassManagers.h	/^  iterator begin() const { return S.rbegin(); }$/;"	f	class:llvm::PMStack
begin	include/IR/Metadata.h	/^  iterator begin() const { return getString().begin(); }$/;"	f	class:llvm::MDString
begin	include/IR/Module.h	/^  const_iterator          begin() const { return FunctionList.begin(); }$/;"	f	class:llvm::Module
begin	include/IR/Module.h	/^  iterator                begin()       { return FunctionList.begin(); }$/;"	f	class:llvm::Module
begin	include/IR/TypeFinder.h	/^  const_iterator begin() const { return StructTypes.begin(); }$/;"	f	class:llvm::TypeFinder
begin	include/IR/TypeFinder.h	/^  iterator begin() { return StructTypes.begin(); }$/;"	f	class:llvm::TypeFinder
begin	include/IR/ValueMap.h	/^  inline const_iterator begin() const { return const_iterator(Map.begin()); }$/;"	f	class:llvm::ValueMap
begin	include/IR/ValueMap.h	/^  inline iterator begin() { return iterator(Map.begin()); }$/;"	f	class:llvm::ValueMap
begin	include/IR/ValueSymbolTable.h	/^  inline const_iterator begin() const { return vmap.begin(); }$/;"	f	class:llvm::ValueSymbolTable
begin	include/IR/ValueSymbolTable.h	/^  inline iterator begin() { return vmap.begin(); }$/;"	f	class:llvm::ValueSymbolTable
begin	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      const_iterator          begin() const { return recFuncList.begin(); }$/;"	f	class:corelab::RecursiveFuncAnal
begin	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      iterator                begin()       { return recFuncList.begin(); }$/;"	f	class:corelab::RecursiveFuncAnal
begin	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      const_iterator          begin() const { return recFuncList.begin(); }$/;"	f	class:corelab::RecursiveFuncAnal
begin	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      iterator                begin()       { return recFuncList.begin(); }$/;"	f	class:corelab::RecursiveFuncAnal
bind_const_intval_ty	include/IR/PatternMatch.h	/^  bind_const_intval_ty(uint64_t &V) : VR(V) {}$/;"	f	struct:llvm::PatternMatch::bind_const_intval_ty
bind_const_intval_ty	include/IR/PatternMatch.h	/^struct bind_const_intval_ty {$/;"	s	namespace:llvm::PatternMatch
bind_ty	include/IR/PatternMatch.h	/^  bind_ty(Class *&V) : VR(V) {}$/;"	f	struct:llvm::PatternMatch::bind_ty
bind_ty	include/IR/PatternMatch.h	/^template <typename Class> struct bind_ty {$/;"	s	namespace:llvm::PatternMatch
block_begin	include/IR/Instructions.h	/^  block_iterator block_begin() {$/;"	f	class:llvm::PHINode
block_begin	include/IR/Instructions.h	/^  const_block_iterator block_begin() const {$/;"	f	class:llvm::PHINode
block_end	include/IR/Instructions.h	/^  block_iterator block_end() {$/;"	f	class:llvm::PHINode
block_end	include/IR/Instructions.h	/^  const_block_iterator block_end() const {$/;"	f	class:llvm::PHINode
block_iterator	include/IR/Instructions.h	/^  typedef BasicBlock **block_iterator;$/;"	t	class:llvm::PHINode
br_match	include/IR/PatternMatch.h	/^  br_match(BasicBlock *&Succ) : Succ(Succ) {}$/;"	f	struct:llvm::PatternMatch::br_match
br_match	include/IR/PatternMatch.h	/^struct br_match {$/;"	s	namespace:llvm::PatternMatch
brc_match	include/IR/PatternMatch.h	/^  brc_match(const Cond_t &C, BasicBlock *&t, BasicBlock *&f)$/;"	f	struct:llvm::PatternMatch::brc_match
brc_match	include/IR/PatternMatch.h	/^template <typename Cond_t> struct brc_match {$/;"	s	namespace:llvm::PatternMatch
buildCalledFunctionList	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::buildCalledFunctionList(){$/;"	f	class:corelab::EsperantoNamer
buildClassNameList	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::buildClassNameList(){$/;"	f	class:corelab::EsperantoNamer
buildRemoteCallFunctionTable	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::buildRemoteCallFunctionTable(){$/;"	f	class:corelab::EsperantoNamer
buildTypeBasedMatching	lib/AliasAnalysis/IndirectCallAnal.cpp	/^void IndirectCallAnal::buildTypeBasedMatching(){$/;"	f	class:IndirectCallAnal
bytes_begin	include/IR/Metadata.h	/^  const unsigned char *bytes_begin() const { return getString().bytes_begin(); }$/;"	f	class:llvm::MDString
bytes_end	include/IR/Metadata.h	/^  const unsigned char *bytes_end() const { return getString().bytes_end(); }$/;"	f	class:llvm::MDString
callAfterMain	lib/Utilities/GlobalCtors.cpp	/^  void callAfterMain( Function *f, const unsigned int priority ) {$/;"	f	namespace:corelab
callBeforeMain	lib/Utilities/GlobalCtors.cpp	/^  void callBeforeMain( Function *f, const unsigned int priority) {$/;"	f	namespace:corelab
callCntOf	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			CallCountOf callCntOf; \/\/for Statistics, # of indirect call count for eeach target Candidate functions.	$/;"	m	class:corelab::IndirectCallAnal
callCntOf	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			CallCountOf callCntOf; \/\/for Statistics, # of indirect call count for eeach target Candidate functions.	$/;"	m	class:corelab::IndirectCallAnal
callCount	include/corelab/Metadata/Metadata.h	/^			uint16_t callCount;$/;"	m	class:corelab::Namer
callHistory	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      CallStack callHistory; \/\/mutually recursive functions may be represented as one recursive function$/;"	m	class:corelab::RecursiveFuncAnal
callHistory	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      CallStack callHistory; \/\/mutually recursive functions may be represented as one recursive function$/;"	m	class:corelab::RecursiveFuncAnal
callMap	include/corelab/Metadata/NamedMetadata.h	/^			std::map<CallInst*, DeviceEntry*> callMap;$/;"	m	class:corelab::EsperantoNamer
call_args	include/IR/Statepoint.h	/^  iterator_range<arg_iterator> call_args() {$/;"	f	class:llvm::StatepointBase
call_args_begin	include/IR/Statepoint.h	/^  typename CallSiteTy::arg_iterator call_args_begin() {$/;"	f	class:llvm::StatepointBase
call_args_end	include/IR/Statepoint.h	/^  typename CallSiteTy::arg_iterator call_args_end() {$/;"	f	class:llvm::StatepointBase
calledFunctionList	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<Function*> calledFunctionList;$/;"	m	class:corelab::EsperantoNamer
callingFunctionId	include/corelab/Metadata/Metadata.h	/^		uint16_t callingFunctionId;$/;"	m	struct:corelab::__anon5
callsWithNoTarget	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      std::vector<IndirectCall> callsWithNoTarget;$/;"	m	class:corelab::RecursiveFuncAnal
callsWithNoTarget	include/corelab/CAMP/ContextTreeBuilder.h	/^			std::vector<IndirectCall> callsWithNoTarget;$/;"	m	class:corelab::ContextTreeBuilder
callsWithNoTarget	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      std::vector<IndirectCall> callsWithNoTarget;$/;"	m	class:corelab::RecursiveFuncAnal
callsWithNoTarget	lib/CAMP/ContextTreeBuilder.h	/^			std::vector<IndirectCall> callsWithNoTarget;$/;"	m	class:corelab::ContextTreeBuilder
campCallSiteBegin	include/corelab/CAMP/CAMP.h	/^			Constant *campCallSiteBegin;$/;"	m	class:corelab::CAMPInstaller
campCallSiteBegin	lib/CAMP/CAMP.h	/^			Constant *campCallSiteBegin;$/;"	m	class:corelab::CAMPInstaller
campCallSiteBegin	tools/camp/campRuntime.cpp	/^void campCallSiteBegin (CntxID cntxID) {$/;"	f
campCallSiteBegin	tools/campSampling/campRuntime.cpp	/^void campCallSiteBegin (CntxID cntxID) {$/;"	f
campCallSiteEnd	include/corelab/CAMP/CAMP.h	/^			Constant *campCallSiteEnd;$/;"	m	class:corelab::CAMPInstaller
campCallSiteEnd	lib/CAMP/CAMP.h	/^			Constant *campCallSiteEnd;$/;"	m	class:corelab::CAMPInstaller
campCallSiteEnd	tools/camp/campRuntime.cpp	/^void campCallSiteEnd  (CntxID cntxID) {$/;"	f
campCallSiteEnd	tools/campSampling/campRuntime.cpp	/^void campCallSiteEnd  (CntxID cntxID) {$/;"	f
campCalloc	include/corelab/CAMP/CAMP.h	/^			Constant *campCalloc;$/;"	m	class:corelab::CAMPInstaller
campCalloc	lib/CAMP/CAMP.h	/^			Constant *campCalloc;$/;"	m	class:corelab::CAMPInstaller
campCalloc	tools/camp/campRuntime.cpp	/^campCalloc (size_t size, size_t num){$/;"	f
campCalloc	tools/campSampling/campRuntime.cpp	/^campCalloc (size_t size, size_t num){$/;"	f
campDisableCtxtChange	include/corelab/CAMP/CAMP.h	/^			Constant *campDisableCtxtChange;$/;"	m	class:corelab::CAMPInstaller
campDisableCtxtChange	lib/CAMP/CAMP.h	/^			Constant *campDisableCtxtChange;$/;"	m	class:corelab::CAMPInstaller
campDisableCtxtChange	tools/camp/campRuntime.cpp	/^extern "C" void campDisableCtxtChange(){$/;"	f
campDisableCtxtChange	tools/campSampling/campRuntime.cpp	/^extern "C" void campDisableCtxtChange(){$/;"	f
campEnableCtxtChange	include/corelab/CAMP/CAMP.h	/^			Constant *campEnableCtxtChange;$/;"	m	class:corelab::CAMPInstaller
campEnableCtxtChange	lib/CAMP/CAMP.h	/^			Constant *campEnableCtxtChange;$/;"	m	class:corelab::CAMPInstaller
campEnableCtxtChange	tools/camp/campRuntime.cpp	/^extern "C" void campEnableCtxtChange(){$/;"	f
campEnableCtxtChange	tools/campSampling/campRuntime.cpp	/^extern "C" void campEnableCtxtChange(){$/;"	f
campExecCallSiteBegin	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecCallSiteBegin;$/;"	m	class:corelab::CAMPExectime
campExecCallSiteBegin	lib/CAMP/CampExectime.h	/^			Constant *campExecCallSiteBegin;$/;"	m	class:corelab::CAMPExectime
campExecCallSiteBegin	tools/camp/campExecRuntime.cpp	/^void campExecCallSiteBegin (CntxID cntxID) {$/;"	f
campExecCallSiteEnd	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecCallSiteEnd;$/;"	m	class:corelab::CAMPExectime
campExecCallSiteEnd	lib/CAMP/CampExectime.h	/^			Constant *campExecCallSiteEnd;$/;"	m	class:corelab::CAMPExectime
campExecCallSiteEnd	tools/camp/campExecRuntime.cpp	/^void campExecCallSiteEnd  (CntxID cntxID) {$/;"	f
campExecDisableCtxtChange	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecDisableCtxtChange;$/;"	m	class:corelab::CAMPExectime
campExecDisableCtxtChange	lib/CAMP/CampExectime.h	/^			Constant *campExecDisableCtxtChange;$/;"	m	class:corelab::CAMPExectime
campExecDisableCtxtChange	tools/camp/campExecRuntime.cpp	/^extern "C" void campExecDisableCtxtChange(){$/;"	f
campExecEnableCtxtChange	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecEnableCtxtChange;$/;"	m	class:corelab::CAMPExectime
campExecEnableCtxtChange	lib/CAMP/CampExectime.h	/^			Constant *campExecEnableCtxtChange;$/;"	m	class:corelab::CAMPExectime
campExecEnableCtxtChange	tools/camp/campExecRuntime.cpp	/^extern "C" void campExecEnableCtxtChange(){$/;"	f
campExecFinalize	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecFinalize;$/;"	m	class:corelab::CAMPExectime
campExecFinalize	lib/CAMP/CampExectime.h	/^			Constant *campExecFinalize;$/;"	m	class:corelab::CAMPExectime
campExecFinalize	tools/camp/campExecRuntime.cpp	/^void campExecFinalize (bool removeLoop) {	\/\/ edit later$/;"	f
campExecInitialize	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecInitialize;$/;"	m	class:corelab::CAMPExectime
campExecInitialize	lib/CAMP/CampExectime.h	/^			Constant *campExecInitialize;$/;"	m	class:corelab::CAMPExectime
campExecInitialize	tools/camp/campExecRuntime.cpp	/^void campExecInitialize (size_t ldrCnt, size_t strCnt, size_t callCnt, size_t loopCnt, size_t maxLoopDepth) {$/;"	f
campExecLoopBegin	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecLoopBegin;$/;"	m	class:corelab::CAMPExectime
campExecLoopBegin	lib/CAMP/CampExectime.h	/^			Constant *campExecLoopBegin;$/;"	m	class:corelab::CAMPExectime
campExecLoopBegin	tools/camp/campExecRuntime.cpp	/^void campExecLoopBegin (CntxID cntxID) { \/\/arg is LocId$/;"	f
campExecLoopEnd	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecLoopEnd;$/;"	m	class:corelab::CAMPExectime
campExecLoopEnd	lib/CAMP/CampExectime.h	/^			Constant *campExecLoopEnd;$/;"	m	class:corelab::CAMPExectime
campExecLoopEnd	tools/camp/campExecRuntime.cpp	/^void campExecLoopEnd (CntxID cntxID) {$/;"	f
campExecLoopNext	include/corelab/CAMP/CampExectime.h	/^			Constant *campExecLoopNext;$/;"	m	class:corelab::CAMPExectime
campExecLoopNext	lib/CAMP/CampExectime.h	/^			Constant *campExecLoopNext;$/;"	m	class:corelab::CAMPExectime
campExecLoopNext	tools/camp/campExecRuntime.cpp	/^void campExecLoopNext () {$/;"	f
campFinalize	include/corelab/CAMP/CAMP.h	/^			Constant *campFinalize;$/;"	m	class:corelab::CAMPInstaller
campFinalize	include/corelab/CAMP/CampPlain.h	/^			Constant *campFinalize;$/;"	m	class:corelab::CAMPPlain
campFinalize	lib/CAMP/CAMP.h	/^			Constant *campFinalize;$/;"	m	class:corelab::CAMPInstaller
campFinalize	lib/CAMP/CampPlain.h	/^			Constant *campFinalize;$/;"	m	class:corelab::CAMPPlain
campFinalize	tools/camp/campRuntime.cpp	/^void campFinalize () {$/;"	f
campFinalize	tools/campSampling/campRuntime.cpp	/^void campFinalize () {$/;"	f
campFree	include/corelab/CAMP/CAMP.h	/^			Constant *campFree;$/;"	m	class:corelab::CAMPInstaller
campFree	lib/CAMP/CAMP.h	/^			Constant *campFree;$/;"	m	class:corelab::CAMPInstaller
campFree	tools/camp/campRuntime.cpp	/^campFree (void* addr){$/;"	f
campFree	tools/campSampling/campRuntime.cpp	/^campFree (void* addr){$/;"	f
campID	tools/camp/campRuntime.h	/^	CampID campID;$/;"	m	struct:StoreHistoryElem
campID	tools/campSampling/campRuntime.h	/^	CampID campID;$/;"	m	struct:StoreHistoryElem
campInitialize	include/corelab/CAMP/CAMP.h	/^			Constant *campInitialize;$/;"	m	class:corelab::CAMPInstaller
campInitialize	include/corelab/CAMP/CampPlain.h	/^			Constant *campInitialize;$/;"	m	class:corelab::CAMPPlain
campInitialize	lib/CAMP/CAMP.h	/^			Constant *campInitialize;$/;"	m	class:corelab::CAMPInstaller
campInitialize	lib/CAMP/CampPlain.h	/^			Constant *campInitialize;$/;"	m	class:corelab::CAMPPlain
campInitialize	tools/camp/campRuntime.cpp	/^void campInitialize (size_t ldrCnt, size_t strCnt, size_t callCnt, size_t loopCnt, size_t maxLoopDepth) {$/;"	f
campInitialize	tools/campSampling/campRuntime.cpp	/^void campInitialize (size_t ldrCnt, size_t strCnt, size_t callCnt, size_t loopCnt, size_t maxLoopDepth) {$/;"	f
campLoadInstr	include/corelab/CAMP/CAMP.h	/^			Constant *campLoadInstr;$/;"	m	class:corelab::CAMPInstaller
campLoadInstr	lib/CAMP/CAMP.h	/^			Constant *campLoadInstr;$/;"	m	class:corelab::CAMPInstaller
campLoadInstr	tools/camp/campRuntime.cpp	/^void campLoadInstr (void* addr, InstrID instrID) {$/;"	f
campLoadInstr	tools/campSampling/campRuntime.cpp	/^void campLoadInstr (void* addr, InstrID instrID) {$/;"	f
campLoopBegin	include/corelab/CAMP/CAMP.h	/^			Constant *campLoopBegin;$/;"	m	class:corelab::CAMPInstaller
campLoopBegin	lib/CAMP/CAMP.h	/^			Constant *campLoopBegin;$/;"	m	class:corelab::CAMPInstaller
campLoopBegin	tools/camp/campRuntime.cpp	/^void campLoopBegin (CntxID cntxID) {$/;"	f
campLoopBegin	tools/campSampling/campRuntime.cpp	/^void campLoopBegin (CntxID cntxID) {$/;"	f
campLoopEnd	include/corelab/CAMP/CAMP.h	/^			Constant *campLoopEnd;$/;"	m	class:corelab::CAMPInstaller
campLoopEnd	lib/CAMP/CAMP.h	/^			Constant *campLoopEnd;$/;"	m	class:corelab::CAMPInstaller
campLoopEnd	tools/camp/campRuntime.cpp	/^void campLoopEnd (CntxID cntxID) {$/;"	f
campLoopEnd	tools/campSampling/campRuntime.cpp	/^void campLoopEnd (CntxID cntxID) {$/;"	f
campLoopNext	include/corelab/CAMP/CAMP.h	/^			Constant *campLoopNext;$/;"	m	class:corelab::CAMPInstaller
campLoopNext	lib/CAMP/CAMP.h	/^			Constant *campLoopNext;$/;"	m	class:corelab::CAMPInstaller
campLoopNext	tools/camp/campRuntime.cpp	/^void campLoopNext () {$/;"	f
campLoopNext	tools/campSampling/campRuntime.cpp	/^void campLoopNext () {$/;"	f
campMalloc	include/corelab/CAMP/CAMP.h	/^			Constant *campMalloc;$/;"	m	class:corelab::CAMPInstaller
campMalloc	lib/CAMP/CAMP.h	/^			Constant *campMalloc;$/;"	m	class:corelab::CAMPInstaller
campMalloc	tools/camp/campRuntime.cpp	/^campMalloc (size_t size){$/;"	f
campMalloc	tools/campSampling/campRuntime.cpp	/^campMalloc (size_t size){$/;"	f
campRealloc	include/corelab/CAMP/CAMP.h	/^			Constant *campRealloc;$/;"	m	class:corelab::CAMPInstaller
campRealloc	lib/CAMP/CAMP.h	/^			Constant *campRealloc;$/;"	m	class:corelab::CAMPInstaller
campRealloc	tools/camp/campRuntime.cpp	/^campRealloc (void* addr, size_t size){$/;"	f
campRealloc	tools/campSampling/campRuntime.cpp	/^campRealloc (void* addr, size_t size){$/;"	f
campStoreInstr	include/corelab/CAMP/CAMP.h	/^			Constant *campStoreInstr;$/;"	m	class:corelab::CAMPInstaller
campStoreInstr	lib/CAMP/CAMP.h	/^			Constant *campStoreInstr;$/;"	m	class:corelab::CAMPInstaller
campStoreInstr	tools/camp/campRuntime.cpp	/^void campStoreInstr (void* addr, InstrID instrID) {$/;"	f
campStoreInstr	tools/campSampling/campRuntime.cpp	/^void campStoreInstr (void* addr, InstrID instrID) {$/;"	f
canReturnTwice	include/IR/Instructions.h	/^  bool canReturnTwice() const {$/;"	f	class:llvm::CallInst
cannotDuplicate	include/IR/Function.h	/^  bool cannotDuplicate() const {$/;"	f	class:llvm::Function
cannotDuplicate	include/IR/Instructions.h	/^  bool cannotDuplicate() const {return hasFnAttr(Attribute::NoDuplicate); }$/;"	f	class:llvm::CallInst
cannotDuplicate	include/IR/Instructions.h	/^  bool cannotDuplicate() const {return hasFnAttr(Attribute::NoDuplicate); }$/;"	f	class:llvm::InvokeInst
case_begin	include/IR/Instructions.h	/^  CaseIt case_begin() {$/;"	f	class:llvm::SwitchInst
case_begin	include/IR/Instructions.h	/^  ConstCaseIt case_begin() const {$/;"	f	class:llvm::SwitchInst
case_default	include/IR/Instructions.h	/^  CaseIt case_default() {$/;"	f	class:llvm::SwitchInst
case_default	include/IR/Instructions.h	/^  ConstCaseIt case_default() const {$/;"	f	class:llvm::SwitchInst
case_end	include/IR/Instructions.h	/^  CaseIt case_end() {$/;"	f	class:llvm::SwitchInst
case_end	include/IR/Instructions.h	/^  ConstCaseIt case_end() const {$/;"	f	class:llvm::SwitchInst
cases	include/IR/Instructions.h	/^  iterator_range<CaseIt> cases() {$/;"	f	class:llvm::SwitchInst
cases	include/IR/Instructions.h	/^  iterator_range<ConstCaseIt> cases() const {$/;"	f	class:llvm::SwitchInst
castTo	lib/CAMP/CAMP.cpp	/^Value* CAMPInstaller::castTo(Value* from, Value* to, InstInsertPt &out, const DataLayout *dl)$/;"	f	class:CAMPInstaller
castTo	lib/ObjTrace/CtxObjtrace.cpp	/^Value* CtxObjtrace::castTo(Value* from, Value* to, InstInsertPt &out, const DataLayout *dl)$/;"	f	class:CtxObjtrace
castTo	lib/ObjTrace/ObjTrace.cpp	/^Value* ObjTrace::castTo(Value* from, Value* to, InstInsertPt &out, const DataLayout *dl)$/;"	f	class:ObjTrace
checkCallHistoryAndMark	lib/AliasAnalysis/RecursiveFuncAnal.cpp	/^bool RecursiveFuncAnal::checkCallHistoryAndMark(Instruction *invokeOrCallInst, Function *callee){$/;"	f	class:RecursiveFuncAnal
checkCallInsts	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::checkCallInsts(Function* F, EsperantoNamer::DeviceEntry* dev) {	$/;"	f	class:corelab::EsperantoNamer
checkFunction	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::checkFunction() {$/;"	f	class:corelab::EsperantoNamer
checkGEPType	include/IR/Instructions.h	/^inline Type *checkGEPType(Type *Ty) {$/;"	f	namespace:llvm
checkUseDefChains	lib/Metadata/EsperantoNamer.cpp	/^	bool EsperantoNamer::checkUseDefChains() {$/;"	f	class:corelab::EsperantoNamer
checkedValueInFunction	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<Value*> checkedValueInFunction;$/;"	m	class:corelab::EsperantoNamer
child_begin	include/IR/CFG.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	include/IR/Dominators.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	include/IR/Type.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	include/IR/CFG.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	include/IR/Dominators.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	include/IR/Type.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
children	include/corelab/CAMP/ContextTreeBuilder.h	/^			std::vector<ContextTree *> children;$/;"	m	class:corelab::ContextTree
children	lib/CAMP/ContextTreeBuilder.h	/^			std::vector<ContextTree *> children;$/;"	m	class:corelab::ContextTree
classNameList	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<std::string> classNameList;$/;"	m	class:corelab::EsperantoNamer
class_match	include/IR/PatternMatch.h	/^template <typename Class> struct class_match {$/;"	s	namespace:llvm::PatternMatch
classof	include/IR/Argument.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Argument
classof	include/IR/BasicBlock.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BasicBlock
classof	include/IR/Constant.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Constant
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantAggregateZero
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantArray
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantDataArray
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantDataSequential
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantDataVector
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantFP
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantInt
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantPointerNull
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantStruct
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantVector
classof	include/IR/Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::UndefValue
classof	include/IR/Constants.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BlockAddress
classof	include/IR/Constants.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ConstantExpr
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::DebugNode
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::GenericDebugNode
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDBasicType
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDCompileUnit
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDCompositeType
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDCompositeTypeBase
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDDerivedType
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDDerivedTypeBase
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDEnumerator
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDExpression
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDFile
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDGlobalVariable
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDImportedEntity
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDLexicalBlock
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDLexicalBlockBase
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDLexicalBlockFile
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDLocalScope
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDLocalVariable
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDLocation
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDNamespace
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDObjCProperty
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDScope
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDSubprogram
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDSubrange
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDSubroutineType
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDTemplateParameter
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDTemplateTypeParameter
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDTemplateValueParameter
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDType
classof	include/IR/DebugInfoMetadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDVariable
classof	include/IR/DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::ArrayType
classof	include/IR/DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::CompositeType
classof	include/IR/DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::FunctionType
classof	include/IR/DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::IntegerType
classof	include/IR/DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::PointerType
classof	include/IR/DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::SequentialType
classof	include/IR/DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::StructType
classof	include/IR/DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::VectorType
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoDebugMetadataVersion
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoInlineAsm
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoOptimizationBase
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoOptimizationFailure
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoOptimizationRemark
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoOptimizationRemarkAnalysis
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoOptimizationRemarkMissed
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoSampleProfile
classof	include/IR/DiagnosticInfo.h	/^  static bool classof(const DiagnosticInfo *DI) {$/;"	f	class:llvm::DiagnosticInfoStackSize
classof	include/IR/Function.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Function
classof	include/IR/GlobalAlias.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::GlobalAlias
classof	include/IR/GlobalObject.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::GlobalObject
classof	include/IR/GlobalValue.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::GlobalValue
classof	include/IR/GlobalVariable.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::GlobalVariable
classof	include/IR/InlineAsm.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::InlineAsm
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::BinaryOperator
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::CastInst
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::CmpInst
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::TerminatorInst
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::UnaryInstruction
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BinaryOperator
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::CastInst
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::CmpInst
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::TerminatorInst
classof	include/IR/InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::UnaryInstruction
classof	include/IR/Instruction.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Instruction
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::AddrSpaceCastInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::AllocaInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::AtomicCmpXchgInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::AtomicRMWInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::BitCastInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::BranchInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::CallInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ExtractElementInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ExtractValueInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FCmpInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPExtInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPToSIInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPToUIInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPTruncInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FenceInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::GetElementPtrInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ICmpInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::IndirectBrInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::InsertElementInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::InsertValueInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::IntToPtrInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::InvokeInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::LandingPadInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::LoadInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::PHINode
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::PtrToIntInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ResumeInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ReturnInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::SExtInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::SIToFPInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::SelectInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ShuffleVectorInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::StoreInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::SwitchInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::TruncInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::UIToFPInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::UnreachableInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::VAArgInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ZExtInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::AddrSpaceCastInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::AllocaInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::AtomicCmpXchgInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::AtomicRMWInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BitCastInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BranchInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::CallInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ExtractElementInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ExtractValueInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FCmpInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPExtInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPToSIInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPToUIInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPTruncInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FenceInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::GetElementPtrInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ICmpInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::IndirectBrInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::InsertElementInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::InsertValueInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::IntToPtrInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::InvokeInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::LandingPadInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::LoadInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::PHINode
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::PtrToIntInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ResumeInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ReturnInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::SExtInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::SIToFPInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::SelectInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ShuffleVectorInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::StoreInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::SwitchInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::TruncInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::UIToFPInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::UnreachableInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::VAArgInst
classof	include/IR/Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ZExtInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const CallInst *I) {$/;"	f	class:llvm::IntrinsicInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::DbgDeclareInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::DbgInfoIntrinsic
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::DbgValueInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::InstrProfIncrementInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemCpyInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemIntrinsic
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemMoveInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemSetInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemTransferInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::VACopyInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::VAEndInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::VAStartInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::DbgDeclareInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::DbgInfoIntrinsic
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::DbgValueInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::InstrProfIncrementInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::IntrinsicInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemCpyInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemIntrinsic
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemMoveInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemSetInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemTransferInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::VACopyInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::VAEndInst
classof	include/IR/IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::VAStartInst
classof	include/IR/Metadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::ConstantAsMetadata
classof	include/IR/Metadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::LocalAsMetadata
classof	include/IR/Metadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDNode
classof	include/IR/Metadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDString
classof	include/IR/Metadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::MDTuple
classof	include/IR/Metadata.h	/^  static bool classof(const Metadata *MD) {$/;"	f	class:llvm::ValueAsMetadata
classof	include/IR/Metadata.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::MetadataAsValue
classof	include/IR/Operator.h	/^  static inline bool classof(const ConstantExpr *) { return true; }$/;"	f	class:llvm::Operator
classof	include/IR/Operator.h	/^  static inline bool classof(const ConstantExpr *CE) {$/;"	f	class:llvm::ConcreteOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const ConstantExpr *CE) {$/;"	f	class:llvm::OverflowingBinaryOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const ConstantExpr *CE) {$/;"	f	class:llvm::PossiblyExactOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const Instruction *) { return true; }$/;"	f	class:llvm::Operator
classof	include/IR/Operator.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ConcreteOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPMathOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::OverflowingBinaryOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::PossiblyExactOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ConcreteOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPMathOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Operator
classof	include/IR/Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::OverflowingBinaryOperator
classof	include/IR/Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::PossiblyExactOperator
classof	include/IR/User.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::User
clear	include/IR/Operator.h	/^  void clear() { Flags = 0; }$/;"	f	class:llvm::FastMathFlags
clear	include/IR/PassManager.h	/^  void clear() {$/;"	f	class:llvm::AnalysisManager
clear	include/IR/PredIteratorCache.h	/^    void clear() {$/;"	f	class:llvm::PredIteratorCache
clear	include/IR/ValueMap.h	/^  void clear() {$/;"	f	class:llvm::ValueMap
clearFastMathFlags	include/IR/IRBuilder.h	/^  void clearFastMathFlags() { FMF.clear(); }$/;"	f	class:llvm::IRBuilderBase
clearSubclassOptionalData	include/IR/Value.h	/^  void clearSubclassOptionalData() {$/;"	f	class:llvm::Value
clocks_per_nanosecond	tools/camp/x86timer.hpp	/^double clocks_per_nanosecond;$/;"	m	class:x86timer
clocks_per_nanosecond	tools/objtrace/x86timer.hpp	/^double clocks_per_nanosecond;$/;"	m	class:x86timer
clone	include/IR/DebugInfoMetadata.h	/^  TempGenericDebugNode clone() const { return cloneImpl(); }$/;"	f	class:llvm::GenericDebugNode
clone	include/IR/DebugInfoMetadata.h	/^  TempMDBasicType clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDBasicType
clone	include/IR/DebugInfoMetadata.h	/^  TempMDCompileUnit clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDCompileUnit
clone	include/IR/DebugInfoMetadata.h	/^  TempMDCompositeType clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDCompositeType
clone	include/IR/DebugInfoMetadata.h	/^  TempMDDerivedType clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDDerivedType
clone	include/IR/DebugInfoMetadata.h	/^  TempMDEnumerator clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDEnumerator
clone	include/IR/DebugInfoMetadata.h	/^  TempMDExpression clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDExpression
clone	include/IR/DebugInfoMetadata.h	/^  TempMDFile clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDFile
clone	include/IR/DebugInfoMetadata.h	/^  TempMDGlobalVariable clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDGlobalVariable
clone	include/IR/DebugInfoMetadata.h	/^  TempMDImportedEntity clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDImportedEntity
clone	include/IR/DebugInfoMetadata.h	/^  TempMDLexicalBlock clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDLexicalBlock
clone	include/IR/DebugInfoMetadata.h	/^  TempMDLexicalBlockFile clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDLexicalBlockFile
clone	include/IR/DebugInfoMetadata.h	/^  TempMDLocalVariable clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDLocalVariable
clone	include/IR/DebugInfoMetadata.h	/^  TempMDLocation clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDLocation
clone	include/IR/DebugInfoMetadata.h	/^  TempMDNamespace clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDNamespace
clone	include/IR/DebugInfoMetadata.h	/^  TempMDObjCProperty clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDObjCProperty
clone	include/IR/DebugInfoMetadata.h	/^  TempMDSubprogram clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDSubprogram
clone	include/IR/DebugInfoMetadata.h	/^  TempMDSubrange clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDSubrange
clone	include/IR/DebugInfoMetadata.h	/^  TempMDSubroutineType clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDSubroutineType
clone	include/IR/DebugInfoMetadata.h	/^  TempMDTemplateTypeParameter clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDTemplateTypeParameter
clone	include/IR/DebugInfoMetadata.h	/^  TempMDTemplateValueParameter clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDTemplateValueParameter
clone	include/IR/DebugInfoMetadata.h	/^  TempMDType clone() const {$/;"	f	class:llvm::MDType
clone	include/IR/Metadata.h	/^  TempMDTuple clone() const { return cloneImpl(); }$/;"	f	class:llvm::MDTuple
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempGenericDebugNode cloneImpl() const {$/;"	f	class:llvm::GenericDebugNode
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDBasicType cloneImpl() const {$/;"	f	class:llvm::MDBasicType
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDCompileUnit cloneImpl() const {$/;"	f	class:llvm::MDCompileUnit
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDCompositeType cloneImpl() const {$/;"	f	class:llvm::MDCompositeType
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDDerivedType cloneImpl() const {$/;"	f	class:llvm::MDDerivedType
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDEnumerator cloneImpl() const {$/;"	f	class:llvm::MDEnumerator
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDExpression cloneImpl() const {$/;"	f	class:llvm::MDExpression
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDFile cloneImpl() const {$/;"	f	class:llvm::MDFile
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDGlobalVariable cloneImpl() const {$/;"	f	class:llvm::MDGlobalVariable
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDImportedEntity cloneImpl() const {$/;"	f	class:llvm::MDImportedEntity
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDLexicalBlock cloneImpl() const {$/;"	f	class:llvm::MDLexicalBlock
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDLexicalBlockFile cloneImpl() const {$/;"	f	class:llvm::MDLexicalBlockFile
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDLocalVariable cloneImpl() const {$/;"	f	class:llvm::MDLocalVariable
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDLocation cloneImpl() const {$/;"	f	class:llvm::MDLocation
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDNamespace cloneImpl() const {$/;"	f	class:llvm::MDNamespace
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDObjCProperty cloneImpl() const {$/;"	f	class:llvm::MDObjCProperty
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDSubprogram cloneImpl() const {$/;"	f	class:llvm::MDSubprogram
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDSubrange cloneImpl() const {$/;"	f	class:llvm::MDSubrange
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDSubroutineType cloneImpl() const {$/;"	f	class:llvm::MDSubroutineType
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDTemplateTypeParameter cloneImpl() const {$/;"	f	class:llvm::MDTemplateTypeParameter
cloneImpl	include/IR/DebugInfoMetadata.h	/^  TempMDTemplateValueParameter cloneImpl() const {$/;"	f	class:llvm::MDTemplateValueParameter
cloneImpl	include/IR/Metadata.h	/^  TempMDTuple cloneImpl() const {$/;"	f	class:llvm::MDTuple
cntxID	include/corelab/CAMP/ContextTreeBuilder.h	/^			CntxID cntxID;	\/\/for Loop$/;"	m	class:corelab::ContextTree
cntxID	lib/CAMP/ContextTreeBuilder.h	/^			CntxID cntxID;	\/\/for Loop$/;"	m	class:corelab::ContextTree
collectAllIndirectCalls	lib/AliasAnalysis/IndirectCallAnal.cpp	/^void IndirectCallAnal::collectAllIndirectCalls(){$/;"	f	class:IndirectCallAnal
compare	include/IR/Dominators.h	/^  inline bool compare(const DominatorTree &Other) const {$/;"	f	class:llvm::DominatorTree
compile_unit_count	include/IR/DebugInfo.h	/^  unsigned compile_unit_count() const { return CUs.size(); }$/;"	f	class:llvm::DebugInfoFinder
compile_unit_iterator	include/IR/DebugInfo.h	/^  typedef SmallVectorImpl<DICompileUnit>::const_iterator compile_unit_iterator;$/;"	t	class:llvm::DebugInfoFinder
compile_units	include/IR/DebugInfo.h	/^  iterator_range<compile_unit_iterator> compile_units() const {$/;"	f	class:llvm::DebugInfoFinder
compname	include/corelab/Metadata/NamedMetadata.h	/^				char compname[256];$/;"	m	struct:corelab::EsperantoNamer::FunctionTableEntry
comptype	include/corelab/Metadata/NamedMetadata.h	/^				char comptype[256];$/;"	m	struct:corelab::EsperantoNamer::FunctionTableEntry
const_alias_iterator	include/IR/Module.h	/^  typedef AliasListType::const_iterator            const_alias_iterator;$/;"	t	class:llvm::Module
const_arg_iterator	include/IR/Function.h	/^  typedef ArgumentListType::const_iterator const_arg_iterator;$/;"	t	class:llvm::Function
const_block_iterator	include/IR/Instructions.h	/^  typedef BasicBlock * const *const_block_iterator;$/;"	t	class:llvm::PHINode
const_global_iterator	include/IR/Module.h	/^  typedef GlobalListType::const_iterator          const_global_iterator;$/;"	t	class:llvm::Module
const_inst_iterator	include/IR/InstIterator.h	/^                     const Instruction> const_inst_iterator;$/;"	t	namespace:llvm
const_iterator	include/IR/BasicBlock.h	/^  typedef InstListType::const_iterator const_iterator;$/;"	t	class:llvm::BasicBlock
const_iterator	include/IR/Function.h	/^  typedef BasicBlockListType::const_iterator const_iterator;$/;"	t	class:llvm::Function
const_iterator	include/IR/Module.h	/^  typedef FunctionListType::const_iterator               const_iterator;$/;"	t	class:llvm::Module
const_iterator	include/IR/TypeFinder.h	/^  typedef std::vector<StructType*>::const_iterator const_iterator;$/;"	t	class:llvm::TypeFinder
const_iterator	include/IR/ValueMap.h	/^  typedef ValueMapConstIterator<MapT, KeyT> const_iterator;$/;"	t	class:llvm::ValueMap
const_iterator	include/IR/ValueSymbolTable.h	/^  typedef ValueMap::const_iterator const_iterator;$/;"	t	class:llvm::ValueSymbolTable
const_iterator	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef RecursiveFuncList::const_iterator const_iterator;$/;"	t	class:corelab::RecursiveFuncAnal
const_iterator	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef RecursiveFuncList::const_iterator const_iterator;$/;"	t	class:corelab::RecursiveFuncAnal
const_named_metadata_iterator	include/IR/Module.h	/^  typedef NamedMDListType::const_iterator const_named_metadata_iterator;$/;"	t	class:llvm::Module
const_op_iterator	include/IR/Metadata.h	/^  typedef op_iterator_impl<const MDNode *, MDNode> const_op_iterator;$/;"	t	class:llvm::NamedMDNode
const_op_iterator	include/IR/User.h	/^  typedef const Use* const_op_iterator;$/;"	t	class:llvm::User
const_op_range	include/IR/User.h	/^  typedef iterator_range<const_op_iterator> const_op_range;$/;"	t	class:llvm::User
const_pred_iterator	include/IR/CFG.h	/^                     Value::const_user_iterator> const_pred_iterator;$/;"	t	namespace:llvm
const_reccall_iterator	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef RecursiveCallList::const_iterator const_reccall_iterator;$/;"	t	class:corelab::RecursiveFuncAnal
const_reccall_iterator	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef RecursiveCallList::const_iterator const_reccall_iterator;$/;"	t	class:corelab::RecursiveFuncAnal
const_reverse_iterator	include/IR/BasicBlock.h	/^  typedef InstListType::const_reverse_iterator const_reverse_iterator;$/;"	t	class:llvm::BasicBlock
const_reverse_iterator	include/IR/Module.h	/^  typedef FunctionListType::const_reverse_iterator const_reverse_iterator;$/;"	t	class:llvm::Module
const_use_iterator	include/IR/Value.h	/^  typedef use_iterator_impl<const Use> const_use_iterator;$/;"	t	class:llvm::Value
const_user_iterator	include/IR/Value.h	/^  typedef user_iterator_impl<const User> const_user_iterator;$/;"	t	class:llvm::Value
constantint_match	include/IR/PatternMatch.h	/^template <int64_t Val> struct constantint_match {$/;"	s	namespace:llvm::PatternMatch
contains	include/IR/Attributes.h	/^  bool contains(Attribute::AttrKind A) const {$/;"	f	class:llvm::AttrBuilder
contextCount	include/corelab/Metadata/Metadata.h	/^			uint16_t contextCount;$/;"	m	class:corelab::Namer
contextTable	include/corelab/Metadata/LoadNamer.h	/^			std::map<uint16_t, ContextInfo*> contextTable; \/\/ ctxId -> ctxInfo$/;"	m	class:corelab::LoadNamer
contextTable	include/corelab/Metadata/Metadata.h	/^			std::map<uint16_t, ContextInfo*> contextTable; \/\/ ctxId -> ctxInfo$/;"	m	class:corelab::Namer
contextTreeDumpToFile	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTreeBuilder::contextTreeDumpToFile(std::string path){$/;"	f	class:ContextTreeBuilder
contextTreeDumpToGvfile	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTreeBuilder::contextTreeDumpToGvfile(std::string path){$/;"	f	class:ContextTreeBuilder
contextType	include/corelab/Metadata/Metadata.h	/^		CONTEXT_TYPE contextType;$/;"	m	struct:corelab::__anon5
convertMemFlagWordToMatchingFlagWord	include/IR/InlineAsm.h	/^  static unsigned convertMemFlagWordToMatchingFlagWord(unsigned InputFlag) {$/;"	f	class:llvm::InlineAsm
copyFastMathFlags	include/IR/Operator.h	/^  void copyFastMathFlags(FastMathFlags FMF) {$/;"	f	class:llvm::FPMathOperator
corelab	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^namespace corelab$/;"	n
corelab	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^namespace corelab$/;"	n
corelab	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^namespace corelab$/;"	n
corelab	include/corelab/AliasAnalysis/TestClient.hpp	/^namespace corelab $/;"	n
corelab	include/corelab/CAMP/CAMP.h	/^namespace corelab$/;"	n
corelab	include/corelab/CAMP/CampCache.h	/^namespace corelab$/;"	n
corelab	include/corelab/CAMP/CampExectime.h	/^namespace corelab$/;"	n
corelab	include/corelab/CAMP/CampPlain.h	/^namespace corelab$/;"	n
corelab	include/corelab/CAMP/ContextTreeBuilder.h	/^namespace corelab$/;"	n
corelab	include/corelab/CAMP/RegiInterIterDepFinder.h	/^namespace corelab$/;"	n
corelab	include/corelab/CAMP/campCommon.h	/^namespace corelab$/;"	n
corelab	include/corelab/CAMP/campDebug.h	/^namespace corelab$/;"	n
corelab	include/corelab/CAMP/campTimer.h	/^namespace corelab$/;"	n
corelab	include/corelab/Metadata/LoadNamer.h	/^namespace corelab$/;"	n
corelab	include/corelab/Metadata/Metadata.h	/^namespace corelab { $/;"	n
corelab	include/corelab/Metadata/NamedMetadata.h	/^namespace corelab { $/;"	n
corelab	include/corelab/Metadata/typedefs.h	/^namespace corelab {$/;"	n
corelab	include/corelab/ObjTrace/CtxObjtrace.h	/^namespace corelab$/;"	n
corelab	include/corelab/ObjTrace/ObjTrace.h	/^namespace corelab {$/;"	n
corelab	include/corelab/Utilities/FindFunctionExitBB.hpp	/^namespace corelab {$/;"	n
corelab	include/corelab/Utilities/GlobalCtors.h	/^namespace corelab {$/;"	n
corelab	include/corelab/Utilities/InstInsertPt.h	/^namespace corelab {$/;"	n
corelab	include/corelab/Utilities/StandardLibraryFunctionsName.h	/^namespace corelab {$/;"	n
corelab	lib/AliasAnalysis/IndirectCallAnal.hpp	/^namespace corelab$/;"	n
corelab	lib/AliasAnalysis/LoopTraverse.hpp	/^namespace corelab$/;"	n
corelab	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^namespace corelab$/;"	n
corelab	lib/CAMP/CAMP.h	/^namespace corelab$/;"	n
corelab	lib/CAMP/CampCache.h	/^namespace corelab$/;"	n
corelab	lib/CAMP/CampExectime.h	/^namespace corelab$/;"	n
corelab	lib/CAMP/CampPlain.h	/^namespace corelab$/;"	n
corelab	lib/CAMP/ContextTreeBuilder.h	/^namespace corelab$/;"	n
corelab	lib/CAMP/RegiInterIterDepFinder.h	/^namespace corelab$/;"	n
corelab	lib/CAMP/campCommon.h	/^namespace corelab$/;"	n
corelab	lib/CAMP/campDebug.h	/^namespace corelab$/;"	n
corelab	lib/Metadata/EsperantoNamer.cpp	/^namespace corelab {$/;"	n	file:
corelab	lib/Metadata/LoadNamer.cpp	/^namespace corelab {$/;"	n	file:
corelab	lib/Metadata/Namer.cpp	/^namespace corelab{$/;"	n	file:
corelab	lib/ObjTrace/CtxObjtrace.h	/^namespace corelab$/;"	n
corelab	lib/ObjTrace/ObjTrace.h	/^namespace corelab {$/;"	n
corelab	lib/Utilities/GlobalCtors.cpp	/^namespace corelab {$/;"	n	file:
corelab	lib/Utilities/InstInsertPt.cpp	/^namespace corelab {$/;"	n	file:
count	include/IR/ValueMap.h	/^  size_type count(const KeyT &Val) const {$/;"	f	class:llvm::ValueMap
createAnonymousAliasScope	include/IR/MDBuilder.h	/^  MDNode *createAnonymousAliasScope(MDNode *Domain,$/;"	f	class:llvm::MDBuilder
createAnonymousAliasScopeDomain	include/IR/MDBuilder.h	/^  MDNode *createAnonymousAliasScopeDomain(StringRef Name = StringRef()) {$/;"	f	class:llvm::MDBuilder
createAnonymousTBAARoot	include/IR/MDBuilder.h	/^  MDNode *createAnonymousTBAARoot() {$/;"	f	class:llvm::MDBuilder
createModuleToFunctionPassAdaptor	include/IR/PassManager.h	/^createModuleToFunctionPassAdaptor(FunctionPassT Pass) {$/;"	f	namespace:llvm
createSentinel	include/IR/BasicBlock.h	/^inline BasicBlock *ilist_traits<BasicBlock>::createSentinel() const {$/;"	f	class:llvm::ilist_traits
createSentinel	include/IR/Function.h	/^  Argument *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	include/IR/Instruction.h	/^inline Instruction *ilist_traits<Instruction>::createSentinel() const {$/;"	f	class:llvm::ilist_traits
createSentinel	include/IR/Module.h	/^  Function *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	include/IR/Module.h	/^  GlobalAlias *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	include/IR/Module.h	/^  GlobalVariable *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	include/IR/Module.h	/^  NamedMDNode *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
cst_pred_ty	include/IR/PatternMatch.h	/^template <typename Predicate> struct cst_pred_ty : public Predicate {$/;"	s	namespace:llvm::PatternMatch
ctxAllocIdMap	tools/objtrace/ctxObjtraceRuntime.cpp	/^AllocMap *ctxAllocIdMap;$/;"	v
ctxLoadIdMap	tools/objtrace/ctxObjtraceRuntime.cpp	/^LoadStoreMap *ctxLoadIdMap;$/;"	v
ctxObjCallSiteBegin	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjCallSiteBegin;$/;"	m	class:corelab::CtxObjtrace
ctxObjCallSiteBegin	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjCallSiteBegin;$/;"	m	class:corelab::CtxObjtrace
ctxObjCallSiteBegin	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjCallSiteBegin (CntxID cntxID) {$/;"	f
ctxObjCallSiteEnd	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjCallSiteEnd;$/;"	m	class:corelab::CtxObjtrace
ctxObjCallSiteEnd	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjCallSiteEnd;$/;"	m	class:corelab::CtxObjtrace
ctxObjCallSiteEnd	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjCallSiteEnd  (CntxID cntxID) {$/;"	f
ctxObjCalloc	include/corelab/ObjTrace/CtxObjtrace.h	/^      Constant *ctxObjCalloc;$/;"	m	class:corelab::CtxObjtrace
ctxObjCalloc	lib/ObjTrace/CtxObjtrace.h	/^      Constant *ctxObjCalloc;$/;"	m	class:corelab::CtxObjtrace
ctxObjCalloc	tools/objtrace/ctxObjtraceRuntime.cpp	/^void* ctxObjCalloc (size_t num, size_t size, InstrID instrId){$/;"	f
ctxObjDisableCtxtChange	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjDisableCtxtChange;$/;"	m	class:corelab::CtxObjtrace
ctxObjDisableCtxtChange	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjDisableCtxtChange;$/;"	m	class:corelab::CtxObjtrace
ctxObjDisableCtxtChange	tools/objtrace/ctxObjtraceRuntime.cpp	/^extern "C" void ctxObjDisableCtxtChange(){$/;"	f
ctxObjEnableCtxtChange	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjEnableCtxtChange;$/;"	m	class:corelab::CtxObjtrace
ctxObjEnableCtxtChange	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjEnableCtxtChange;$/;"	m	class:corelab::CtxObjtrace
ctxObjEnableCtxtChange	tools/objtrace/ctxObjtraceRuntime.cpp	/^extern "C" void ctxObjEnableCtxtChange(){$/;"	f
ctxObjFinalize	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjFinalize;$/;"	m	class:corelab::CtxObjtrace
ctxObjFinalize	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjFinalize;$/;"	m	class:corelab::CtxObjtrace
ctxObjFinalize	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjFinalize () {$/;"	f
ctxObjInitialize	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjInitialize;$/;"	m	class:corelab::CtxObjtrace
ctxObjInitialize	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjInitialize;$/;"	m	class:corelab::CtxObjtrace
ctxObjInitialize	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjInitialize () {$/;"	f
ctxObjLoadInstr	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjLoadInstr;$/;"	m	class:corelab::CtxObjtrace
ctxObjLoadInstr	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjLoadInstr;$/;"	m	class:corelab::CtxObjtrace
ctxObjLoadInstr	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjLoadInstr (void* addr, InstrID instrId) {$/;"	f
ctxObjLoopBegin	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjLoopBegin;$/;"	m	class:corelab::CtxObjtrace
ctxObjLoopBegin	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjLoopBegin;$/;"	m	class:corelab::CtxObjtrace
ctxObjLoopBegin	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjLoopBegin (CntxID cntxID) { \/\/arg is LocId$/;"	f
ctxObjLoopEnd	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjLoopEnd;$/;"	m	class:corelab::CtxObjtrace
ctxObjLoopEnd	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjLoopEnd;$/;"	m	class:corelab::CtxObjtrace
ctxObjLoopEnd	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjLoopEnd (CntxID cntxID) {$/;"	f
ctxObjLoopNext	include/corelab/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjLoopNext;$/;"	m	class:corelab::CtxObjtrace
ctxObjLoopNext	lib/ObjTrace/CtxObjtrace.h	/^			Constant *ctxObjLoopNext;$/;"	m	class:corelab::CtxObjtrace
ctxObjLoopNext	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjLoopNext () {$/;"	f
ctxObjMalloc	include/corelab/ObjTrace/CtxObjtrace.h	/^      Constant *ctxObjMalloc;$/;"	m	class:corelab::CtxObjtrace
ctxObjMalloc	lib/ObjTrace/CtxObjtrace.h	/^      Constant *ctxObjMalloc;$/;"	m	class:corelab::CtxObjtrace
ctxObjMalloc	tools/objtrace/ctxObjtraceRuntime.cpp	/^void* ctxObjMalloc (size_t size, InstrID instrId){$/;"	f
ctxObjRealloc	include/corelab/ObjTrace/CtxObjtrace.h	/^      Constant *ctxObjRealloc;$/;"	m	class:corelab::CtxObjtrace
ctxObjRealloc	lib/ObjTrace/CtxObjtrace.h	/^      Constant *ctxObjRealloc;$/;"	m	class:corelab::CtxObjtrace
ctxObjRealloc	tools/objtrace/ctxObjtraceRuntime.cpp	/^void* ctxObjRealloc (void* addr, size_t size, InstrID instrId){$/;"	f
ctxObjShadowMemorySetting	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjShadowMemorySetting (void *addr, size_t size, FullID fullId){$/;"	f
ctxObjStoreInstr	include/corelab/ObjTrace/CtxObjtrace.h	/^      Constant *ctxObjStoreInstr;$/;"	m	class:corelab::CtxObjtrace
ctxObjStoreInstr	lib/ObjTrace/CtxObjtrace.h	/^      Constant *ctxObjStoreInstr;$/;"	m	class:corelab::CtxObjtrace
ctxObjStoreInstr	tools/objtrace/ctxObjtraceRuntime.cpp	/^void ctxObjStoreInstr (void* addr, InstrID instrId) {$/;"	f
ctxStoreIdMap	tools/objtrace/ctxObjtraceRuntime.cpp	/^LoadStoreMap *ctxStoreIdMap;$/;"	v
ctx_t	tools/objtrace/ctxObjtraceRuntime.cpp	/^x86timer ctx_t;$/;"	v
currentAlternativeIndex	include/IR/InlineAsm.h	/^    unsigned currentAlternativeIndex;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
currentCtx	tools/camp/campRuntime.cpp	/^static CntxID currentCtx;$/;"	v	file:
currentCtx	tools/campSampling/campRuntime.cpp	/^static CntxID currentCtx;$/;"	v	file:
currentCtx	tools/objtrace/ctxObjtraceRuntime.cpp	/^static uint32_t currentCtx;$/;"	v	file:
cxtTree	include/corelab/CAMP/ContextTreeBuilder.h	/^			std::vector<ContextTreeNode *> cxtTree;$/;"	m	class:corelab::ContextTreeBuilder
cxtTree	lib/CAMP/ContextTreeBuilder.h	/^			std::vector<ContextTreeNode *> cxtTree;$/;"	m	class:corelab::ContextTreeBuilder
cxtTreeBuilder	include/corelab/CAMP/CAMP.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::CAMPInstaller
cxtTreeBuilder	include/corelab/CAMP/CampCache.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::CAMPCache
cxtTreeBuilder	include/corelab/CAMP/CampExectime.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::CAMPExectime
cxtTreeBuilder	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::RegiInterIterDepFinder
cxtTreeBuilder	include/corelab/ObjTrace/CtxObjtrace.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::CtxObjtrace
cxtTreeBuilder	lib/CAMP/CAMP.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::CAMPInstaller
cxtTreeBuilder	lib/CAMP/CampCache.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::CAMPCache
cxtTreeBuilder	lib/CAMP/CampExectime.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::CAMPExectime
cxtTreeBuilder	lib/CAMP/RegiInterIterDepFinder.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::RegiInterIterDepFinder
cxtTreeBuilder	lib/ObjTrace/CtxObjtrace.h	/^			ContextTreeBuilder *cxtTreeBuilder;$/;"	m	class:corelab::CtxObjtrace
defaultPlatform	include/corelab/Metadata/NamedMetadata.h	/^			EsperantoPlatform defaultPlatform;$/;"	m	class:corelab::EsperantoNamer
delegateCallInst	include/IR/InstVisitor.h	/^  RetTy delegateCallInst(CallInst &I) {$/;"	f	class:llvm::InstVisitor
delegateCallInst	include/IR/InstVisitor.h	/^  RetTy delegateCallInst(Instruction &I) {$/;"	f	class:llvm::InstVisitor
deleteBody	include/IR/Function.h	/^  void deleteBody() {$/;"	f	class:llvm::Function
deleted	include/IR/ValueHandle.h	/^  virtual void deleted() { setValPtr(nullptr); }$/;"	f	class:llvm::CallbackVH
depTable	tools/camp/campRuntime.cpp	/^static std::unordered_map<DepID, IterRelation> *depTable=NULL;$/;"	v	file:
depTable	tools/campSampling/campRuntime.cpp	/^static std::unordered_map<DepID, IterRelation> *depTable=NULL;$/;"	v	file:
depth	lib/CAMP/ContextTreeBuilder.cpp	/^unsigned ContextTree::depth(){$/;"	f	class:ContextTree
derivedPtr	include/IR/Statepoint.h	/^  Value *derivedPtr() {$/;"	f	class:llvm::GCRelocateOperands
derivedPtrIndex	include/IR/Statepoint.h	/^  unsigned derivedPtrIndex() {$/;"	f	class:llvm::GCRelocateOperands
derived_this	include/IR/PassManager.h	/^  DerivedT *derived_this() { return static_cast<DerivedT *>(this); }$/;"	f	class:llvm::detail::AnalysisManagerBase
derived_this	include/IR/PassManager.h	/^  const DerivedT *derived_this() const {$/;"	f	class:llvm::detail::AnalysisManagerBase
destroyConstant	include/IR/Constant.h	/^  virtual void destroyConstant() { llvm_unreachable("Not reached!"); }$/;"	f	class:llvm::Constant
destroySentinel	include/IR/BasicBlock.h	/^  static void destroySentinel(BasicBlock*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	include/IR/Function.h	/^  static void destroySentinel(Argument*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	include/IR/Instruction.h	/^  static void destroySentinel(Instruction *) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	include/IR/Module.h	/^  static void destroySentinel(Function*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	include/IR/Module.h	/^  static void destroySentinel(GlobalAlias*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	include/IR/Module.h	/^  static void destroySentinel(GlobalVariable*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	include/IR/Module.h	/^  static void destroySentinel(NamedMDNode*) {}$/;"	f	struct:llvm::ilist_traits
detail	include/IR/Metadata.h	/^namespace detail {$/;"	n	namespace:llvm::mdconst
detail	include/IR/PassManager.h	/^namespace detail {$/;"	n	namespace:llvm
detail	include/IR/PassManagerInternal.h	/^namespace detail {$/;"	n	namespace:llvm
dev	include/corelab/Metadata/NamedMetadata.h	/^				DeviceEntry* dev;$/;"	m	struct:corelab::EsperantoNamer::MetadataNode
deviceID	include/corelab/Metadata/NamedMetadata.h	/^				int deviceID;$/;"	m	struct:corelab::EsperantoNamer::FunctionTableEntry
deviceIdMap	include/corelab/Metadata/NamedMetadata.h	/^			std::map<DeviceEntry*, uint32_t> deviceIdMap;$/;"	m	class:corelab::EsperantoNamer
deviceList	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<DeviceEntry*> deviceList;$/;"	m	class:corelab::EsperantoNamer
deviceMap	include/corelab/Metadata/NamedMetadata.h	/^			DeviceMap deviceMap;$/;"	m	class:corelab::EsperantoNamer
deviceName	include/corelab/Metadata/NamedMetadata.h	/^			char deviceName[50];$/;"	m	class:corelab::DeviceMapEntry
die	autoconf/AutoRegen.sh	/^die () {$/;"	f
difference_type	include/IR/InstIterator.h	/^  typedef signed                        difference_type;$/;"	t	class:llvm::InstIterator
disableCtxtChange	tools/campSampling/campRuntime.cpp	/^static uint16_t disableCtxtChange;$/;"	v	file:
disableCxtChange	tools/camp/campRuntime.cpp	/^static uint16_t disableCxtChange; \/\/ enabled when 0$/;"	v	file:
disableCxtChange	tools/objtrace/ctxObjtraceRuntime.cpp	/^static uint16_t disableCxtChange; \/\/ enabled when 0$/;"	v	file:
dispatchRecalculateHash	include/IR/Metadata.h	/^  static void dispatchRecalculateHash(NodeTy *N, std::false_type) {}$/;"	f	class:llvm::MDNode
dispatchRecalculateHash	include/IR/Metadata.h	/^  static void dispatchRecalculateHash(NodeTy *N, std::true_type) {$/;"	f	class:llvm::MDNode
dispatchResetHash	include/IR/Metadata.h	/^  static void dispatchResetHash(NodeTy *N, std::false_type) {}$/;"	f	class:llvm::MDNode
dispatchResetHash	include/IR/Metadata.h	/^  static void dispatchResetHash(NodeTy *N, std::true_type) {$/;"	f	class:llvm::MDNode
doesNotAccessMemory	include/IR/CallSite.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::CallSiteBase
doesNotAccessMemory	include/IR/CallSite.h	/^  bool doesNotAccessMemory(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
doesNotAccessMemory	include/IR/Function.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::Function
doesNotAccessMemory	include/IR/Function.h	/^  bool doesNotAccessMemory(unsigned n) const {$/;"	f	class:llvm::Function
doesNotAccessMemory	include/IR/Instructions.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::CallInst
doesNotAccessMemory	include/IR/Instructions.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::InvokeInst
doesNotAlias	include/IR/Function.h	/^  bool doesNotAlias(unsigned n) const {$/;"	f	class:llvm::Function
doesNotCapture	include/IR/CallSite.h	/^  bool doesNotCapture(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
doesNotCapture	include/IR/Function.h	/^  bool doesNotCapture(unsigned n) const {$/;"	f	class:llvm::Function
doesNotReturn	include/IR/CallSite.h	/^  bool doesNotReturn() const {$/;"	f	class:llvm::CallSiteBase
doesNotReturn	include/IR/Function.h	/^  bool doesNotReturn() const {$/;"	f	class:llvm::Function
doesNotReturn	include/IR/Instructions.h	/^  bool doesNotReturn() const { return hasFnAttr(Attribute::NoReturn); }$/;"	f	class:llvm::CallInst
doesNotReturn	include/IR/Instructions.h	/^  bool doesNotReturn() const { return hasFnAttr(Attribute::NoReturn); }$/;"	f	class:llvm::InvokeInst
doesNotThrow	include/IR/CallSite.h	/^  bool doesNotThrow() const {$/;"	f	class:llvm::CallSiteBase
doesNotThrow	include/IR/Function.h	/^  bool doesNotThrow() const {$/;"	f	class:llvm::Function
doesNotThrow	include/IR/Instructions.h	/^  bool doesNotThrow() const { return hasFnAttr(Attribute::NoUnwind); }$/;"	f	class:llvm::CallInst
doesNotThrow	include/IR/Instructions.h	/^  bool doesNotThrow() const { return hasFnAttr(Attribute::NoUnwind); }$/;"	f	class:llvm::InvokeInst
doit	include/IR/Type.h	/^  static inline bool doit(const Type &Ty) {$/;"	f	struct:llvm::isa_impl
doit	include/IR/Value.h	/^  static inline bool doit (const Value &Val) {$/;"	f	struct:llvm::isa_impl
doit	include/IR/Value.h	/^  static inline bool doit(const Value &Val) {$/;"	f	struct:llvm::isa_impl
done	include/corelab/CAMP/ContextTreeBuilder.h	/^			bool done; \/\/for cache grind$/;"	m	class:corelab::ContextTree
done	lib/CAMP/ContextTreeBuilder.h	/^			bool done; \/\/for cache grind$/;"	m	class:corelab::ContextTree
dropAllReferences	include/IR/User.h	/^  void dropAllReferences() {$/;"	f	class:llvm::User
dropHungoffUses	include/IR/User.h	/^  void dropHungoffUses() {$/;"	f	class:llvm::User
dropUnknownMetadata	include/IR/Instruction.h	/^  void dropUnknownMetadata() {$/;"	f	class:llvm::Instruction
dropUnknownMetadata	include/IR/Instruction.h	/^  void dropUnknownMetadata(unsigned ID1) {$/;"	f	class:llvm::Instruction
dropUnknownMetadata	include/IR/Instruction.h	/^  void dropUnknownMetadata(unsigned ID1, unsigned ID2) {$/;"	f	class:llvm::Instruction
dropUse	include/IR/Metadata.h	/^  void dropUse() { MD = nullptr; }$/;"	f	class:llvm::MetadataAsValue
dropUsers	include/IR/Metadata.h	/^  void dropUsers() {$/;"	f	class:llvm::ValueAsMetadata
dstInstrID	include/corelab/CAMP/campCommon.h	/^			InstrID 	dstInstrID;												\/\/ Destination Instrction ID$/;"	m	struct:corelab::CAMP::__anon1
dstInstrID	lib/CAMP/campCommon.h	/^			InstrID 	dstInstrID;												\/\/ Destination Instrction ID$/;"	m	struct:corelab::CAMP::__anon25
dstStkCntxID	include/corelab/CAMP/campCommon.h	/^			CntxID 		dstStkCntxID[MAX_CNTX_LV + 1];		\/\/ Destination Context ID Stack$/;"	m	struct:corelab::CAMP::__anon1
dstStkCntxID	lib/CAMP/campCommon.h	/^			CntxID 		dstStkCntxID[MAX_CNTX_LV + 1];		\/\/ Destination Context ID Stack$/;"	m	struct:corelab::CAMP::__anon25
dump	include/corelab/Utilities/ProfileInfo.h	/^    void dump(FType *F = 0, bool real = true) {$/;"	f	class:llvm::ProfileInfoT
dump	lib/Utilities/InstInsertPt.cpp	/^  void InstInsertPt::dump() const {$/;"	f	class:corelab::InstInsertPt
dumpDependenceTable	tools/camp/campRuntime.cpp	/^void dumpDependenceTable() {$/;"	f
dumpDependenceTable	tools/campSampling/campRuntime.cpp	/^void dumpDependenceTable() {$/;"	f
dwarf_op_begin	include/IR/DebugInfoMetadata.h	/^  op_iterator dwarf_op_begin() const { return op_begin() + 1; }$/;"	f	class:llvm::GenericDebugNode
dwarf_op_end	include/IR/DebugInfoMetadata.h	/^  op_iterator dwarf_op_end() const { return op_end(); }$/;"	f	class:llvm::GenericDebugNode
dwarf_operands	include/IR/DebugInfoMetadata.h	/^  op_range dwarf_operands() const {$/;"	f	class:llvm::GenericDebugNode
dyn_extract	include/IR/Metadata.h	/^dyn_extract(Y &&MD) {$/;"	f	namespace:llvm::mdconst
dyn_extract_or_null	include/IR/Metadata.h	/^dyn_extract_or_null(Y &&MD) {$/;"	f	namespace:llvm::mdconst
element_begin	include/IR/DerivedTypes.h	/^  element_iterator element_begin() const { return ContainedTys; }$/;"	f	class:llvm::StructType
element_end	include/IR/DerivedTypes.h	/^  element_iterator element_end() const { return &ContainedTys[NumContainedTys];}$/;"	f	class:llvm::StructType
element_iterator	include/IR/DebugInfoMetadata.h	/^  typedef ArrayRef<uint64_t>::iterator element_iterator;$/;"	t	class:llvm::MDExpression
element_iterator	include/IR/DerivedTypes.h	/^  typedef Type::subtype_iterator element_iterator;$/;"	t	class:llvm::StructType
elements	include/IR/DerivedTypes.h	/^  ArrayRef<Type *> const elements() const {$/;"	f	class:llvm::StructType
elements_begin	include/IR/DebugInfoMetadata.h	/^  element_iterator elements_begin() const { return getElements().begin(); }$/;"	f	class:llvm::MDExpression
elements_end	include/IR/DebugInfoMetadata.h	/^  element_iterator elements_end() const { return getElements().end(); }$/;"	f	class:llvm::MDExpression
emitBasicBlockEndAnnot	include/IR/AssemblyAnnotationWriter.h	/^  virtual void emitBasicBlockEndAnnot(const BasicBlock *,$/;"	f	class:llvm::AssemblyAnnotationWriter
emitBasicBlockStartAnnot	include/IR/AssemblyAnnotationWriter.h	/^  virtual void emitBasicBlockStartAnnot(const BasicBlock *,$/;"	f	class:llvm::AssemblyAnnotationWriter
emitFunctionAnnot	include/IR/AssemblyAnnotationWriter.h	/^  virtual void emitFunctionAnnot(const Function *,$/;"	f	class:llvm::AssemblyAnnotationWriter
emitInstructionAnnot	include/IR/AssemblyAnnotationWriter.h	/^  virtual void emitInstructionAnnot(const Instruction *, $/;"	f	class:llvm::AssemblyAnnotationWriter
empty	include/IR/Attributes.h	/^  bool empty() const { return Attrs.none(); }$/;"	f	class:llvm::AttrBuilder
empty	include/IR/BasicBlock.h	/^  inline bool                    empty() const { return InstList.empty(); }$/;"	f	class:llvm::BasicBlock
empty	include/IR/Function.h	/^  bool                    empty() const { return BasicBlocks.empty(); }$/;"	f	class:llvm::Function
empty	include/IR/LegacyPassManagers.h	/^  bool empty() const { return S.empty(); }$/;"	f	class:llvm::PMStack
empty	include/IR/Module.h	/^  bool                    empty() const { return FunctionList.empty(); }$/;"	f	class:llvm::Module
empty	include/IR/PassManager.h	/^  bool empty() const {$/;"	f	class:llvm::AnalysisManager
empty	include/IR/TypeFinder.h	/^  bool empty() const { return StructTypes.empty(); }$/;"	f	class:llvm::TypeFinder
empty	include/IR/ValueMap.h	/^  bool empty() const { return Map.empty(); }$/;"	f	class:llvm::ValueMap
empty	include/IR/ValueSymbolTable.h	/^  inline bool empty() const { return vmap.empty(); }$/;"	f	class:llvm::ValueSymbolTable
empty	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      bool                    empty() const { return recFuncList.empty(); }$/;"	f	class:corelab::RecursiveFuncAnal
empty	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      bool                    empty() const { return recFuncList.empty(); }$/;"	f	class:corelab::RecursiveFuncAnal
end	include/IR/BasicBlock.h	/^  inline const_iterator          end  () const { return InstList.end();   }$/;"	f	class:llvm::BasicBlock
end	include/IR/BasicBlock.h	/^  inline iterator                end  ()       { return InstList.end();   }$/;"	f	class:llvm::BasicBlock
end	include/IR/DebugInfo.h	/^  iterator end() const { return get()->elements_end(); }$/;"	f	class:llvm::DIExpression
end	include/IR/Function.h	/^  const_iterator          end  () const { return BasicBlocks.end();   }$/;"	f	class:llvm::Function
end	include/IR/Function.h	/^  iterator                end  ()       { return BasicBlocks.end();   }$/;"	f	class:llvm::Function
end	include/IR/GetElementPtrTypeIterator.h	/^    static generic_gep_type_iterator end(ItTy It) {$/;"	f	class:llvm::generic_gep_type_iterator
end	include/IR/LegacyPassManagers.h	/^  iterator end() const { return S.rend(); }$/;"	f	class:llvm::PMStack
end	include/IR/Metadata.h	/^  iterator end() const { return getString().end(); }$/;"	f	class:llvm::MDString
end	include/IR/Module.h	/^  const_iterator          end  () const { return FunctionList.end();   }$/;"	f	class:llvm::Module
end	include/IR/Module.h	/^  iterator                end  ()       { return FunctionList.end();   }$/;"	f	class:llvm::Module
end	include/IR/TypeFinder.h	/^  const_iterator end() const { return StructTypes.end(); }$/;"	f	class:llvm::TypeFinder
end	include/IR/TypeFinder.h	/^  iterator end() { return StructTypes.end(); }$/;"	f	class:llvm::TypeFinder
end	include/IR/ValueMap.h	/^  inline const_iterator end() const { return const_iterator(Map.end()); }$/;"	f	class:llvm::ValueMap
end	include/IR/ValueMap.h	/^  inline iterator end() { return iterator(Map.end()); }$/;"	f	class:llvm::ValueMap
end	include/IR/ValueSymbolTable.h	/^  inline const_iterator end() const { return vmap.end(); }$/;"	f	class:llvm::ValueSymbolTable
end	include/IR/ValueSymbolTable.h	/^  inline iterator end() { return vmap.end(); }$/;"	f	class:llvm::ValueSymbolTable
end	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      const_iterator          end  () const { return recFuncList.end();   }$/;"	f	class:corelab::RecursiveFuncAnal
end	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      iterator                end  ()       { return recFuncList.end();   }$/;"	f	class:corelab::RecursiveFuncAnal
end	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      const_iterator          end  () const { return recFuncList.end();   }$/;"	f	class:corelab::RecursiveFuncAnal
end	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      iterator                end  ()       { return recFuncList.end();   }$/;"	f	class:corelab::RecursiveFuncAnal
end_	tools/camp/x86timer.hpp	/^uint64_t start_,end_;$/;"	m	class:x86timer
end_	tools/objtrace/x86timer.hpp	/^uint64_t start_,end_;$/;"	m	class:x86timer
end_count	tools/camp/armtimer.hpp	/^unsigned int end_count;$/;"	m	class:armtimer
end_time	tools/camp/armtimer.hpp	/^struct timeval start_time, end_time;$/;"	m	class:armtimer	typeref:struct:armtimer::
ensureHead	include/IR/BasicBlock.h	/^  BasicBlock *ensureHead(BasicBlock*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	include/IR/Function.h	/^  Argument *ensureHead(Argument*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	include/IR/Instruction.h	/^  Instruction *ensureHead(Instruction *) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	include/IR/Module.h	/^  Function *ensureHead(Function*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	include/IR/Module.h	/^  GlobalAlias *ensureHead(GlobalAlias*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	include/IR/Module.h	/^  GlobalVariable *ensureHead(GlobalVariable*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	include/IR/Module.h	/^  NamedMDNode *ensureHead(NamedMDNode*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
equalsInt	include/IR/Constants.h	/^  bool equalsInt(uint64_t V) const {$/;"	f	class:llvm::ConstantInt
erase	include/IR/TypeFinder.h	/^  iterator erase(iterator I, iterator E) { return StructTypes.erase(I, E); }$/;"	f	class:llvm::TypeFinder
erase	include/IR/ValueMap.h	/^  bool erase(const KeyT &Val) {$/;"	f	class:llvm::ValueMap
erase	include/IR/ValueMap.h	/^  void erase(iterator I) {$/;"	f	class:llvm::ValueMap
exceedsNaturalStackAlignment	include/IR/DataLayout.h	/^  bool exceedsNaturalStackAlignment(unsigned Align) const {$/;"	f	class:llvm::DataLayout
execTimeOfContext	tools/camp/campExecRuntime.cpp	/^std::unordered_map<CntxID, double> *execTimeOfContext;$/;"	v
execTimeOfContext	tools/camp/campExecRuntime.cpp	/^std::unordered_map<CntxID, unsigned int> *execTimeOfContext;$/;"	v
exec_currentCtx	tools/camp/campExecRuntime.cpp	/^static CntxID exec_currentCtx;$/;"	v	file:
exec_disableCxtChange	tools/camp/campExecRuntime.cpp	/^static uint16_t exec_disableCxtChange; \/\/ enabled when 0$/;"	v	file:
exitBBof	include/corelab/Utilities/FindFunctionExitBB.hpp	/^			ExitBBMap exitBBof;$/;"	m	struct:corelab::FindFunctionExitBB
expr_op_begin	include/IR/DebugInfoMetadata.h	/^  expr_op_iterator expr_op_begin() const {$/;"	f	class:llvm::MDExpression
expr_op_end	include/IR/DebugInfoMetadata.h	/^  expr_op_iterator expr_op_end() const {$/;"	f	class:llvm::MDExpression
expr_op_iterator	include/IR/DebugInfoMetadata.h	/^    explicit expr_op_iterator(element_iterator I) : Op(I) {}$/;"	f	class:llvm::MDExpression::expr_op_iterator
expr_op_iterator	include/IR/DebugInfoMetadata.h	/^  class expr_op_iterator$/;"	c	class:llvm::MDExpression
externalCalls	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      ExternalCallList externalCalls;$/;"	m	class:corelab::LoopTraverse
externalCalls	include/corelab/CAMP/CAMP.h	/^			ExternalCallList externalCalls;$/;"	m	class:corelab::CAMPInstaller
externalCalls	include/corelab/CAMP/CampExectime.h	/^			ExternalCallList externalCalls;$/;"	m	class:corelab::CAMPExectime
externalCalls	include/corelab/ObjTrace/CtxObjtrace.h	/^			ExternalCallList externalCalls;$/;"	m	class:corelab::CtxObjtrace
externalCalls	lib/AliasAnalysis/LoopTraverse.hpp	/^      ExternalCallList externalCalls;$/;"	m	class:corelab::LoopTraverse
externalCalls	lib/CAMP/CAMP.h	/^			ExternalCallList externalCalls;$/;"	m	class:corelab::CAMPInstaller
externalCalls	lib/CAMP/CampExectime.h	/^			ExternalCallList externalCalls;$/;"	m	class:corelab::CAMPExectime
externalCalls	lib/ObjTrace/CtxObjtrace.h	/^			ExternalCallList externalCalls;$/;"	m	class:corelab::CtxObjtrace
extract	include/IR/Metadata.h	/^    extract(Y &MD) {$/;"	f	namespace:llvm::mdconst
extract	include/IR/Metadata.h	/^extract(Y &&MD) {$/;"	f	namespace:llvm::mdconst
extract_or_null	include/IR/Metadata.h	/^extract_or_null(Y &&MD) {$/;"	f	namespace:llvm::mdconst
fend	tools/camp/x86timer.hpp	/^uint64_t fstart,fend;$/;"	m	class:x86timer
fend	tools/objtrace/x86timer.hpp	/^uint64_t fstart,fend;$/;"	m	class:x86timer
filter	include/IR/LegacyPassNameParser.h	/^  Filter filter;$/;"	m	class:llvm::FilteredPassNameParser
find	include/IR/ValueMap.h	/^  const_iterator find(const KeyT &Val) const {$/;"	f	class:llvm::ValueMap
find	include/IR/ValueMap.h	/^  iterator find(const KeyT &Val) {$/;"	f	class:llvm::ValueMap
findAllRecursiveFunction	lib/AliasAnalysis/RecursiveFuncAnal.cpp	/^void RecursiveFuncAnal::findAllRecursiveFunction()$/;"	f	class:RecursiveFuncAnal
findCaseDest	include/IR/Instructions.h	/^  ConstantInt *findCaseDest(BasicBlock *BB) {$/;"	f	class:llvm::SwitchInst
findCaseValue	include/IR/Instructions.h	/^  CaseIt findCaseValue(const ConstantInt *C) {$/;"	f	class:llvm::SwitchInst
findCaseValue	include/IR/Instructions.h	/^  ConstCaseIt findCaseValue(const ConstantInt *C) const {$/;"	f	class:llvm::SwitchInst
findExitBBs	lib/Utilities/FindFunctionExitBB.cpp	/^void FindFunctionExitBB::findExitBBs(Function *fun){$/;"	f	class:FindFunctionExitBB
findPointerLowerBound	include/IR/DataLayout.h	/^  findPointerLowerBound(uint32_t AddressSpace) const {$/;"	f	class:llvm::DataLayout
first	include/IR/ValueMap.h	/^    const KeyT first;$/;"	m	struct:llvm::ValueMapConstIterator::ValueTypeProxy
first	include/IR/ValueMap.h	/^    const KeyT first;$/;"	m	struct:llvm::ValueMapIterator::ValueTypeProxy
first_vm_state_stack_begin	include/IR/Statepoint.h	/^  typename CallSiteTy::arg_iterator first_vm_state_stack_begin() {$/;"	f	class:llvm::StatepointBase
fitsInLegalInteger	include/IR/DataLayout.h	/^  bool fitsInLegalInteger(unsigned Width) const {$/;"	f	class:llvm::DataLayout
fneg_match	include/IR/PatternMatch.h	/^  fneg_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::fneg_match
fneg_match	include/IR/PatternMatch.h	/^template <typename LHS_t> struct fneg_match {$/;"	s	namespace:llvm::PatternMatch
fp128	include/IR/TypeBuilder.h	/^class fp128 {};$/;"	c	namespace:llvm::types
fromSuccessorIndex	include/IR/Instructions.h	/^    static Self fromSuccessorIndex(SwitchInstTy *SI, unsigned SuccessorIndex) {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
front	include/IR/BasicBlock.h	/^  inline       Instruction      &front()       { return InstList.front(); }$/;"	f	class:llvm::BasicBlock
front	include/IR/BasicBlock.h	/^  inline const Instruction      &front() const { return InstList.front(); }$/;"	f	class:llvm::BasicBlock
front	include/IR/Function.h	/^        BasicBlock       &front()       { return BasicBlocks.front(); }$/;"	f	class:llvm::Function
front	include/IR/Function.h	/^  const BasicBlock       &front() const { return BasicBlocks.front(); }$/;"	f	class:llvm::Function
fstart	tools/camp/x86timer.hpp	/^uint64_t fstart,fend;$/;"	m	class:x86timer
fstart	tools/objtrace/x86timer.hpp	/^uint64_t fstart,fend;$/;"	m	class:x86timer
fullStopTag	include/IR/Use.h	/^  enum PrevPtrTag { zeroDigitTag, oneDigitTag, stopTag, fullStopTag };$/;"	e	enum:llvm::Use::PrevPtrTag
func	include/corelab/CAMP/ContextTreeBuilder.h	/^			Function *func;\/\/callee$/;"	m	class:corelab::ContextTree
func	lib/CAMP/ContextTreeBuilder.h	/^			Function *func;\/\/callee$/;"	m	class:corelab::ContextTree
func_extract_an_archive	autoconf/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	autoconf/ltmain.sh	/^func_extract_archives ()$/;"	f
func_infer_tag	autoconf/ltmain.sh	/^func_infer_tag ()$/;"	f
func_mktempdir	autoconf/ltmain.sh	/^func_mktempdir ()$/;"	f
func_win32_libid	autoconf/ltmain.sh	/^func_win32_libid ()$/;"	f
functionCount	include/corelab/Metadata/Metadata.h	/^			uint16_t functionCount;$/;"	m	class:corelab::Namer
functionId	include/corelab/Metadata/Metadata.h	/^		uint16_t functionId;$/;"	m	struct:corelab::__anon6
functionNodeTraverse	lib/CAMP/ContextTreeBuilder.cpp	/^bool ContextTreeBuilder::functionNodeTraverse(ContextTreeNode *callSiteNode){$/;"	f	class:ContextTreeBuilder
functionTable	include/corelab/Metadata/LoadNamer.h	/^			std::map<uint16_t, const char*> functionTable; \/\/ funcId -> name$/;"	m	class:corelab::LoadNamer
functionTable	include/corelab/Metadata/Metadata.h	/^			std::map<uint16_t, const char*> functionTable; \/\/ funcId -> name$/;"	m	class:corelab::Namer
functionTable	include/corelab/Metadata/NamedMetadata.h	/^			std::map<int, FunctionTableEntry*> functionTable;$/;"	m	class:corelab::EsperantoNamer
functions	include/IR/Module.h	/^  iterator_range<const_iterator> functions() const {$/;"	f	class:llvm::Module
functions	include/IR/Module.h	/^  iterator_range<iterator> functions() {$/;"	f	class:llvm::Module
gc_args	include/IR/Statepoint.h	/^  iterator_range<arg_iterator> gc_args() {$/;"	f	class:llvm::StatepointBase
gc_args_begin	include/IR/Statepoint.h	/^  typename CallSiteTy::arg_iterator gc_args_begin() {$/;"	f	class:llvm::StatepointBase
gc_args_end	include/IR/Statepoint.h	/^  typename CallSiteTy::arg_iterator gc_args_end() {$/;"	f	class:llvm::StatepointBase
generic_gep_type_iterator	include/IR/GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator() {}$/;"	f	class:llvm::generic_gep_type_iterator
generic_gep_type_iterator	include/IR/GetElementPtrTypeIterator.h	/^  class generic_gep_type_iterator$/;"	c	namespace:llvm
gep_type_begin	include/IR/GetElementPtrTypeIterator.h	/^  gep_type_begin(Type *Op0, ArrayRef<T> A) {$/;"	f	namespace:llvm
gep_type_begin	include/IR/GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_begin(const User &GEP) {$/;"	f	namespace:llvm
gep_type_begin	include/IR/GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_begin(const User *GEP) {$/;"	f	namespace:llvm
gep_type_end	include/IR/GetElementPtrTypeIterator.h	/^  gep_type_end(Type * \/*Op0*\/, ArrayRef<T> A) {$/;"	f	namespace:llvm
gep_type_end	include/IR/GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_end(const User &GEP) {$/;"	f	namespace:llvm
gep_type_end	include/IR/GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_end(const User *GEP) {$/;"	f	namespace:llvm
gep_type_iterator	include/IR/GetElementPtrTypeIterator.h	/^  typedef generic_gep_type_iterator<> gep_type_iterator;$/;"	t	namespace:llvm
get	include/IR/CallSite.h	/^  static CallSiteBase get(ValTy *V) {$/;"	f	class:llvm::CallSiteBase
get	include/IR/DebugInfo.h	/^  MDBasicType *get() const {$/;"	f	class:llvm::DIBasicType
get	include/IR/DebugInfo.h	/^  MDCompileUnit *get() const {$/;"	f	class:llvm::DICompileUnit
get	include/IR/DebugInfo.h	/^  MDCompositeTypeBase *get() const {$/;"	f	class:llvm::DICompositeType
get	include/IR/DebugInfo.h	/^  MDDerivedTypeBase *get() const {$/;"	f	class:llvm::DIDerivedType
get	include/IR/DebugInfo.h	/^  MDEnumerator *get() const {$/;"	f	class:llvm::DIEnumerator
get	include/IR/DebugInfo.h	/^  MDExpression *get() const {$/;"	f	class:llvm::DIExpression
get	include/IR/DebugInfo.h	/^  MDFile *get() const { return cast_or_null<MDFile>(DIDescriptor::get()); }$/;"	f	class:llvm::DIFile
get	include/IR/DebugInfo.h	/^  MDGlobalVariable *get() const {$/;"	f	class:llvm::DIGlobalVariable
get	include/IR/DebugInfo.h	/^  MDImportedEntity *get() const {$/;"	f	class:llvm::DIImportedEntity
get	include/IR/DebugInfo.h	/^  MDLexicalBlockBase *get() const {$/;"	f	class:llvm::DILexicalBlock
get	include/IR/DebugInfo.h	/^  MDLexicalBlockFile *get() const {$/;"	f	class:llvm::DILexicalBlockFile
get	include/IR/DebugInfo.h	/^  MDLocalVariable *get() const {$/;"	f	class:llvm::DIVariable
get	include/IR/DebugInfo.h	/^  MDLocation *get() const {$/;"	f	class:llvm::DILocation
get	include/IR/DebugInfo.h	/^  MDNamespace *get() const {$/;"	f	class:llvm::DINameSpace
get	include/IR/DebugInfo.h	/^  MDNode *get() const { return const_cast<MDNode *>(DbgNode); }$/;"	f	class:llvm::DIDescriptor
get	include/IR/DebugInfo.h	/^  MDObjCProperty *get() const {$/;"	f	class:llvm::DIObjCProperty
get	include/IR/DebugInfo.h	/^  MDScope *get() const { return cast_or_null<MDScope>(DIDescriptor::get()); }$/;"	f	class:llvm::DIScope
get	include/IR/DebugInfo.h	/^  MDSubprogram *get() const {$/;"	f	class:llvm::DISubprogram
get	include/IR/DebugInfo.h	/^  MDSubrange *get() const {$/;"	f	class:llvm::DISubrange
get	include/IR/DebugInfo.h	/^  MDSubroutineType *get() const {$/;"	f	class:llvm::DISubroutineType
get	include/IR/DebugInfo.h	/^  MDTemplateTypeParameter *get() const {$/;"	f	class:llvm::DITemplateTypeParameter
get	include/IR/DebugInfo.h	/^  MDTemplateValueParameter *get() const {$/;"	f	class:llvm::DITemplateValueParameter
get	include/IR/DebugInfo.h	/^  MDType *get() const { return cast_or_null<MDType>(DIDescriptor::get()); }$/;"	f	class:llvm::DIType
get	include/IR/DebugInfo.h	/^  static DIRef get(const Metadata *MD) { return DIRef(MD); }$/;"	f	class:llvm::DIRef
get	include/IR/DebugInfoMetadata.h	/^    const uint64_t *get() const { return Op; }$/;"	f	class:llvm::MDExpression::ExprOperand
get	include/IR/Intrinsics.h	/^    static IITDescriptor get(IITDescriptorKind K, unsigned Field) {$/;"	f	struct:llvm::Intrinsic::IITDescriptor
get	include/IR/Metadata.h	/^  Metadata *get() const { return MD; }$/;"	f	class:llvm::MDOperand
get	include/IR/Metadata.h	/^  static ConstantAsMetadata *get(Constant *C) {$/;"	f	class:llvm::ConstantAsMetadata
get	include/IR/Metadata.h	/^  static LocalAsMetadata *get(Value *Local) {$/;"	f	class:llvm::LocalAsMetadata
get	include/IR/Metadata.h	/^  static MDString *get(LLVMContext &Context, const char *Str) {$/;"	f	class:llvm::MDString
get	include/IR/Metadata.h	/^  static MDTuple *get(LLVMContext &Context, ArrayRef<Metadata *> MDs) {$/;"	f	class:llvm::MDTuple
get	include/IR/Metadata.h	/^MDTuple *MDNode::get(LLVMContext &Context, ArrayRef<Metadata *> MDs) {$/;"	f	class:llvm::MDNode
get	include/IR/TrackingMDRef.h	/^  Metadata *get() const { return MD; }$/;"	f	class:llvm::TrackingMDRef
get	include/IR/TrackingMDRef.h	/^  T *get() const { return (T *)Ref.get(); }$/;"	f	class:llvm::TypedTrackingMDRef
get	include/IR/TypeBuilder.h	/^  static ArrayType *get(LLVMContext &Context) {$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static FunctionType *get(LLVMContext &Context) {$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static IntegerType *get(LLVMContext &C) {$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static PointerType *get(LLVMContext &Context) {$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static Type *get(LLVMContext &C) {$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getDoubleTy(C); }$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getFP128Ty(C); }$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getFloatTy(C); }$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getPPC_FP128Ty(C); }$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getX86_FP80Ty(C); }$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getX86_MMXTy(C); }$/;"	f	class:llvm::TypeBuilder
get	include/IR/TypeBuilder.h	/^  static Type *get(LLVMContext& C) {$/;"	f	class:llvm::TypeBuilder
get	include/IR/Use.h	/^  Value *get() const { return Val; }$/;"	f	class:llvm::Use
getAddress	include/IR/Instructions.h	/^  Value *getAddress() { return getOperand(0); }$/;"	f	class:llvm::IndirectBrInst
getAddress	include/IR/Instructions.h	/^  const Value *getAddress() const { return getOperand(0); }$/;"	f	class:llvm::IndirectBrInst
getAddressSpace	include/IR/DerivedTypes.h	/^  inline unsigned getAddressSpace() const { return getSubclassData(); }$/;"	f	class:llvm::PointerType
getAddressSpace	include/IR/Instructions.h	/^  unsigned getAddressSpace() const {$/;"	f	class:llvm::GetElementPtrInst
getAddressSpace	include/IR/Instructions.h	/^  unsigned getAddressSpace() const {$/;"	f	class:llvm::IntToPtrInst
getAdjustedAnalysisPointer	include/corelab/Metadata/Metadata.h	/^			void *getAdjustedAnalysisPointer(AnalysisID PI)$/;"	f	class:corelab::Namer
getAggregateOperand	include/IR/Instructions.h	/^  Value *getAggregateOperand() {$/;"	f	class:llvm::ExtractValueInst
getAggregateOperand	include/IR/Instructions.h	/^  Value *getAggregateOperand() {$/;"	f	class:llvm::InsertValueInst
getAggregateOperand	include/IR/Instructions.h	/^  const Value *getAggregateOperand() const {$/;"	f	class:llvm::ExtractValueInst
getAggregateOperand	include/IR/Instructions.h	/^  const Value *getAggregateOperand() const {$/;"	f	class:llvm::InsertValueInst
getAggregateOperandIndex	include/IR/Instructions.h	/^  static unsigned getAggregateOperandIndex() {$/;"	f	class:llvm::ExtractValueInst
getAggregateOperandIndex	include/IR/Instructions.h	/^  static unsigned getAggregateOperandIndex() {$/;"	f	class:llvm::InsertValueInst
getAliasList	include/IR/Module.h	/^  AliasListType          &getAliasList()              { return AliasList; }$/;"	f	class:llvm::Module
getAliasList	include/IR/Module.h	/^  const AliasListType    &getAliasList() const        { return AliasList; }$/;"	f	class:llvm::Module
getAliasee	include/IR/GlobalAlias.h	/^  Constant *getAliasee() {$/;"	f	class:llvm::GlobalAlias
getAliasee	include/IR/GlobalAlias.h	/^  const Constant *getAliasee() const {$/;"	f	class:llvm::GlobalAlias
getAlignInBits	include/IR/DebugInfo.h	/^  uint64_t getAlignInBits() const { return get()->getAlignInBits(); }$/;"	f	class:llvm::DIType
getAlignInBits	include/IR/DebugInfoMetadata.h	/^  uint64_t getAlignInBits() const { return AlignInBits; }$/;"	f	class:llvm::MDType
getAlignment	include/IR/Attributes.h	/^  uint64_t getAlignment() const { return Alignment; }$/;"	f	class:llvm::AttrBuilder
getAlignment	include/IR/DataLayout.h	/^  unsigned getAlignment() const { return StructAlignment; }$/;"	f	class:llvm::StructLayout
getAlignment	include/IR/GlobalObject.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::GlobalObject
getAlignment	include/IR/Instructions.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::AllocaInst
getAlignment	include/IR/Instructions.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::LoadInst
getAlignment	include/IR/Instructions.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::StoreInst
getAlignment	include/IR/IntrinsicInst.h	/^    unsigned getAlignment() const {$/;"	f	class:llvm::MemIntrinsic
getAlignmentCst	include/IR/IntrinsicInst.h	/^    ConstantInt *getAlignmentCst() const {$/;"	f	class:llvm::MemIntrinsic
getAlignmentType	include/IR/IntrinsicInst.h	/^    Type *getAlignmentType() const {$/;"	f	class:llvm::MemIntrinsic
getAllMetadata	include/IR/Instruction.h	/^  getAllMetadata(SmallVectorImpl<std::pair<unsigned, MDNode *>> &MDs) const {$/;"	f	class:llvm::Instruction
getAllMetadataOtherThanDebugLoc	include/IR/Instruction.h	/^  void getAllMetadataOtherThanDebugLoc($/;"	f	class:llvm::Instruction
getAnalysisUsage	include/corelab/AliasAnalysis/TestClient.hpp	/^			void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:corelab::TestAAClient
getAnalysisUsage	include/corelab/CAMP/CAMP.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CAMPInstaller
getAnalysisUsage	include/corelab/CAMP/CampCache.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CAMPCache
getAnalysisUsage	include/corelab/CAMP/CampExectime.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CAMPExectime
getAnalysisUsage	include/corelab/CAMP/CampPlain.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CAMPPlain
getAnalysisUsage	include/corelab/CAMP/ContextTreeBuilder.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::ContextTreeBuilder
getAnalysisUsage	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::RegiInterIterDepFinder
getAnalysisUsage	include/corelab/ObjTrace/CtxObjtrace.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CtxObjtrace
getAnalysisUsage	include/corelab/ObjTrace/ObjTrace.h	/^      virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:corelab::ObjTrace
getAnalysisUsage	include/corelab/Utilities/FindFunctionExitBB.hpp	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:corelab::FindFunctionExitBB
getAnalysisUsage	lib/CAMP/CAMP.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CAMPInstaller
getAnalysisUsage	lib/CAMP/CampCache.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CAMPCache
getAnalysisUsage	lib/CAMP/CampExectime.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CAMPExectime
getAnalysisUsage	lib/CAMP/CampPlain.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CAMPPlain
getAnalysisUsage	lib/CAMP/ContextTreeBuilder.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::ContextTreeBuilder
getAnalysisUsage	lib/CAMP/RegiInterIterDepFinder.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::RegiInterIterDepFinder
getAnalysisUsage	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:corelab::EsperantoNamer
getAnalysisUsage	lib/Metadata/LoadNamer.cpp	/^	void LoadNamer::getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:corelab::LoadNamer
getAnalysisUsage	lib/Metadata/Namer.cpp	/^	void Namer::getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:corelab::Namer
getAnalysisUsage	lib/ObjTrace/CtxObjtrace.h	/^			virtual void getAnalysisUsage(AnalysisUsage &AU) const$/;"	f	class:corelab::CtxObjtrace
getAnalysisUsage	lib/ObjTrace/ObjTrace.h	/^      virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:corelab::ObjTrace
getAnon	include/IR/Constants.h	/^  static Constant *getAnon(ArrayRef<Constant*> V, bool Packed = false) {$/;"	f	class:llvm::ConstantStruct
getAnon	include/IR/Constants.h	/^  static Constant *getAnon(LLVMContext &Ctx,$/;"	f	class:llvm::ConstantStruct
getArg	include/IR/DebugInfo.h	/^    uint64_t getArg(unsigned N) const {$/;"	f	class:llvm::DIExpression::Operand
getArg	include/IR/DebugInfoMetadata.h	/^    uint64_t getArg(unsigned I) const { return Op[I + 1]; }$/;"	f	class:llvm::MDExpression::ExprOperand
getArg	include/IR/DebugInfoMetadata.h	/^  unsigned getArg() const { return Arg; }$/;"	f	class:llvm::MDLocalVariable
getArgList	include/IR/IntrinsicInst.h	/^    Value *getArgList() const { return const_cast<Value*>(getArgOperand(0)); }$/;"	f	class:llvm::VAEndInst
getArgList	include/IR/IntrinsicInst.h	/^    Value *getArgList() const { return const_cast<Value*>(getArgOperand(0)); }$/;"	f	class:llvm::VAStartInst
getArgNumber	include/IR/DebugInfo.h	/^  unsigned getArgNumber() const { return get()->getArg(); }$/;"	f	class:llvm::DIVariable
getArgOperand	include/IR/Instructions.h	/^  Value *getArgOperand(unsigned i) const { return getOperand(i); }$/;"	f	class:llvm::CallInst
getArgOperand	include/IR/Instructions.h	/^  Value *getArgOperand(unsigned i) const { return getOperand(i); }$/;"	f	class:llvm::InvokeInst
getArgOperandUse	include/IR/Instructions.h	/^  Use &getArgOperandUse(unsigned i) { return getOperandUse(i); }$/;"	f	class:llvm::CallInst
getArgOperandUse	include/IR/Instructions.h	/^  Use &getArgOperandUse(unsigned i) { return getOperandUse(i); }$/;"	f	class:llvm::InvokeInst
getArgOperandUse	include/IR/Instructions.h	/^  const Use &getArgOperandUse(unsigned i) const { return getOperandUse(i); }$/;"	f	class:llvm::CallInst
getArgOperandUse	include/IR/Instructions.h	/^  const Use &getArgOperandUse(unsigned i) const { return getOperandUse(i); }$/;"	f	class:llvm::InvokeInst
getArgument	include/IR/CallSite.h	/^  ValTy *getArgument(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
getArgumentEndOffset	include/IR/CallSite.h	/^  unsigned getArgumentEndOffset() const {$/;"	f	class:llvm::CallSiteBase
getArgumentKind	include/IR/Intrinsics.h	/^    ArgKind getArgumentKind() const {$/;"	f	struct:llvm::Intrinsic::IITDescriptor
getArgumentList	include/IR/Function.h	/^  ArgumentListType &getArgumentList() {$/;"	f	class:llvm::Function
getArgumentList	include/IR/Function.h	/^  const ArgumentListType &getArgumentList() const {$/;"	f	class:llvm::Function
getArgumentNo	include/IR/CallSite.h	/^  unsigned getArgumentNo(Value::const_user_iterator I) const {$/;"	f	class:llvm::CallSiteBase
getArgumentNo	include/IR/CallSite.h	/^  unsigned getArgumentNo(const Use *U) const {$/;"	f	class:llvm::CallSiteBase
getArgumentNumber	include/IR/Intrinsics.h	/^    unsigned getArgumentNumber() const {$/;"	f	struct:llvm::Intrinsic::IITDescriptor
getArrayElementType	include/IR/Type.h	/^  Type *getArrayElementType() const { return getSequentialElementType(); }$/;"	f	class:llvm::Type
getArraySize	include/IR/Instructions.h	/^  Value *getArraySize() { return getOperand(0); }$/;"	f	class:llvm::AllocaInst
getArraySize	include/IR/Instructions.h	/^  const Value *getArraySize() const { return getOperand(0); }$/;"	f	class:llvm::AllocaInst
getAsCString	include/IR/Constants.h	/^  StringRef getAsCString() const {$/;"	f	class:llvm::ConstantDataSequential
getAsMDNode	include/IR/DebugLoc.h	/^    MDNode *getAsMDNode() const { return Loc; }$/;"	f	class:llvm::DebugLoc
getAsString	include/IR/Constants.h	/^  StringRef getAsString() const {$/;"	f	class:llvm::ConstantDataSequential
getAsVoidPointer	include/IR/Instruction.h	/^  static inline void *getAsVoidPointer(PT P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	include/IR/Use.h	/^  static inline void *getAsVoidPointer(Use **P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	include/IR/Value.h	/^  static inline void *getAsVoidPointer(PT P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	include/IR/ValueHandle.h	/^  static inline void *getAsVoidPointer(ValueHandleBase** P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsmString	include/IR/InlineAsm.h	/^  const std::string &getAsmString() const { return AsmString; }$/;"	f	class:llvm::InlineAsm
getAttributes	include/IR/CallSite.h	/^  const AttributeSet &getAttributes() const {$/;"	f	class:llvm::CallSiteBase
getAttributes	include/IR/DebugInfo.h	/^  unsigned getAttributes() const { return get()->getAttributes(); }$/;"	f	class:llvm::DIObjCProperty
getAttributes	include/IR/DebugInfoMetadata.h	/^  unsigned getAttributes() const { return Attributes; }$/;"	f	class:llvm::MDObjCProperty
getAttributes	include/IR/Function.h	/^  AttributeSet getAttributes() const { return AttributeSets; }$/;"	f	class:llvm::Function
getAttributes	include/IR/Instructions.h	/^  const AttributeSet &getAttributes() const { return AttributeList; }$/;"	f	class:llvm::CallInst
getAttributes	include/IR/Instructions.h	/^  const AttributeSet &getAttributes() const { return AttributeList; }$/;"	f	class:llvm::InvokeInst
getAvailableAnalysis	include/IR/LegacyPassManagers.h	/^  DenseMap<AnalysisID, Pass*> *getAvailableAnalysis() {$/;"	f	class:llvm::PMDataManager
getBase	include/IR/DebugInfo.h	/^    const MDExpression::element_iterator &getBase() const { return I; }$/;"	f	class:llvm::DIExpression::Operand
getBase	include/IR/DebugInfoMetadata.h	/^    element_iterator getBase() const { return Op.get(); }$/;"	f	class:llvm::MDExpression::expr_op_iterator
getBaseObject	include/IR/GlobalAlias.h	/^  GlobalObject *getBaseObject() {$/;"	f	class:llvm::GlobalAlias
getBaseObject	include/IR/GlobalAlias.h	/^  GlobalObject *getBaseObject(const DataLayout &DL, APInt &Offset) {$/;"	f	class:llvm::GlobalAlias
getBaseObject	include/IR/GlobalAlias.h	/^  const GlobalObject *getBaseObject() const {$/;"	f	class:llvm::GlobalAlias
getBaseObject	include/IR/GlobalAlias.h	/^  const GlobalObject *getBaseObject(const DataLayout &DL, APInt &Offset) const {$/;"	f	class:llvm::GlobalAlias
getBaseType	include/IR/DebugInfoMetadata.h	/^  Metadata *getBaseType() const { return getRawBaseType(); }$/;"	f	class:llvm::MDDerivedTypeBase
getBasicBlock	include/IR/Constants.h	/^  BasicBlock *getBasicBlock() const { return (BasicBlock*)Op<1>().get(); }$/;"	f	class:llvm::BlockAddress
getBasicBlockIndex	include/IR/Instructions.h	/^  int getBasicBlockIndex(const BasicBlock *BB) const {$/;"	f	class:llvm::PHINode
getBasicBlockIterator	include/IR/InstIterator.h	/^  inline BBIty &getBasicBlockIterator()  { return BB; }$/;"	f	class:llvm::InstIterator
getBasicBlockList	include/IR/Function.h	/^        BasicBlockListType &getBasicBlockList()       { return BasicBlocks; }$/;"	f	class:llvm::Function
getBasicBlockList	include/IR/Function.h	/^  const BasicBlockListType &getBasicBlockList() const { return BasicBlocks; }$/;"	f	class:llvm::Function
getBitMask	include/IR/DerivedTypes.h	/^  uint64_t getBitMask() const {$/;"	f	class:llvm::IntegerType
getBitWidth	include/IR/ConstantRange.h	/^  uint32_t getBitWidth() const { return Lower.getBitWidth(); }$/;"	f	class:llvm::ConstantRange
getBitWidth	include/IR/Constants.h	/^  unsigned getBitWidth() const { return Val.getBitWidth(); }$/;"	f	class:llvm::ConstantInt
getBitWidth	include/IR/DerivedTypes.h	/^  unsigned getBitWidth() const { return getSubclassData(); }$/;"	f	class:llvm::IntegerType
getBitWidth	include/IR/DerivedTypes.h	/^  unsigned getBitWidth() const {$/;"	f	class:llvm::VectorType
getBlkId	lib/Metadata/Namer.cpp	/^	uint16_t Namer::getBlkId(const Instruction *I) {$/;"	f	class:corelab::Namer
getBlock	include/IR/IRBuilder.h	/^    llvm::BasicBlock *getBlock() const { return Block; }$/;"	f	class:llvm::IRBuilderBase::InsertPoint
getBlock	include/corelab/Utilities/InstInsertPt.h	/^      BasicBlock *getBlock() {$/;"	f	class:corelab::InstInsertPt
getCachedResult	include/IR/PassManager.h	/^  typename PassT::Result *getCachedResult(IRUnitT &IR) const {$/;"	f	class:llvm::detail::AnalysisManagerBase
getCachedResultImpl	include/IR/PassManager.h	/^  ResultConceptT *getCachedResultImpl(void *PassID, IRUnitT &IR) const {$/;"	f	class:llvm::AnalysisManager
getCallInst	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline const Instruction* getCallInst(){return invokeOrCallInst;}$/;"	f	class:corelab::ContextTree
getCallInst	lib/CAMP/ContextTreeBuilder.h	/^			inline const Instruction* getCallInst(){return invokeOrCallInst;}$/;"	f	class:corelab::ContextTree
getCallSite	include/IR/Statepoint.h	/^  CallSiteTy getCallSite() {$/;"	f	class:llvm::StatepointBase
getCalledFunction	include/IR/CallSite.h	/^  FunTy *getCalledFunction() const {$/;"	f	class:llvm::CallSiteBase
getCalledFunction	include/IR/Instructions.h	/^  Function *getCalledFunction() const {$/;"	f	class:llvm::CallInst
getCalledFunction	include/IR/Instructions.h	/^  Function *getCalledFunction() const {$/;"	f	class:llvm::InvokeInst
getCalledFunctionId	lib/Metadata/LoadNamer.cpp	/^	uint16_t LoadNamer::getCalledFunctionId(uint16_t id) {$/;"	f	class:corelab::LoadNamer
getCalledFunction_aux	lib/AliasAnalysis/IndirectCallAnal.cpp	/^Function *getCalledFunction_aux(Instruction* indCall){$/;"	f
getCalledFunction_aux	lib/CAMP/ContextTreeBuilder.cpp	/^Function *getCalledFunction_aux(Instruction* indCall){$/;"	f
getCalledFunction_aux	lib/ObjTrace/CtxObjtrace.cpp	/^static Function *getCalledFunction_aux(Instruction* indCall){$/;"	f	file:
getCalledFunction_aux	lib/ObjTrace/ObjTrace.cpp	/^static Function *getCalledFunction_aux(Instruction* indCall){$/;"	f	file:
getCalledValue	include/IR/CallSite.h	/^  ValTy *getCalledValue() const {$/;"	f	class:llvm::CallSiteBase
getCalledValue	include/IR/Instructions.h	/^        Value *getCalledValue()       { return Op<-1>(); }$/;"	f	class:llvm::CallInst
getCalledValue	include/IR/Instructions.h	/^        Value *getCalledValue()       { return Op<-3>(); }$/;"	f	class:llvm::InvokeInst
getCalledValue	include/IR/Instructions.h	/^  const Value *getCalledValue() const { return Op<-1>(); }$/;"	f	class:llvm::CallInst
getCalledValue	include/IR/Instructions.h	/^  const Value *getCalledValue() const { return Op<-3>(); }$/;"	f	class:llvm::InvokeInst
getCalledValueOfIndCall	lib/AliasAnalysis/IndirectCallAnal.cpp	/^const Value *getCalledValueOfIndCall(const Instruction* indCall){$/;"	f
getCalledValueOfIndCall	lib/CAMP/ContextTreeBuilder.cpp	/^const Value *getCalledValueOfIndCall(const Instruction* indCall){$/;"	f
getCalledValueOfIndCall	lib/ObjTrace/CtxObjtrace.cpp	/^static const Value *getCalledValueOfIndCall(const Instruction* indCall){$/;"	f	file:
getCalledValueOfIndCall	lib/ObjTrace/ObjTrace.cpp	/^static const Value *getCalledValueOfIndCall(const Instruction* indCall){$/;"	f	file:
getCallee	include/IR/CallSite.h	/^  IterTy getCallee() const {$/;"	f	class:llvm::CallSiteBase
getCallee	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline Function* getCallee(){return func;}$/;"	f	class:corelab::ContextTree
getCallee	lib/CAMP/ContextTreeBuilder.h	/^			inline Function* getCallee(){return func;}$/;"	f	class:corelab::ContextTree
getCaller	include/IR/CallSite.h	/^  FunTy *getCaller() const { return (*this)->getParent()->getParent(); }$/;"	f	class:llvm::CallSiteBase
getCallingConv	include/IR/CallSite.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::CallSiteBase
getCallingConv	include/IR/Function.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::Function
getCallingConv	include/IR/Instructions.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::CallInst
getCallingConv	include/IR/Instructions.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::InvokeInst
getCallingFunctionId	lib/Metadata/LoadNamer.cpp	/^	uint16_t LoadNamer::getCallingFunctionId(uint16_t id) {$/;"	f	class:corelab::LoadNamer
getCanonicalMDString	include/IR/DebugInfoMetadata.h	/^  static MDString *getCanonicalMDString(LLVMContext &Context, StringRef S) {$/;"	f	class:llvm::DebugNode
getCaseIndex	include/IR/Instructions.h	/^    unsigned getCaseIndex() const { return Index; }$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getCaseSuccessor	include/IR/Instructions.h	/^    BasicBlockTy *getCaseSuccessor() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getCaseValue	include/IR/Instructions.h	/^    ConstantIntTy *getCaseValue() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getChildren	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline std::vector<ContextTree *> *getChildren(){return &children;}$/;"	f	class:corelab::ContextTree
getChildren	lib/CAMP/ContextTreeBuilder.h	/^			inline std::vector<ContextTree *> *getChildren(){return &children;}$/;"	f	class:corelab::ContextTree
getClassNameInFunction	lib/Metadata/EsperantoNamer.cpp	/^	 std::string EsperantoNamer::getClassNameInFunction(StringRef functionName){$/;"	f	class:corelab::EsperantoNamer
getClassType	include/IR/DebugInfo.h	/^  DITypeRef getClassType() const {$/;"	f	class:llvm::DIDerivedType
getClause	include/IR/Instructions.h	/^  Constant *getClause(unsigned Idx) const {$/;"	f	class:llvm::LandingPadInst
getCntxIDforLoop	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline CntxID getCntxIDforLoop(){return cntxID;}$/;"	f	class:corelab::ContextTree
getCntxIDforLoop	lib/CAMP/ContextTreeBuilder.h	/^			inline CntxID getCntxIDforLoop(){return cntxID;}$/;"	f	class:corelab::ContextTree
getColumn	include/IR/DebugInfoMetadata.h	/^  unsigned getColumn() const { return Column; }$/;"	f	class:llvm::MDLexicalBlock
getColumn	include/IR/DebugInfoMetadata.h	/^  unsigned getColumn() const { return SubclassData16; }$/;"	f	class:llvm::MDLocation
getColumnNumber	include/IR/DebugInfo.h	/^  unsigned getColumnNumber() const { return get()->getColumn(); }$/;"	f	class:llvm::DILocation
getColumnNumber	include/IR/DebugInfo.h	/^  unsigned getColumnNumber() const { return getScope().getColumnNumber(); }$/;"	f	class:llvm::DILexicalBlockFile
getColumnNumber	include/IR/DebugInfo.h	/^  unsigned getColumnNumber() const {$/;"	f	class:llvm::DILexicalBlock
getComdat	include/IR/GlobalObject.h	/^  Comdat *getComdat() { return ObjComdat; }$/;"	f	class:llvm::GlobalObject
getComdat	include/IR/GlobalObject.h	/^  const Comdat *getComdat() const { return ObjComdat; }$/;"	f	class:llvm::GlobalObject
getComdat	include/IR/GlobalValue.h	/^  const Comdat *getComdat() const {$/;"	f	class:llvm::GlobalValue
getComdatSymbolTable	include/IR/Module.h	/^  ComdatSymTabType &getComdatSymbolTable() { return ComdatSymTab; }$/;"	f	class:llvm::Module
getComdatSymbolTable	include/IR/Module.h	/^  const ComdatSymTabType &getComdatSymbolTable() const { return ComdatSymTab; }$/;"	f	class:llvm::Module
getCompareOperand	include/IR/Instructions.h	/^  Value *getCompareOperand() { return getOperand(1); }$/;"	f	class:llvm::AtomicCmpXchgInst
getCompareOperand	include/IR/Instructions.h	/^  const Value *getCompareOperand() const { return getOperand(1); }$/;"	f	class:llvm::AtomicCmpXchgInst
getCondition	include/IR/Instructions.h	/^  Value *getCondition() const { return getOperand(0); }$/;"	f	class:llvm::SwitchInst
getCondition	include/IR/Instructions.h	/^  Value *getCondition() const {$/;"	f	class:llvm::BranchInst
getCondition	include/IR/Instructions.h	/^  Value *getCondition() { return Op<0>(); }$/;"	f	class:llvm::SelectInst
getCondition	include/IR/Instructions.h	/^  const Value *getCondition() const { return Op<0>(); }$/;"	f	class:llvm::SelectInst
getConstant	include/IR/DebugInfo.h	/^  Constant *getConstant() const {$/;"	f	class:llvm::DIDerivedType
getConstant	include/IR/DebugInfo.h	/^  Constant *getConstant() const {$/;"	f	class:llvm::DIGlobalVariable
getConstant	include/IR/Metadata.h	/^  static ConstantAsMetadata *getConstant(Value *C) {$/;"	f	class:llvm::ValueAsMetadata
getConstantIfExists	include/IR/Metadata.h	/^  static ConstantAsMetadata *getConstantIfExists(Value *C) {$/;"	f	class:llvm::ValueAsMetadata
getConstraintString	include/IR/InlineAsm.h	/^  const std::string &getConstraintString() const { return Constraints; }$/;"	f	class:llvm::InlineAsm
getContainedPass	include/IR/LegacyPassManagers.h	/^  FunctionPass *getContainedPass(unsigned N) {$/;"	f	class:llvm::FPPassManager
getContainedType	include/IR/Type.h	/^  Type *getContainedType(unsigned i) const {$/;"	f	class:llvm::Type
getContainingType	include/IR/DebugInfo.h	/^  DITypeRef getContainingType() const {$/;"	f	class:llvm::DICompositeType
getContainingType	include/IR/DebugInfo.h	/^  DITypeRef getContainingType() const {$/;"	f	class:llvm::DISubprogram
getContainingType	include/IR/DebugInfoMetadata.h	/^  Metadata *getContainingType() const { return getRawContainingType(); }$/;"	f	class:llvm::MDSubprogram
getContext	include/IR/DebugInfo.h	/^  DIScope getContext() const { return DIScope(get()->getScope()); }$/;"	f	class:llvm::DIGlobalVariable
getContext	include/IR/DebugInfo.h	/^  DIScope getContext() const { return DIScope(get()->getScope()); }$/;"	f	class:llvm::DIImportedEntity
getContext	include/IR/DebugInfo.h	/^  DIScope getContext() const { return DIScope(get()->getScope()); }$/;"	f	class:llvm::DILexicalBlock
getContext	include/IR/DebugInfo.h	/^  DIScope getContext() const { return DIScope(get()->getScope()); }$/;"	f	class:llvm::DINameSpace
getContext	include/IR/DebugInfo.h	/^  DIScope getContext() const { return DIScope(get()->getScope()); }$/;"	f	class:llvm::DIVariable
getContext	include/IR/DebugInfo.h	/^  DIScope getContext() const { return getScope(); }$/;"	f	class:llvm::DILexicalBlockFile
getContext	include/IR/DebugInfo.h	/^  DIScopeRef getContext() const { return DIScopeRef::get(get()->getScope()); }$/;"	f	class:llvm::DISubprogram
getContext	include/IR/DebugInfo.h	/^  DIScopeRef getContext() const { return DIScopeRef::get(get()->getScope()); }$/;"	f	class:llvm::DIType
getContext	include/IR/IRBuilder.h	/^  LLVMContext &getContext() const { return Context; }$/;"	f	class:llvm::IRBuilderBase
getContext	include/IR/Metadata.h	/^  LLVMContext &getContext() const { return Context.getContext(); }$/;"	f	class:llvm::MDNode
getContext	include/IR/Metadata.h	/^  LLVMContext &getContext() const { return Context; }$/;"	f	class:llvm::ReplaceableMetadataImpl
getContext	include/IR/Metadata.h	/^  LLVMContext &getContext() const { return V->getContext(); }$/;"	f	class:llvm::ValueAsMetadata
getContext	include/IR/Metadata.h	/^  LLVMContext &getContext() const {$/;"	f	class:llvm::ContextAndReplaceableUses
getContext	include/IR/Module.h	/^  LLVMContext &getContext() const { return Context; }$/;"	f	class:llvm::Module
getContext	include/IR/Type.h	/^  LLVMContext &getContext() const { return Context; }$/;"	f	class:llvm::Type
getContextTree	include/corelab/CAMP/ContextTreeBuilder.h	/^			std::vector<ContextTreeNode *> *getContextTree() {return &cxtTree;}$/;"	f	class:corelab::ContextTreeBuilder
getContextTree	lib/CAMP/ContextTreeBuilder.h	/^			std::vector<ContextTreeNode *> *getContextTree() {return &cxtTree;}$/;"	f	class:corelab::ContextTreeBuilder
getCount	include/IR/DebugInfo.h	/^  int64_t getCount() const { return get()->getCount(); }$/;"	f	class:llvm::DISubrange
getCount	include/IR/DebugInfoMetadata.h	/^  int64_t getCount() const { return Count; }$/;"	f	class:llvm::MDSubrange
getCtxId	tools/objtrace/ctxObjtraceRuntime.cpp	30;"	d	file:
getCurrent	include/IR/DebugInfo.h	/^  StringRef getCurrent() const { return Current; }$/;"	f	class:llvm::DIHeaderFieldIterator
getCurrentDebugLocation	include/IR/IRBuilder.h	/^  const DebugLoc &getCurrentDebugLocation() const { return CurDbgLocation; }$/;"	f	class:llvm::IRBuilderBase
getDLLStorageClass	include/IR/GlobalValue.h	/^  DLLStorageClassTypes getDLLStorageClass() const {$/;"	f	class:llvm::GlobalValue
getDataLayoutStr	include/IR/Module.h	/^  const std::string getDataLayoutStr() const {$/;"	f	class:llvm::Module
getDebugLoc	include/IR/DiagnosticInfo.h	/^  const DebugLoc &getDebugLoc() const { return DLoc; }$/;"	f	class:llvm::DiagnosticInfoOptimizationBase
getDebugLoc	include/IR/Instruction.h	/^  const DebugLoc &getDebugLoc() const { return DbgLoc; }$/;"	f	class:llvm::Instruction
getDeclaration	include/IR/DebugInfoMetadata.h	/^  MDSubprogram *getDeclaration() const {$/;"	f	class:llvm::MDSubprogram
getDefaultDest	include/IR/Instructions.h	/^  BasicBlock *getDefaultDest() const {$/;"	f	class:llvm::SwitchInst
getDefaultFPMathTag	include/IR/IRBuilder.h	/^  MDNode *getDefaultFPMathTag() const { return DefaultFPMathTag; }$/;"	f	class:llvm::IRBuilderBase
getDepth	include/IR/LegacyPassManagers.h	/^  unsigned getDepth() const { return Depth; }$/;"	f	class:llvm::PMDataManager
getDereferenceableBytes	include/IR/Attributes.h	/^  uint64_t getDereferenceableBytes() const { return DerefBytes; }$/;"	f	class:llvm::AttrBuilder
getDereferenceableBytes	include/IR/CallSite.h	/^  uint64_t getDereferenceableBytes(uint16_t i) const {$/;"	f	class:llvm::CallSiteBase
getDereferenceableBytes	include/IR/Function.h	/^  uint64_t getDereferenceableBytes(unsigned i) const {$/;"	f	class:llvm::Function
getDereferenceableBytes	include/IR/Instructions.h	/^  uint64_t getDereferenceableBytes(unsigned i) const {$/;"	f	class:llvm::CallInst
getDereferenceableBytes	include/IR/Instructions.h	/^  uint64_t getDereferenceableBytes(unsigned i) const {$/;"	f	class:llvm::InvokeInst
getDest	include/IR/IntrinsicInst.h	/^    Value *getDest() const { return const_cast<Value*>(getArgOperand(0)); }$/;"	f	class:llvm::VACopyInst
getDest	include/IR/IntrinsicInst.h	/^    Value *getDest() const { return getRawDest()->stripPointerCasts(); }$/;"	f	class:llvm::MemIntrinsic
getDestAddressSpace	include/IR/IntrinsicInst.h	/^    unsigned getDestAddressSpace() const {$/;"	f	class:llvm::MemIntrinsic
getDestTy	include/IR/InstrTypes.h	/^  Type* getDestTy() const { return getType(); }$/;"	f	class:llvm::CastInst
getDestTy	include/IR/Operator.h	/^  Type *getDestTy() const {$/;"	f	class:llvm::BitCastOperator
getDestination	include/IR/Instructions.h	/^  BasicBlock *getDestination(unsigned i) { return getSuccessor(i); }$/;"	f	class:llvm::IndirectBrInst
getDestination	include/IR/Instructions.h	/^  const BasicBlock *getDestination(unsigned i) const { return getSuccessor(i); }$/;"	f	class:llvm::IndirectBrInst
getDeviceInfo	lib/Metadata/EsperantoNamer.cpp	/^	EsperantoNamer::DeviceEntry* EsperantoNamer::getDeviceInfo(Function* F) {$/;"	f	class:corelab::EsperantoNamer
getDialect	include/IR/InlineAsm.h	/^  AsmDialect getDialect() const { return Dialect; }$/;"	f	class:llvm::InlineAsm
getDirectory	include/IR/DebugInfo.h	/^  StringRef getDirectory() const { return getFile().getDirectory(); }$/;"	f	class:llvm::DIGlobalVariable
getDirectory	include/IR/DebugInfo.h	/^  StringRef getDirectory() const { return getScope().getDirectory(); }$/;"	f	class:llvm::DILocation
getDirectory	include/IR/DebugInfoMetadata.h	/^  StringRef getDirectory() const { return getStringOperand(1); }$/;"	f	class:llvm::MDFile
getDiscriminator	include/IR/DebugInfo.h	/^  unsigned getDiscriminator() const { return get()->getDiscriminator(); }$/;"	f	class:llvm::DILexicalBlockFile
getDiscriminator	include/IR/DebugInfo.h	/^  unsigned getDiscriminator() const {$/;"	f	class:llvm::DILocation
getDiscriminator	include/IR/DebugInfoMetadata.h	/^  unsigned getDiscriminator() const { return Discriminator; }$/;"	f	class:llvm::MDLexicalBlockFile
getDisplayName	include/IR/DebugInfo.h	/^  StringRef getDisplayName() const { return get()->getDisplayName(); }$/;"	f	class:llvm::DIGlobalVariable
getDisplayName	include/IR/DebugInfo.h	/^  StringRef getDisplayName() const { return get()->getDisplayName(); }$/;"	f	class:llvm::DISubprogram
getDisplayName	include/IR/DebugInfoMetadata.h	/^  StringRef getDisplayName() const { return getStringOperand(3); }$/;"	f	class:llvm::MDSubprogram
getDisplayName	include/IR/DebugInfoMetadata.h	/^  StringRef getDisplayName() const { return getStringOperand(4); }$/;"	f	class:llvm::MDGlobalVariable
getDistinct	include/IR/Metadata.h	/^  static MDTuple *getDistinct(LLVMContext &Context, ArrayRef<Metadata *> MDs) {$/;"	f	class:llvm::MDTuple
getDistinct	include/IR/Metadata.h	/^MDTuple *MDNode::getDistinct(LLVMContext &Context, ArrayRef<Metadata *> MDs) {$/;"	f	class:llvm::MDNode
getDomTree	include/IR/Dominators.h	/^  DominatorTree &getDomTree() { return DT; }$/;"	f	class:llvm::DominatorTreeWrapperPass
getDomTree	include/IR/Dominators.h	/^  const DominatorTree &getDomTree() const { return DT; }$/;"	f	class:llvm::DominatorTreeWrapperPass
getDoubleElementsVectorType	include/IR/DerivedTypes.h	/^  static VectorType *getDoubleElementsVectorType(VectorType *VTy) {$/;"	f	class:llvm::VectorType
getDoubleTy	include/IR/IRBuilder.h	/^  Type *getDoubleTy() {$/;"	f	class:llvm::IRBuilderBase
getDwarfOperand	include/IR/DebugInfoMetadata.h	/^  const MDOperand &getDwarfOperand(unsigned I) const {$/;"	f	class:llvm::GenericDebugNode
getEdge	include/corelab/Utilities/ProfileInfo.h	/^    static Edge getEdge(const BType *Src, const BType *Dest) {$/;"	f	class:llvm::ProfileInfoT
getEdgeWeight	include/corelab/Utilities/ProfileInfo.h	/^    double getEdgeWeight(Edge e) const {$/;"	f	class:llvm::ProfileInfoT
getEdgeWeights	include/corelab/Utilities/ProfileInfo.h	/^    EdgeWeights &getEdgeWeights (const FType *F) {$/;"	f	class:llvm::ProfileInfoT
getElement	include/IR/DebugInfo.h	/^  T getElement(unsigned Idx) const { return getFieldAs<T>(Idx); }$/;"	f	class:llvm::DITypedArray
getElement	include/IR/DebugInfo.h	/^  uint64_t getElement(unsigned I) const { return get()->getElement(I); }$/;"	f	class:llvm::DIExpression
getElement	include/IR/DebugInfoMetadata.h	/^  uint64_t getElement(unsigned I) const {$/;"	f	class:llvm::MDExpression
getElementOffset	include/IR/DataLayout.h	/^  uint64_t getElementOffset(unsigned Idx) const {$/;"	f	class:llvm::StructLayout
getElementOffsetInBits	include/IR/DataLayout.h	/^  uint64_t getElementOffsetInBits(unsigned Idx) const {$/;"	f	class:llvm::StructLayout
getElementType	include/IR/DerivedTypes.h	/^  Type *getElementType() const { return ContainedTys[0]; }$/;"	f	class:llvm::SequentialType
getElementType	include/IR/DerivedTypes.h	/^  Type *getElementType(unsigned N) const {$/;"	f	class:llvm::StructType
getElements	include/IR/DebugInfo.h	/^  DIArray getElements() const {$/;"	f	class:llvm::DICompositeType
getElements	include/IR/DebugInfoMetadata.h	/^  ArrayRef<uint64_t> getElements() const { return Elements; }$/;"	f	class:llvm::MDExpression
getElements	include/IR/DebugInfoMetadata.h	/^  MDTuple *getElements() const {$/;"	f	class:llvm::MDCompositeTypeBase
getEmissionKind	include/IR/DebugInfo.h	/^  unsigned getEmissionKind() const { return get()->getEmissionKind(); }$/;"	f	class:llvm::DICompileUnit
getEmissionKind	include/IR/DebugInfoMetadata.h	/^  unsigned getEmissionKind() const { return EmissionKind; }$/;"	f	class:llvm::MDCompileUnit
getEmptyKey	include/IR/Attributes.h	/^  static inline AttributeSet getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	include/IR/Metadata.h	/^  static inline AAMDNodes getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	include/IR/ValueHandle.h	/^  static inline AssertingVH<T> getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	include/IR/ValueMap.h	/^  static inline VH getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEncoding	include/IR/DebugInfo.h	/^  unsigned getEncoding() const { return get()->getEncoding(); }$/;"	f	class:llvm::DIBasicType
getEncoding	include/IR/DebugInfoMetadata.h	/^  unsigned getEncoding() const { return Encoding; }$/;"	f	class:llvm::MDBasicType
getEnd	include/IR/Dominators.h	/^  const BasicBlock *getEnd() const {$/;"	f	class:llvm::BasicBlockEdge
getEntity	include/IR/DebugInfo.h	/^  DIDescriptorRef getEntity() const {$/;"	f	class:llvm::DIImportedEntity
getEntity	include/IR/DebugInfoMetadata.h	/^  Metadata *getEntity() const { return getRawEntity(); }$/;"	f	class:llvm::MDImportedEntity
getEntry	include/corelab/Metadata/NamedMetadata.h	/^			DeviceMapEntry* getEntry(DeviceMapEntry* source){$/;"	f	class:corelab::DeviceMap
getEntryBlock	include/IR/Function.h	/^        BasicBlock       &getEntryBlock()         { return front(); }$/;"	f	class:llvm::Function
getEntryBlock	include/IR/Function.h	/^  const BasicBlock       &getEntryBlock() const   { return front(); }$/;"	f	class:llvm::Function
getEntryNode	include/IR/CFG.h	/^  static NodeType *getEntryNode(BasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/CFG.h	/^  static NodeType *getEntryNode(Function *F) { return &F->getEntryBlock(); }$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/CFG.h	/^  static NodeType *getEntryNode(Inverse<BasicBlock *> G) { return G.Graph; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/CFG.h	/^  static NodeType *getEntryNode(Inverse<Function*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/CFG.h	/^  static NodeType *getEntryNode(Inverse<const BasicBlock*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/CFG.h	/^  static NodeType *getEntryNode(Inverse<const Function *> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/CFG.h	/^  static NodeType *getEntryNode(const BasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/CFG.h	/^  static NodeType *getEntryNode(const Function *F) {return &F->getEntryBlock();}$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/Dominators.h	/^  static NodeType *getEntryNode(DominatorTree *DT) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/Dominators.h	/^  static NodeType *getEntryNode(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/Type.h	/^  static inline NodeType *getEntryNode(NodeType *T) { return T; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	include/IR/Type.h	/^  static inline NodeType *getEntryNode(Type *T) { return T; }$/;"	f	struct:llvm::GraphTraits
getEnumTypes	include/IR/DebugInfo.h	/^  DIArray getEnumTypes() const { return DIArray(get()->getEnumTypes()); }$/;"	f	class:llvm::DICompileUnit
getEnumTypes	include/IR/DebugInfoMetadata.h	/^  MDTuple *getEnumTypes() const {$/;"	f	class:llvm::MDCompileUnit
getEnumValue	include/IR/DebugInfo.h	/^  int64_t getEnumValue() const { return get()->getValue(); }$/;"	f	class:llvm::DIEnumerator
getExactAShr	include/IR/Constants.h	/^  static Constant *getExactAShr(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getExactLShr	include/IR/Constants.h	/^  static Constant *getExactLShr(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getExactSDiv	include/IR/Constants.h	/^  static Constant *getExactSDiv(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getExactUDiv	include/IR/Constants.h	/^  static Constant *getExactUDiv(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getExitBB	lib/Utilities/FindFunctionExitBB.cpp	/^FindFunctionExitBB::ExitBBs& FindFunctionExitBB::getExitBB(Function *fun){$/;"	f	class:FindFunctionExitBB
getExitBBOfFunctionWithNoRetInst	lib/Utilities/FindFunctionExitBB.cpp	/^BasicBlock *FindFunctionExitBB::getExitBBOfFunctionWithNoRetInst(Function *fun){$/;"	f	class:FindFunctionExitBB
getExpression	include/IR/IntrinsicInst.h	/^    MDExpression *getExpression() const {$/;"	f	class:llvm::DbgDeclareInst
getExpression	include/IR/IntrinsicInst.h	/^    MDExpression *getExpression() const {$/;"	f	class:llvm::DbgValueInst
getExtendedElementVectorType	include/IR/DerivedTypes.h	/^  static VectorType *getExtendedElementVectorType(VectorType *VTy) {$/;"	f	class:llvm::VectorType
getExtraData	include/IR/DebugInfoMetadata.h	/^  Metadata *getExtraData() const { return getRawExtraData(); }$/;"	f	class:llvm::MDDerivedType
getFailureOrdering	include/IR/Instructions.h	/^  AtomicOrdering getFailureOrdering() const {$/;"	f	class:llvm::AtomicCmpXchgInst
getFalse	include/IR/IRBuilder.h	/^  ConstantInt *getFalse() {$/;"	f	class:llvm::IRBuilderBase
getFalseValue	include/IR/Instructions.h	/^  Value *getFalseValue() { return Op<2>(); }$/;"	f	class:llvm::SelectInst
getFalseValue	include/IR/Instructions.h	/^  const Value *getFalseValue() const { return Op<2>(); }$/;"	f	class:llvm::SelectInst
getFastMathFlags	include/IR/IRBuilder.h	/^  FastMathFlags getFastMathFlags() const { return FMF; }$/;"	f	class:llvm::IRBuilderBase
getFastMathFlags	include/IR/Operator.h	/^  FastMathFlags getFastMathFlags() const {$/;"	f	class:llvm::FPMathOperator
getFieldAs	include/IR/DebugInfo.h	/^  template <typename DescTy> DescTy getFieldAs(unsigned Elt) const {$/;"	f	class:llvm::DIDescriptor
getFile	include/IR/DebugInfo.h	/^  DIFile getFile() const { return DIFile(get()->getFile()); }$/;"	f	class:llvm::DIGlobalVariable
getFile	include/IR/DebugInfo.h	/^  DIFile getFile() const { return DIFile(get()->getFile()); }$/;"	f	class:llvm::DIObjCProperty
getFile	include/IR/DebugInfo.h	/^  DIFile getFile() const { return DIFile(get()->getFile()); }$/;"	f	class:llvm::DIVariable
getFile	include/IR/DebugInfoMetadata.h	/^  MDFile *getFile() const { return cast_or_null<MDFile>(getRawFile()); }$/;"	f	class:llvm::MDObjCProperty
getFile	include/IR/DebugInfoMetadata.h	/^  MDFile *getFile() const { return cast_or_null<MDFile>(getRawFile()); }$/;"	f	class:llvm::MDScope
getFile	include/IR/DebugInfoMetadata.h	/^  MDFile *getFile() const { return cast_or_null<MDFile>(getRawFile()); }$/;"	f	class:llvm::MDVariable
getFileName	include/IR/DiagnosticInfo.h	/^  const char *getFileName() const { return FileName; }$/;"	f	class:llvm::DiagnosticInfoSampleProfile
getFileNode	include/IR/DebugInfo.h	/^  MDNode *getFileNode() const { return get(); }$/;"	f	class:llvm::DIFile
getFilename	include/IR/DebugInfo.h	/^  StringRef getFilename() const { return getFile().getFilename(); }$/;"	f	class:llvm::DIGlobalVariable
getFilename	include/IR/DebugInfo.h	/^  StringRef getFilename() const { return getScope().getFilename(); }$/;"	f	class:llvm::DILocation
getFilename	include/IR/DebugInfoMetadata.h	/^  StringRef getFilename() const { return getStringOperand(0); }$/;"	f	class:llvm::MDFile
getFirstInsertionPt	include/IR/BasicBlock.h	/^  const_iterator getFirstInsertionPt() const {$/;"	f	class:llvm::BasicBlock
getFirstNonPHI	include/IR/BasicBlock.h	/^  const Instruction* getFirstNonPHI() const {$/;"	f	class:llvm::BasicBlock
getFirstNonPHIOrDbg	include/IR/BasicBlock.h	/^  const Instruction* getFirstNonPHIOrDbg() const {$/;"	f	class:llvm::BasicBlock
getFirstNonPHIOrDbgOrLifetime	include/IR/BasicBlock.h	/^  const Instruction* getFirstNonPHIOrDbgOrLifetime() const {$/;"	f	class:llvm::BasicBlock
getFlagWord	include/IR/InlineAsm.h	/^  static unsigned getFlagWord(unsigned Kind, unsigned NumOps) {$/;"	f	class:llvm::InlineAsm
getFlagWordForMatchingOp	include/IR/InlineAsm.h	/^  static unsigned getFlagWordForMatchingOp(unsigned InputFlag,$/;"	f	class:llvm::InlineAsm
getFlagWordForMem	include/IR/InlineAsm.h	/^  static unsigned getFlagWordForMem(unsigned InputFlag, unsigned Constraint) {$/;"	f	class:llvm::InlineAsm
getFlagWordForRegClass	include/IR/InlineAsm.h	/^  static unsigned getFlagWordForRegClass(unsigned InputFlag, unsigned RC) {$/;"	f	class:llvm::InlineAsm
getFlags	include/IR/DebugInfo.h	/^  StringRef getFlags() const { return get()->getFlags(); }$/;"	f	class:llvm::DICompileUnit
getFlags	include/IR/DebugInfo.h	/^  unsigned getFlags() const { return get()->getFlags(); }$/;"	f	class:llvm::DISubprogram
getFlags	include/IR/DebugInfo.h	/^  unsigned getFlags() const { return get()->getFlags(); }$/;"	f	class:llvm::DIType
getFlags	include/IR/DebugInfo.h	/^  unsigned getFlags() const { return get()->getFlags(); }$/;"	f	class:llvm::DIVariable
getFlags	include/IR/DebugInfoMetadata.h	/^  StringRef getFlags() const { return getStringOperand(2); }$/;"	f	class:llvm::MDCompileUnit
getFlags	include/IR/DebugInfoMetadata.h	/^  unsigned getFlags() const { return Flags; }$/;"	f	class:llvm::MDLocalVariable
getFlags	include/IR/DebugInfoMetadata.h	/^  unsigned getFlags() const { return Flags; }$/;"	f	class:llvm::MDSubprogram
getFlags	include/IR/DebugInfoMetadata.h	/^  unsigned getFlags() const { return Flags; }$/;"	f	class:llvm::MDType
getFloatTy	include/IR/IRBuilder.h	/^  Type *getFloatTy() {$/;"	f	class:llvm::IRBuilderBase
getFltSemantics	include/IR/Type.h	/^  const fltSemantics &getFltSemantics() const {$/;"	f	class:llvm::Type
getFnAttribute	include/IR/Function.h	/^  Attribute getFnAttribute(Attribute::AttrKind Kind) const {$/;"	f	class:llvm::Function
getFnAttribute	include/IR/Function.h	/^  Attribute getFnAttribute(StringRef Kind) const {$/;"	f	class:llvm::Function
getFnStackAlignment	include/IR/Function.h	/^  unsigned getFnStackAlignment() const {$/;"	f	class:llvm::Function
getFolder	include/IR/IRBuilder.h	/^  const T &getFolder() { return Folder; }$/;"	f	class:llvm::IRBuilder
getFromVoidPointer	include/IR/Instruction.h	/^  static inline PT getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	include/IR/Use.h	/^  static inline Use **getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	include/IR/Value.h	/^  static inline PT getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	include/IR/ValueHandle.h	/^  static inline ValueHandleBase **getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFullId	lib/Metadata/Namer.cpp	/^	uint64_t Namer::getFullId(const Instruction *I) {$/;"	f	class:corelab::Namer
getFullId	tools/objtrace/ctxObjtraceRuntime.cpp	29;"	d	file:
getFuncId	lib/Metadata/Namer.cpp	/^	uint16_t Namer::getFuncId(const Instruction *I) {$/;"	f	class:corelab::Namer
getFunction	include/IR/Constants.h	/^  Function *getFunction() const { return (Function*)Op<0>().get(); }$/;"	f	class:llvm::BlockAddress
getFunction	include/IR/DebugInfoMetadata.h	/^  ConstantAsMetadata *getFunction() const {$/;"	f	class:llvm::MDSubprogram
getFunction	include/IR/DiagnosticInfo.h	/^  const Function &getFunction() const { return Fn; }$/;"	f	class:llvm::DiagnosticInfoOptimizationBase
getFunction	include/IR/DiagnosticInfo.h	/^  const Function &getFunction() const { return Fn; }$/;"	f	class:llvm::DiagnosticInfoStackSize
getFunction	include/corelab/Utilities/InstInsertPt.h	/^      Function *getFunction() {$/;"	f	class:corelab::InstInsertPt
getFunction	include/corelab/Utilities/ProfileInfo.h	/^    static const FType* getFunction(Edge e) {$/;"	f	class:llvm::ProfileInfoT
getFunction	lib/Metadata/LoadNamer.cpp	/^	Function* LoadNamer::getFunction(Module &M, uint16_t funcId) {$/;"	f	class:corelab::LoadNamer
getFunctionDeclaration	include/IR/DebugInfo.h	/^  DISubprogram getFunctionDeclaration() const {$/;"	f	class:llvm::DISubprogram
getFunctionId	lib/Metadata/LoadNamer.cpp	/^	uint16_t LoadNamer::getFunctionId(Function &F) {$/;"	f	class:corelab::LoadNamer
getFunctionId	lib/Metadata/LoadNamer.cpp	/^	uint16_t LoadNamer::getFunctionId(const char* fName) {$/;"	f	class:corelab::LoadNamer
getFunctionList	include/IR/Module.h	/^  FunctionListType       &getFunctionList()           { return FunctionList; }$/;"	f	class:llvm::Module
getFunctionList	include/IR/Module.h	/^  const FunctionListType &getFunctionList() const     { return FunctionList; }$/;"	f	class:llvm::Module
getGEPReturnType	include/IR/Instructions.h	/^  static Type *getGEPReturnType(Value *Ptr, ArrayRef<Value *> IdxList) {$/;"	f	class:llvm::GetElementPtrInst
getGetElementPtr	include/IR/Constants.h	/^  static Constant *getGetElementPtr(Type *Ty, Constant *C, Constant *Idx,$/;"	f	class:llvm::ConstantExpr
getGetElementPtr	include/IR/Constants.h	/^  static Constant *getGetElementPtr(Type *Ty, Constant *C,$/;"	f	class:llvm::ConstantExpr
getGetterName	include/IR/DebugInfoMetadata.h	/^  StringRef getGetterName() const { return getStringOperand(2); }$/;"	f	class:llvm::MDObjCProperty
getGlobalList	include/IR/Module.h	/^  GlobalListType         &getGlobalList()             { return GlobalList; }$/;"	f	class:llvm::Module
getGlobalList	include/IR/Module.h	/^  const GlobalListType   &getGlobalList() const       { return GlobalList; }$/;"	f	class:llvm::Module
getGlobalPrefix	include/IR/DataLayout.h	/^  char getGlobalPrefix() const {$/;"	f	class:llvm::DataLayout
getGlobalValueSubClassData	include/IR/GlobalValue.h	/^  unsigned getGlobalValueSubClassData() const {$/;"	f	class:llvm::GlobalValue
getGlobalVariable	include/IR/Module.h	/^  GlobalVariable *getGlobalVariable(StringRef Name) const {$/;"	f	class:llvm::Module
getGlobalVariable	include/IR/Module.h	/^  GlobalVariable *getGlobalVariable(StringRef Name, bool AllowInternal) const {$/;"	f	class:llvm::Module
getGlobalVariables	include/IR/DebugInfo.h	/^  DIArray getGlobalVariables() const {$/;"	f	class:llvm::DICompileUnit
getGlobalVariables	include/IR/DebugInfoMetadata.h	/^  MDTuple *getGlobalVariables() const {$/;"	f	class:llvm::MDCompileUnit
getHalfElementsVectorType	include/IR/DerivedTypes.h	/^  static VectorType *getHalfElementsVectorType(VectorType *VTy) {$/;"	f	class:llvm::VectorType
getHalfTy	include/IR/IRBuilder.h	/^  Type *getHalfTy() {$/;"	f	class:llvm::IRBuilderBase
getHash	include/IR/DebugInfoMetadata.h	/^  unsigned getHash() const { return SubclassData32; }$/;"	f	class:llvm::GenericDebugNode
getHash	include/IR/IntrinsicInst.h	/^    ConstantInt *getHash() const {$/;"	f	class:llvm::InstrProfIncrementInst
getHash	include/IR/Metadata.h	/^  unsigned getHash() const { return SubclassData32; }$/;"	f	class:llvm::MDTuple
getHashValue	include/IR/Attributes.h	/^  static unsigned getHashValue(AttributeSet AS) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	include/IR/Metadata.h	/^  static unsigned getHashValue(const AAMDNodes &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	include/IR/ValueHandle.h	/^  static unsigned getHashValue(const AssertingVH<T> &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	include/IR/ValueMap.h	/^  static unsigned getHashValue(const KeyT &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	include/IR/ValueMap.h	/^  static unsigned getHashValue(const VH &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHeader	include/IR/DebugInfo.h	/^  StringRef getHeader() const { return Header; }$/;"	f	class:llvm::DIHeaderFieldIterator
getHeader	include/IR/DebugInfo.h	/^  StringRef getHeader() const { return getStringField(0); }$/;"	f	class:llvm::DIDescriptor
getHeader	include/IR/DebugInfoMetadata.h	/^  StringRef getHeader() const { return getStringOperand(0); }$/;"	f	class:llvm::GenericDebugNode
getHeaderField	include/IR/DebugInfo.h	/^  StringRef getHeaderField(unsigned Index) const {$/;"	f	class:llvm::DIDescriptor
getHeaderFieldAs	include/IR/DebugInfo.h	/^  template <class T> T getHeaderFieldAs(unsigned Index) const {$/;"	f	class:llvm::DIDescriptor
getHeaderIterator	include/IR/DebugInfo.h	/^  DIHeaderFieldIterator getHeaderIterator(unsigned Index) const {$/;"	f	class:llvm::DIDescriptor
getIdCount	lib/Metadata/EsperantoNamer.cpp	/^	int EsperantoNamer::getIdCount(CallInst* call) {$/;"	f	class:corelab::EsperantoNamer
getIdCount	lib/Metadata/EsperantoNamer.cpp	/^	int EsperantoNamer::getIdCount(DeviceEntry* dev) {$/;"	f	class:corelab::EsperantoNamer
getIdentifier	include/IR/DebugInfo.h	/^  MDString *getIdentifier() const { return get()->getRawIdentifier(); }$/;"	f	class:llvm::DICompositeType
getIdentifier	include/IR/DebugInfoMetadata.h	/^  StringRef getIdentifier() const { return getStringOperand(7); }$/;"	f	class:llvm::MDCompositeTypeBase
getIfExists	include/IR/Metadata.h	/^  static ConstantAsMetadata *getIfExists(Constant *C) {$/;"	f	class:llvm::ConstantAsMetadata
getIfExists	include/IR/Metadata.h	/^  static LocalAsMetadata *getIfExists(Value *Local) {$/;"	f	class:llvm::LocalAsMetadata
getIfExists	include/IR/Metadata.h	/^  static MDTuple *getIfExists(LLVMContext &Context, ArrayRef<Metadata *> MDs) {$/;"	f	class:llvm::MDTuple
getIfExists	include/IR/Metadata.h	/^MDTuple *MDNode::getIfExists(LLVMContext &Context, ArrayRef<Metadata *> MDs) {$/;"	f	class:llvm::MDNode
getImmutablePasses	include/IR/LegacyPassManagers.h	/^  inline SmallVectorImpl<ImmutablePass *>& getImmutablePasses() {$/;"	f	class:llvm::PMTopLevelManager
getImpl	include/IR/DebugInfoMetadata.h	/^  getImpl(LLVMContext &Context, MDScope *Scope, StringRef Name,$/;"	f	class:llvm::MDGlobalVariable
getImpl	include/IR/DebugInfoMetadata.h	/^  getImpl(LLVMContext &Context, Metadata *Scope, StringRef Name,$/;"	f	class:llvm::MDSubprogram
getImpl	include/IR/DebugInfoMetadata.h	/^  getImpl(LLVMContext &Context, StringRef Name, MDFile *File, unsigned Line,$/;"	f	class:llvm::MDObjCProperty
getImpl	include/IR/DebugInfoMetadata.h	/^  getImpl(LLVMContext &Context, unsigned SourceLanguage, MDFile *File,$/;"	f	class:llvm::MDCompileUnit
getImpl	include/IR/DebugInfoMetadata.h	/^  getImpl(LLVMContext &Context, unsigned Tag, StringRef Name, Metadata *File,$/;"	f	class:llvm::MDCompositeType
getImpl	include/IR/DebugInfoMetadata.h	/^  static GenericDebugNode *getImpl(LLVMContext &Context, unsigned Tag,$/;"	f	class:llvm::GenericDebugNode
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDBasicType *getImpl(LLVMContext &Context, unsigned Tag,$/;"	f	class:llvm::MDBasicType
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDDerivedType *getImpl(LLVMContext &Context, unsigned Tag,$/;"	f	class:llvm::MDDerivedType
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDEnumerator *getImpl(LLVMContext &Context, int64_t Value,$/;"	f	class:llvm::MDEnumerator
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDFile *getImpl(LLVMContext &Context, StringRef Filename,$/;"	f	class:llvm::MDFile
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDImportedEntity *getImpl(LLVMContext &Context, unsigned Tag,$/;"	f	class:llvm::MDImportedEntity
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDLexicalBlock *getImpl(LLVMContext &Context, MDLocalScope *Scope,$/;"	f	class:llvm::MDLexicalBlock
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDLexicalBlockFile *getImpl(LLVMContext &Context, MDLocalScope *Scope,$/;"	f	class:llvm::MDLexicalBlockFile
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDLocalVariable *getImpl(LLVMContext &Context, unsigned Tag,$/;"	f	class:llvm::MDLocalVariable
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDLocation *getImpl(LLVMContext &Context, unsigned Line,$/;"	f	class:llvm::MDLocation
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDNamespace *getImpl(LLVMContext &Context, MDScope *Scope,$/;"	f	class:llvm::MDNamespace
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDTemplateTypeParameter *getImpl(LLVMContext &Context, StringRef Name,$/;"	f	class:llvm::MDTemplateTypeParameter
getImpl	include/IR/DebugInfoMetadata.h	/^  static MDTemplateValueParameter *getImpl(LLVMContext &Context, unsigned Tag,$/;"	f	class:llvm::MDTemplateValueParameter
getImportedEntities	include/IR/DebugInfo.h	/^  DIArray getImportedEntities() const {$/;"	f	class:llvm::DICompileUnit
getImportedEntities	include/IR/DebugInfoMetadata.h	/^  MDTuple *getImportedEntities() const {$/;"	f	class:llvm::MDCompileUnit
getInBoundsGetElementPtr	include/IR/Constants.h	/^  static Constant *getInBoundsGetElementPtr(Type *Ty, Constant *C,$/;"	f	class:llvm::ConstantExpr
getIncomingBlock	include/IR/Instructions.h	/^  BasicBlock *getIncomingBlock(Value::const_user_iterator I) const {$/;"	f	class:llvm::PHINode
getIncomingBlock	include/IR/Instructions.h	/^  BasicBlock *getIncomingBlock(const Use &U) const {$/;"	f	class:llvm::PHINode
getIncomingBlock	include/IR/Instructions.h	/^  BasicBlock *getIncomingBlock(unsigned i) const {$/;"	f	class:llvm::PHINode
getIncomingValue	include/IR/Instructions.h	/^  Value *getIncomingValue(unsigned i) const {$/;"	f	class:llvm::PHINode
getIncomingValueForBlock	include/IR/Instructions.h	/^  Value *getIncomingValueForBlock(const BasicBlock *BB) const {$/;"	f	class:llvm::PHINode
getIncomingValueNumForOperand	include/IR/Instructions.h	/^  static unsigned getIncomingValueNumForOperand(unsigned i) {$/;"	f	class:llvm::PHINode
getIndex	include/IR/IntrinsicInst.h	/^    ConstantInt *getIndex() const {$/;"	f	class:llvm::InstrProfIncrementInst
getIndexOperand	include/IR/Instructions.h	/^  Value *getIndexOperand() { return Op<1>(); }$/;"	f	class:llvm::ExtractElementInst
getIndexOperand	include/IR/Instructions.h	/^  const Value *getIndexOperand() const { return Op<1>(); }$/;"	f	class:llvm::ExtractElementInst
getIndexedType	include/IR/GetElementPtrTypeIterator.h	/^    Type *getIndexedType() const {$/;"	f	class:llvm::generic_gep_type_iterator
getIndices	include/IR/Instructions.h	/^  ArrayRef<unsigned> getIndices() const {$/;"	f	class:llvm::ExtractValueInst
getIndices	include/IR/Instructions.h	/^  ArrayRef<unsigned> getIndices() const {$/;"	f	class:llvm::InsertValueInst
getInitializer	include/IR/GlobalVariable.h	/^  inline Constant *getInitializer() {$/;"	f	class:llvm::GlobalVariable
getInitializer	include/IR/GlobalVariable.h	/^  inline const Constant *getInitializer() const {$/;"	f	class:llvm::GlobalVariable
getInlinedAt	include/IR/DebugInfo.h	/^  MDNode *getInlinedAt() const { return DIDescriptor(get()->getInlinedAt()); }$/;"	f	class:llvm::DIVariable
getInlinedAt	include/IR/DebugInfoMetadata.h	/^  MDLocation *getInlinedAt() const {$/;"	f	class:llvm::MDLocalVariable
getInlinedAt	include/IR/DebugInfoMetadata.h	/^  MDLocation *getInlinedAt() const {$/;"	f	class:llvm::MDLocation
getInlinedAtScope	include/IR/DebugInfoMetadata.h	/^  MDLocalScope *getInlinedAtScope() const {$/;"	f	class:llvm::MDLocation
getInsertedValueOperand	include/IR/Instructions.h	/^  Value *getInsertedValueOperand() {$/;"	f	class:llvm::InsertValueInst
getInsertedValueOperand	include/IR/Instructions.h	/^  const Value *getInsertedValueOperand() const {$/;"	f	class:llvm::InsertValueInst
getInsertedValueOperandIndex	include/IR/Instructions.h	/^  static unsigned getInsertedValueOperandIndex() {$/;"	f	class:llvm::InsertValueInst
getInstList	include/IR/BasicBlock.h	/^        InstListType &getInstList()       { return InstList; }$/;"	f	class:llvm::BasicBlock
getInstList	include/IR/BasicBlock.h	/^  const InstListType &getInstList() const { return InstList; }$/;"	f	class:llvm::BasicBlock
getInstrId	lib/Metadata/Namer.cpp	/^	uint16_t Namer::getInstrId(const Instruction *I) {$/;"	f	class:corelab::Namer
getInstrId	tools/objtrace/ctxObjtraceRuntime.cpp	31;"	d	file:
getInstrType	lib/Metadata/Namer.cpp	/^	char Namer::getInstrType(const Instruction *I) {$/;"	f	class:corelab::Namer
getInstruction	include/IR/CallSite.h	/^  InstrTy *getInstruction() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
getInstruction	include/IR/DiagnosticInfo.h	/^  const Instruction *getInstruction() const { return Instr; }$/;"	f	class:llvm::DiagnosticInfoInlineAsm
getInstructionIterator	include/IR/InstIterator.h	/^  inline BIty  &getInstructionIterator() { return BI; }$/;"	f	class:llvm::InstIterator
getInt	include/IR/IRBuilder.h	/^  ConstantInt *getInt(const APInt &AI) {$/;"	f	class:llvm::IRBuilderBase
getInt1	include/IR/IRBuilder.h	/^  ConstantInt *getInt1(bool V) {$/;"	f	class:llvm::IRBuilderBase
getInt16	include/IR/IRBuilder.h	/^  ConstantInt *getInt16(uint16_t C) {$/;"	f	class:llvm::IRBuilderBase
getInt16Ty	include/IR/IRBuilder.h	/^  IntegerType *getInt16Ty() {$/;"	f	class:llvm::IRBuilderBase
getInt1Ty	include/IR/IRBuilder.h	/^  IntegerType *getInt1Ty() {$/;"	f	class:llvm::IRBuilderBase
getInt32	include/IR/IRBuilder.h	/^  ConstantInt *getInt32(uint32_t C) {$/;"	f	class:llvm::IRBuilderBase
getInt32Ty	include/IR/IRBuilder.h	/^  IntegerType *getInt32Ty() {$/;"	f	class:llvm::IRBuilderBase
getInt64	include/IR/IRBuilder.h	/^  ConstantInt *getInt64(uint64_t C) {$/;"	f	class:llvm::IRBuilderBase
getInt64Ty	include/IR/IRBuilder.h	/^  IntegerType *getInt64Ty() {$/;"	f	class:llvm::IRBuilderBase
getInt8	include/IR/IRBuilder.h	/^  ConstantInt *getInt8(uint8_t C) {$/;"	f	class:llvm::IRBuilderBase
getInt8PtrTy	include/IR/IRBuilder.h	/^  PointerType *getInt8PtrTy(unsigned AddrSpace = 0) {$/;"	f	class:llvm::IRBuilderBase
getInt8Ty	include/IR/IRBuilder.h	/^  IntegerType *getInt8Ty() {$/;"	f	class:llvm::IRBuilderBase
getIntN	include/IR/IRBuilder.h	/^  ConstantInt *getIntN(unsigned N, uint64_t C) {$/;"	f	class:llvm::IRBuilderBase
getIntNTy	include/IR/IRBuilder.h	/^  IntegerType *getIntNTy(unsigned N) {$/;"	f	class:llvm::IRBuilderBase
getIntPtrTy	include/IR/IRBuilder.h	/^  IntegerType *getIntPtrTy(const DataLayout &DL, unsigned AddrSpace = 0) {$/;"	f	class:llvm::IRBuilderBase
getInteger	include/IR/DerivedTypes.h	/^  static VectorType *getInteger(VectorType *VTy) {$/;"	f	class:llvm::VectorType
getIntrinsicID	include/IR/IntrinsicInst.h	/^    Intrinsic::ID getIntrinsicID() const {$/;"	f	class:llvm::IntrinsicInst
getInversePredicate	include/IR/InstrTypes.h	/^  Predicate getInversePredicate() const {$/;"	f	class:llvm::CmpInst
getKind	include/IR/DiagnosticInfo.h	/^  \/* DiagnosticKind *\/ int getKind() const { return Kind; }$/;"	f	class:llvm::DiagnosticInfo
getKind	include/IR/InlineAsm.h	/^  static unsigned getKind(unsigned Flags) {$/;"	f	class:llvm::InlineAsm
getKind	include/IR/ValueHandle.h	/^  HandleBaseKind getKind() const { return PrevPair.getInt(); }$/;"	f	class:llvm::ValueHandleBase
getLanguage	include/IR/DebugInfo.h	/^  dwarf::SourceLanguage getLanguage() const {$/;"	f	class:llvm::DICompileUnit
getLargestLegalIntType	include/IR/DataLayout.h	/^  Type *getLargestLegalIntType(LLVMContext &C) const {$/;"	f	class:llvm::DataLayout
getLength	include/IR/IntrinsicInst.h	/^    Value *getLength() const { return const_cast<Value*>(getArgOperand(2)); }$/;"	f	class:llvm::MemIntrinsic
getLength	include/IR/Metadata.h	/^  unsigned getLength() const { return (unsigned)getString().size(); }$/;"	f	class:llvm::MDString
getLengthUse	include/IR/IntrinsicInst.h	/^    Use &getLengthUse() { return getArgOperandUse(2); }$/;"	f	class:llvm::MemIntrinsic
getLengthUse	include/IR/IntrinsicInst.h	/^    const Use &getLengthUse() const { return getArgOperandUse(2); }$/;"	f	class:llvm::MemIntrinsic
getLimitedValue	include/IR/Constants.h	/^  uint64_t getLimitedValue(uint64_t Limit = ~0ULL) const {$/;"	f	class:llvm::ConstantInt
getLine	include/IR/DebugInfoMetadata.h	/^  unsigned getLine() const { return Line; }$/;"	f	class:llvm::MDImportedEntity
getLine	include/IR/DebugInfoMetadata.h	/^  unsigned getLine() const { return Line; }$/;"	f	class:llvm::MDLexicalBlock
getLine	include/IR/DebugInfoMetadata.h	/^  unsigned getLine() const { return Line; }$/;"	f	class:llvm::MDNamespace
getLine	include/IR/DebugInfoMetadata.h	/^  unsigned getLine() const { return Line; }$/;"	f	class:llvm::MDObjCProperty
getLine	include/IR/DebugInfoMetadata.h	/^  unsigned getLine() const { return Line; }$/;"	f	class:llvm::MDSubprogram
getLine	include/IR/DebugInfoMetadata.h	/^  unsigned getLine() const { return Line; }$/;"	f	class:llvm::MDType
getLine	include/IR/DebugInfoMetadata.h	/^  unsigned getLine() const { return Line; }$/;"	f	class:llvm::MDVariable
getLine	include/IR/DebugInfoMetadata.h	/^  unsigned getLine() const { return SubclassData32; }$/;"	f	class:llvm::MDLocation
getLineNum	include/IR/DiagnosticInfo.h	/^  unsigned getLineNum() const { return LineNum; }$/;"	f	class:llvm::DiagnosticInfoSampleProfile
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return get()->getLine(); }$/;"	f	class:llvm::DIGlobalVariable
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return get()->getLine(); }$/;"	f	class:llvm::DIImportedEntity
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return get()->getLine(); }$/;"	f	class:llvm::DILocation
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return get()->getLine(); }$/;"	f	class:llvm::DINameSpace
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return get()->getLine(); }$/;"	f	class:llvm::DIObjCProperty
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return get()->getLine(); }$/;"	f	class:llvm::DISubprogram
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return get()->getLine(); }$/;"	f	class:llvm::DIType
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return get()->getLine(); }$/;"	f	class:llvm::DIVariable
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const { return getScope().getLineNumber(); }$/;"	f	class:llvm::DILexicalBlockFile
getLineNumber	include/IR/DebugInfo.h	/^  unsigned getLineNumber() const {$/;"	f	class:llvm::DILexicalBlock
getLinkOnceLinkage	include/IR/GlobalValue.h	/^  static LinkageTypes getLinkOnceLinkage(bool ODR) {$/;"	f	class:llvm::GlobalValue
getLinkage	include/IR/GlobalValue.h	/^  LinkageTypes getLinkage() const { return Linkage; }$/;"	f	class:llvm::GlobalValue
getLinkageName	include/IR/DebugInfo.h	/^  StringRef getLinkageName() const { return get()->getLinkageName(); }$/;"	f	class:llvm::DIGlobalVariable
getLinkageName	include/IR/DebugInfo.h	/^  StringRef getLinkageName() const { return get()->getLinkageName(); }$/;"	f	class:llvm::DISubprogram
getLinkageName	include/IR/DebugInfoMetadata.h	/^  StringRef getLinkageName() const { return getStringOperand(4); }$/;"	f	class:llvm::MDSubprogram
getLinkageName	include/IR/DebugInfoMetadata.h	/^  StringRef getLinkageName() const { return getStringOperand(5); }$/;"	f	class:llvm::MDGlobalVariable
getLinkerPrivateGlobalPrefix	include/IR/DataLayout.h	/^  const char *getLinkerPrivateGlobalPrefix() const {$/;"	f	class:llvm::DataLayout
getList	include/IR/SymbolTableListTraits.h	/^  static iplist<ValueSubClass> &getList(ItemParentClass *Par) {$/;"	f	class:llvm::SymbolTableListTraits
getListOwner	include/IR/SymbolTableListTraits.h	/^  ItemParentClass *getListOwner() {$/;"	f	class:llvm::SymbolTableListTraits
getLo	include/IR/DebugInfo.h	/^  int64_t getLo() const { return get()->getLo(); }$/;"	f	class:llvm::DISubrange
getLo	include/IR/DebugInfoMetadata.h	/^  int64_t getLo() const { return Lo; }$/;"	f	class:llvm::MDSubrange
getLocCookie	include/IR/DiagnosticInfo.h	/^  unsigned getLocCookie() const { return LocCookie; }$/;"	f	class:llvm::DiagnosticInfoInlineAsm
getLocID	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline LocalContextID getLocID(){return locID;}$/;"	f	class:corelab::ContextTree
getLocID	lib/CAMP/ContextTreeBuilder.h	/^			inline LocalContextID getLocID(){return locID;}$/;"	f	class:corelab::ContextTree
getLocIDMapForCallSite	include/corelab/CAMP/ContextTreeBuilder.h	/^			LocIDMapForCallSite *getLocIDMapForCallSite(){return &locIdOf_callSite;}$/;"	f	class:corelab::ContextTreeBuilder
getLocIDMapForCallSite	lib/CAMP/ContextTreeBuilder.h	/^			LocIDMapForCallSite *getLocIDMapForCallSite(){return &locIdOf_callSite;}$/;"	f	class:corelab::ContextTreeBuilder
getLocIDMapForIndirectCalls	include/corelab/CAMP/ContextTreeBuilder.h	/^			LocIDMapForIndirectCalls *getLocIDMapForIndirectCalls(){return &locIdOf_indCall;}$/;"	f	class:corelab::ContextTreeBuilder
getLocIDMapForIndirectCalls	lib/CAMP/ContextTreeBuilder.h	/^			LocIDMapForIndirectCalls *getLocIDMapForIndirectCalls(){return &locIdOf_indCall;}$/;"	f	class:corelab::ContextTreeBuilder
getLocIDMapForLoop	include/corelab/CAMP/ContextTreeBuilder.h	/^			LocIDMapForLoop *getLocIDMapForLoop(){return &locIdOf_loop;}$/;"	f	class:corelab::ContextTreeBuilder
getLocIDMapForLoop	lib/CAMP/ContextTreeBuilder.h	/^			LocIDMapForLoop *getLocIDMapForLoop(){return &locIdOf_loop;}$/;"	f	class:corelab::ContextTreeBuilder
getLocal	include/IR/Metadata.h	/^  static LocalAsMetadata *getLocal(Value *Local) {$/;"	f	class:llvm::ValueAsMetadata
getLocalContextID	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline LocalContextID getLocalContextID(){return locID;}$/;"	f	class:corelab::ContextTree
getLocalContextID	lib/CAMP/ContextTreeBuilder.h	/^			inline LocalContextID getLocalContextID(){return locID;}$/;"	f	class:corelab::ContextTree
getLocalIfExists	include/IR/Metadata.h	/^  static LocalAsMetadata *getLocalIfExists(Value *Local) {$/;"	f	class:llvm::ValueAsMetadata
getLoop	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline const Loop* getLoop(){return loop;}$/;"	f	class:corelab::ContextTree
getLoop	lib/CAMP/ContextTreeBuilder.h	/^			inline const Loop* getLoop(){return loop;}$/;"	f	class:corelab::ContextTree
getLoopContextId	lib/Metadata/LoadNamer.cpp	/^	uint16_t LoadNamer::getLoopContextId(Loop *L, uint16_t functionId) {$/;"	f	class:corelab::LoadNamer
getLoopDepth	lib/AliasAnalysis/LoopTraverse.cpp	/^unsigned LoopTraverse::getLoopDepth(const Loop *loop) {$/;"	f	class:LoopTraverse
getLoopDepth_aux	lib/AliasAnalysis/LoopTraverse.cpp	/^unsigned LoopTraverse::getLoopDepth_aux(Function *func) {$/;"	f	class:LoopTraverse
getLoopIDMap	include/corelab/CAMP/ContextTreeBuilder.h	/^			LoopIdOf *getLoopIDMap(){return &loopIdOf;}$/;"	f	class:corelab::ContextTreeBuilder
getLoopIDMap	lib/CAMP/ContextTreeBuilder.h	/^			LoopIdOf *getLoopIDMap(){return &loopIdOf;}$/;"	f	class:corelab::ContextTreeBuilder
getLoopInfo	include/corelab/CAMP/ContextTreeBuilder.h	/^			LoopInfoOfFunc *getLoopInfo(){ return &loopInfoOf;}$/;"	f	class:corelab::ContextTreeBuilder
getLoopInfo	lib/CAMP/ContextTreeBuilder.h	/^			LoopInfoOfFunc *getLoopInfo(){ return &loopInfoOf;}$/;"	f	class:corelab::ContextTreeBuilder
getLoopMapOfCntxID	include/corelab/CAMP/ContextTreeBuilder.h	/^			LoopOfCntxID *getLoopMapOfCntxID(){return &loopOfCntxID;}$/;"	f	class:corelab::ContextTreeBuilder
getLoopMapOfCntxID	lib/CAMP/ContextTreeBuilder.h	/^			LoopOfCntxID *getLoopMapOfCntxID(){return &loopOfCntxID;}$/;"	f	class:corelab::ContextTreeBuilder
getLower	include/IR/ConstantRange.h	/^  const APInt &getLower() const { return Lower; }$/;"	f	class:llvm::ConstantRange
getManager	include/IR/PassManager.h	/^    const ModuleAnalysisManager &getManager() const { return *MAM; }$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy::Result
getManager	include/IR/PassManager.h	/^  FunctionAnalysisManager &getManager() { return *FAM; }$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy::Result
getMask	include/IR/Instructions.h	/^  Constant *getMask() const {$/;"	f	class:llvm::ShuffleVectorInst
getMaskValue	include/IR/Instructions.h	/^  int getMaskValue(unsigned i) const {$/;"	f	class:llvm::ShuffleVectorInst
getMaterializer	include/IR/Module.h	/^  GVMaterializer *getMaterializer() const { return Materializer.get(); }$/;"	f	class:llvm::Module
getMaxLoopDepth	lib/AliasAnalysis/LoopTraverse.cpp	/^unsigned LoopTraverse::getMaxLoopDepth(){$/;"	f	class:LoopTraverse
getMemoryConstraintID	include/IR/InlineAsm.h	/^  static unsigned getMemoryConstraintID(unsigned Flag) {$/;"	f	class:llvm::InlineAsm
getMetadata	include/IR/Instruction.h	/^  MDNode *getMetadata(StringRef Kind) const {$/;"	f	class:llvm::Instruction
getMetadata	include/IR/Instruction.h	/^  MDNode *getMetadata(unsigned KindID) const {$/;"	f	class:llvm::Instruction
getMetadata	include/IR/Metadata.h	/^  Metadata *getMetadata() const { return MD; }$/;"	f	class:llvm::MetadataAsValue
getMetadataID	include/IR/Metadata.h	/^  unsigned getMetadataID() const { return SubclassID; }$/;"	f	class:llvm::Metadata
getMetadataVersion	include/IR/DiagnosticInfo.h	/^  unsigned getMetadataVersion() const { return MetadataVersion; }$/;"	f	class:llvm::DiagnosticInfoDebugMetadataVersion
getModule	include/IR/DiagnosticInfo.h	/^  const Module &getModule() const { return M; }$/;"	f	class:llvm::DiagnosticInfoDebugMetadataVersion
getModule	include/corelab/Utilities/InstInsertPt.h	/^      Module *getModule() {$/;"	f	class:corelab::InstInsertPt
getModuleIdentifier	include/IR/Module.h	/^  const std::string &getModuleIdentifier() const { return ModuleID; }$/;"	f	class:llvm::Module
getModuleInlineAsm	include/IR/Module.h	/^  const std::string &getModuleInlineAsm() const { return GlobalScopeAsm; }$/;"	f	class:llvm::Module
getMsg	include/IR/DiagnosticInfo.h	/^  const Twine &getMsg() const { return Msg; }$/;"	f	class:llvm::DiagnosticInfoOptimizationBase
getMsg	include/IR/DiagnosticInfo.h	/^  const Twine &getMsg() const { return Msg; }$/;"	f	class:llvm::DiagnosticInfoSampleProfile
getMsgStr	include/IR/DiagnosticInfo.h	/^  const Twine &getMsgStr() const { return MsgStr; }$/;"	f	class:llvm::DiagnosticInfoInlineAsm
getMutex	include/IR/ValueMap.h	/^  static mutex_type *getMutex(const ExtraDataT &\/*Data*\/) { return nullptr; }$/;"	f	struct:llvm::ValueMapConfig
getNSWAdd	include/IR/Constants.h	/^  static Constant *getNSWAdd(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNSWMul	include/IR/Constants.h	/^  static Constant *getNSWMul(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNSWNeg	include/IR/Constants.h	/^  static Constant *getNSWNeg(Constant *C) { return getNeg(C, false, true); }$/;"	f	class:llvm::ConstantExpr
getNSWShl	include/IR/Constants.h	/^  static Constant *getNSWShl(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNSWSub	include/IR/Constants.h	/^  static Constant *getNSWSub(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNUWAdd	include/IR/Constants.h	/^  static Constant *getNUWAdd(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNUWMul	include/IR/Constants.h	/^  static Constant *getNUWMul(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNUWNeg	include/IR/Constants.h	/^  static Constant *getNUWNeg(Constant *C) { return getNeg(C, true, false); }$/;"	f	class:llvm::ConstantExpr
getNUWShl	include/IR/Constants.h	/^  static Constant *getNUWShl(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNUWSub	include/IR/Constants.h	/^  static Constant *getNUWSub(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DIEnumerator
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DIGlobalVariable
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DIImportedEntity
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DINameSpace
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DISubprogram
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DITemplateTypeParameter
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DITemplateValueParameter
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DIType
getName	include/IR/DebugInfo.h	/^  StringRef getName() const { return get()->getName(); }$/;"	f	class:llvm::DIVariable
getName	include/IR/DebugInfo.h	/^template <typename T> StringRef DIRef<T>::getName() const {$/;"	f	class:llvm::DIRef
getName	include/IR/DebugInfoMetadata.h	/^  StringRef getName() const { return getStringOperand(0); }$/;"	f	class:llvm::MDEnumerator
getName	include/IR/DebugInfoMetadata.h	/^  StringRef getName() const { return getStringOperand(0); }$/;"	f	class:llvm::MDObjCProperty
getName	include/IR/DebugInfoMetadata.h	/^  StringRef getName() const { return getStringOperand(0); }$/;"	f	class:llvm::MDTemplateParameter
getName	include/IR/DebugInfoMetadata.h	/^  StringRef getName() const { return getStringOperand(1); }$/;"	f	class:llvm::MDVariable
getName	include/IR/DebugInfoMetadata.h	/^  StringRef getName() const { return getStringOperand(2); }$/;"	f	class:llvm::MDImportedEntity
getName	include/IR/DebugInfoMetadata.h	/^  StringRef getName() const { return getStringOperand(2); }$/;"	f	class:llvm::MDNamespace
getName	include/IR/DebugInfoMetadata.h	/^  StringRef getName() const { return getStringOperand(2); }$/;"	f	class:llvm::MDSubprogram
getName	include/IR/DebugInfoMetadata.h	/^  StringRef getName() const { return getStringOperand(2); }$/;"	f	class:llvm::MDType
getName	include/IR/IntrinsicInst.h	/^    GlobalVariable *getName() const {$/;"	f	class:llvm::InstrProfIncrementInst
getName	include/IR/Module.h	/^  StringRef getName() const { return ModuleID; }$/;"	f	class:llvm::Module
getNameOfTarget	lib/AliasAnalysis/IndirectCallAnal.cpp	/^StringRef getNameOfTarget(const Value *calledVal){$/;"	f
getNamedGlobal	include/IR/Module.h	/^  GlobalVariable *getNamedGlobal(StringRef Name) {$/;"	f	class:llvm::Module
getNamedGlobal	include/IR/Module.h	/^  const GlobalVariable *getNamedGlobal(StringRef Name) const {$/;"	f	class:llvm::Module
getNamedMDList	include/IR/Module.h	/^  NamedMDListType        &getNamedMDList()            { return NamedMDList; }$/;"	f	class:llvm::Module
getNamedMDList	include/IR/Module.h	/^  const NamedMDListType  &getNamedMDList() const      { return NamedMDList; }$/;"	f	class:llvm::Module
getNewValOperand	include/IR/Instructions.h	/^  Value *getNewValOperand() { return getOperand(2); }$/;"	f	class:llvm::AtomicCmpXchgInst
getNewValOperand	include/IR/Instructions.h	/^  const Value *getNewValOperand() const { return getOperand(2); }$/;"	f	class:llvm::AtomicCmpXchgInst
getNext	include/IR/Use.h	/^  Use *getNext() const { return Next; }$/;"	f	class:llvm::Use
getNextInstruction	lib/Utilities/InstInsertPt.cpp	/^	Instruction *getNextInstruction(Instruction *i){$/;"	f	namespace:corelab
getNormalDest	include/IR/Instructions.h	/^  BasicBlock *getNormalDest() const {$/;"	f	class:llvm::InvokeInst
getNumArgOperands	include/IR/Instructions.h	/^  unsigned getNumArgOperands() const { return getNumOperands() - 1; }$/;"	f	class:llvm::CallInst
getNumArgOperands	include/IR/Instructions.h	/^  unsigned getNumArgOperands() const { return getNumOperands() - 3; }$/;"	f	class:llvm::InvokeInst
getNumArgs	include/IR/DebugInfoMetadata.h	/^    unsigned getNumArgs() const { return getSize() - 1; }$/;"	f	class:llvm::MDExpression::ExprOperand
getNumCases	include/IR/Instructions.h	/^  unsigned getNumCases() const {$/;"	f	class:llvm::SwitchInst
getNumClauses	include/IR/Instructions.h	/^  unsigned getNumClauses() const { return getNumOperands() - 1; }$/;"	f	class:llvm::LandingPadInst
getNumContainedManagers	include/IR/LegacyPassManagers.h	/^  unsigned getNumContainedManagers() const {$/;"	f	class:llvm::PMTopLevelManager
getNumContainedPasses	include/IR/LegacyPassManagers.h	/^  unsigned getNumContainedPasses() const {$/;"	f	class:llvm::PMDataManager
getNumContainedTypes	include/IR/Type.h	/^  unsigned getNumContainedTypes() const { return NumContainedTys; }$/;"	f	class:llvm::Type
getNumCounters	include/IR/IntrinsicInst.h	/^    ConstantInt *getNumCounters() const {$/;"	f	class:llvm::InstrProfIncrementInst
getNumDestinations	include/IR/Instructions.h	/^  unsigned getNumDestinations() const { return getNumOperands()-1; }$/;"	f	class:llvm::IndirectBrInst
getNumDwarfOperands	include/IR/DebugInfoMetadata.h	/^  unsigned getNumDwarfOperands() const { return getNumOperands() - 1; }$/;"	f	class:llvm::GenericDebugNode
getNumElements	include/IR/DebugInfo.h	/^  unsigned getNumElements() const { return get()->getNumElements(); }$/;"	f	class:llvm::DIExpression
getNumElements	include/IR/DebugInfo.h	/^  unsigned getNumElements() const {$/;"	f	class:llvm::DITypedArray
getNumElements	include/IR/DebugInfoMetadata.h	/^  unsigned getNumElements() const { return Elements.size(); }$/;"	f	class:llvm::MDExpression
getNumElements	include/IR/DerivedTypes.h	/^  uint64_t getNumElements() const { return NumElements; }$/;"	f	class:llvm::ArrayType
getNumElements	include/IR/DerivedTypes.h	/^  unsigned getNumElements() const { return NumContainedTys; }$/;"	f	class:llvm::StructType
getNumElements	include/IR/DerivedTypes.h	/^  unsigned getNumElements() const { return NumElements; }$/;"	f	class:llvm::VectorType
getNumHeaderFields	include/IR/DebugInfo.h	/^  size_t getNumHeaderFields() const {$/;"	f	class:llvm::DIDescriptor
getNumIncomingValues	include/IR/Instructions.h	/^  unsigned getNumIncomingValues() const { return getNumOperands(); }$/;"	f	class:llvm::PHINode
getNumIndices	include/IR/Instructions.h	/^  unsigned getNumIndices() const {  \/\/ Note: always non-negative$/;"	f	class:llvm::GetElementPtrInst
getNumIndices	include/IR/Instructions.h	/^  unsigned getNumIndices() const {$/;"	f	class:llvm::ExtractValueInst
getNumIndices	include/IR/Instructions.h	/^  unsigned getNumIndices() const {$/;"	f	class:llvm::InsertValueInst
getNumIndices	include/IR/Operator.h	/^  unsigned getNumIndices() const {  \/\/ Note: always non-negative$/;"	f	class:llvm::GEPOperator
getNumOperandRegisters	include/IR/InlineAsm.h	/^  static unsigned getNumOperandRegisters(unsigned Flag) {$/;"	f	class:llvm::InlineAsm
getNumOperands	include/IR/Metadata.h	/^  unsigned getNumOperands() const { return NumOperands; }$/;"	f	class:llvm::MDNode
getNumOperands	include/IR/User.h	/^  unsigned getNumOperands() const { return NumOperands; }$/;"	f	class:llvm::User
getNumParams	include/IR/DerivedTypes.h	/^  unsigned getNumParams() const { return NumContainedTys - 1; }$/;"	f	class:llvm::FunctionType
getNumSuccessors	include/IR/InstrTypes.h	/^  unsigned getNumSuccessors() const {$/;"	f	class:llvm::TerminatorInst
getNumSuccessors	include/IR/Instructions.h	/^  unsigned getNumSuccessors() const { return 0; }$/;"	f	class:llvm::ResumeInst
getNumSuccessors	include/IR/Instructions.h	/^  unsigned getNumSuccessors() const { return 0; }$/;"	f	class:llvm::ReturnInst
getNumSuccessors	include/IR/Instructions.h	/^  unsigned getNumSuccessors() const { return 0; }$/;"	f	class:llvm::UnreachableInst
getNumSuccessors	include/IR/Instructions.h	/^  unsigned getNumSuccessors() const { return 1+isConditional(); }$/;"	f	class:llvm::BranchInst
getNumSuccessors	include/IR/Instructions.h	/^  unsigned getNumSuccessors() const { return 2; }$/;"	f	class:llvm::InvokeInst
getNumSuccessors	include/IR/Instructions.h	/^  unsigned getNumSuccessors() const { return getNumOperands()-1; }$/;"	f	class:llvm::IndirectBrInst
getNumSuccessors	include/IR/Instructions.h	/^  unsigned getNumSuccessors() const { return getNumOperands()\/2; }$/;"	f	class:llvm::SwitchInst
getNumber	include/IR/DebugInfo.h	/^  template <class T> T getNumber() const {$/;"	f	class:llvm::DIHeaderFieldIterator
getObjCProperty	include/IR/DebugInfo.h	/^  MDNode *getObjCProperty() const {$/;"	f	class:llvm::DIDerivedType
getObjCPropertyGetterName	include/IR/DebugInfo.h	/^  StringRef getObjCPropertyGetterName() const { return get()->getGetterName(); }$/;"	f	class:llvm::DIObjCProperty
getObjCPropertyName	include/IR/DebugInfo.h	/^  StringRef getObjCPropertyName() const { return get()->getName(); }$/;"	f	class:llvm::DIObjCProperty
getObjCPropertySetterName	include/IR/DebugInfo.h	/^  StringRef getObjCPropertySetterName() const { return get()->getSetterName(); }$/;"	f	class:llvm::DIObjCProperty
getOffset	include/IR/IntrinsicInst.h	/^    uint64_t getOffset() const {$/;"	f	class:llvm::DbgValueInst
getOffsetInBits	include/IR/DebugInfo.h	/^  uint64_t getOffsetInBits() const { return get()->getOffsetInBits(); }$/;"	f	class:llvm::DIType
getOffsetInBits	include/IR/DebugInfoMetadata.h	/^  uint64_t getOffsetInBits() const { return OffsetInBits; }$/;"	f	class:llvm::MDType
getOp	include/IR/DebugInfoMetadata.h	/^    uint64_t getOp() const { return *Op; }$/;"	f	class:llvm::MDExpression::ExprOperand
getOpcode	include/IR/Constants.h	/^  unsigned getOpcode() const { return getSubclassDataFromValue(); }$/;"	f	class:llvm::ConstantExpr
getOpcode	include/IR/InstrTypes.h	/^  BinaryOps getOpcode() const {$/;"	f	class:llvm::BinaryOperator
getOpcode	include/IR/InstrTypes.h	/^  Instruction::CastOps getOpcode() const {$/;"	f	class:llvm::CastInst
getOpcode	include/IR/InstrTypes.h	/^  OtherOps getOpcode() const {$/;"	f	class:llvm::CmpInst
getOpcode	include/IR/Instruction.h	/^  unsigned getOpcode() const { return getValueID() - InstructionVal; }$/;"	f	class:llvm::Instruction
getOpcode	include/IR/Instructions.h	/^  OtherOps getOpcode() const {$/;"	f	class:llvm::SelectInst
getOpcode	include/IR/Operator.h	/^  static unsigned getOpcode(const Value *V) {$/;"	f	class:llvm::Operator
getOpcode	include/IR/Operator.h	/^  unsigned getOpcode() const {$/;"	f	class:llvm::Operator
getOpcodeName	include/IR/Instruction.h	/^  const char *getOpcodeName() const { return getOpcodeName(getOpcode()); }$/;"	f	class:llvm::Instruction
getOperand	include/IR/GetElementPtrTypeIterator.h	/^    Value *getOperand() const { return *OpIt; }$/;"	f	class:llvm::generic_gep_type_iterator
getOperand	include/IR/Metadata.h	/^  const MDOperand &getOperand(unsigned I) const {$/;"	f	class:llvm::MDNode
getOperand	include/IR/User.h	/^  Value *getOperand(unsigned i) const {$/;"	f	class:llvm::User
getOperandAs	include/IR/DebugInfoMetadata.h	/^  template <class Ty> Ty *getOperandAs(unsigned I) const {$/;"	f	class:llvm::DebugNode
getOperandNo	include/IR/CFG.h	/^  unsigned getOperandNo() const {$/;"	f	class:llvm::PredIterator
getOperandNumForIncomingValue	include/IR/Instructions.h	/^  static unsigned getOperandNumForIncomingValue(unsigned i) {$/;"	f	class:llvm::PHINode
getOperandUse	include/IR/User.h	/^  Use &getOperandUse(unsigned i) {$/;"	f	class:llvm::User
getOperandUse	include/IR/User.h	/^  const Use &getOperandUse(unsigned i) const {$/;"	f	class:llvm::User
getOperation	include/IR/Instructions.h	/^  BinOp getOperation() const {$/;"	f	class:llvm::AtomicRMWInst
getOption	include/IR/LLVMContext.h	/^  ValT getOption() const {$/;"	f	class:llvm::LLVMContext
getOrInsertDeviceList	lib/Metadata/EsperantoNamer.cpp	/^	EsperantoNamer::DeviceEntry* EsperantoNamer::getOrInsertDeviceList(const char* compName, const char* compType) {$/;"	f	class:corelab::EsperantoNamer
getOrdering	include/IR/Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::AtomicRMWInst
getOrdering	include/IR/Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::FenceInst
getOrdering	include/IR/Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::LoadInst
getOrdering	include/IR/Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::StoreInst
getOrigLocation	include/IR/DebugInfo.h	/^  DILocation getOrigLocation() const {$/;"	f	class:llvm::DILocation
getParamAlignment	include/IR/CallSite.h	/^  uint16_t getParamAlignment(uint16_t i) const {$/;"	f	class:llvm::CallSiteBase
getParamAlignment	include/IR/Function.h	/^  unsigned getParamAlignment(unsigned i) const {$/;"	f	class:llvm::Function
getParamAlignment	include/IR/Instructions.h	/^  unsigned getParamAlignment(unsigned i) const {$/;"	f	class:llvm::CallInst
getParamAlignment	include/IR/Instructions.h	/^  unsigned getParamAlignment(unsigned i) const {$/;"	f	class:llvm::InvokeInst
getParamType	include/IR/DerivedTypes.h	/^  Type *getParamType(unsigned i) const { return ContainedTys[i+1]; }$/;"	f	class:llvm::FunctionType
getParent	include/IR/Argument.h	/^  inline       Function *getParent()       { return Parent; }$/;"	f	class:llvm::Argument
getParent	include/IR/Argument.h	/^  inline const Function *getParent() const { return Parent; }$/;"	f	class:llvm::Argument
getParent	include/IR/BasicBlock.h	/^        Function *getParent()       { return Parent; }$/;"	f	class:llvm::BasicBlock
getParent	include/IR/BasicBlock.h	/^  const Function *getParent() const { return Parent; }$/;"	f	class:llvm::BasicBlock
getParent	include/IR/GlobalValue.h	/^  Module *getParent() { return Parent; }$/;"	f	class:llvm::GlobalValue
getParent	include/IR/GlobalValue.h	/^  const Module *getParent() const { return Parent; }$/;"	f	class:llvm::GlobalValue
getParent	include/IR/Instruction.h	/^  inline       BasicBlock *getParent()       { return Parent; }$/;"	f	class:llvm::Instruction
getParent	include/IR/Instruction.h	/^  inline const BasicBlock *getParent() const { return Parent; }$/;"	f	class:llvm::Instruction
getParent	include/IR/Metadata.h	/^  inline Module *getParent() { return Parent; }$/;"	f	class:llvm::NamedMDNode
getParent	include/IR/Metadata.h	/^  inline const Module *getParent() const { return Parent; }$/;"	f	class:llvm::NamedMDNode
getParent	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline ContextTree* getParent(){return parent;}$/;"	f	class:corelab::ContextTree
getParent	lib/CAMP/ContextTreeBuilder.h	/^			inline ContextTree* getParent(){return parent;}$/;"	f	class:corelab::ContextTree
getParentUCID	include/corelab/CAMP/ContextTreeBuilder.h	/^			UniqueContextID getParentUCID (ContextTreeNode *myNode) $/;"	f	class:corelab::ContextTreeBuilder
getParentUCID	lib/CAMP/CampCache.cpp	/^UniqueContextID CAMPCache::getParentUCID ( ContextTreeNode *node )$/;"	f	class:CAMPCache
getParentUCID	lib/CAMP/ContextTreeBuilder.h	/^			UniqueContextID getParentUCID (ContextTreeNode *myNode) $/;"	f	class:corelab::ContextTreeBuilder
getPassManagerType	include/IR/LegacyPassManagers.h	/^  virtual PassManagerType getPassManagerType() const {$/;"	f	class:llvm::PMDataManager
getPassName	include/IR/DiagnosticInfo.h	/^  const char *getPassName() const { return PassName; }$/;"	f	class:llvm::DiagnosticInfoOptimizationBase
getPassName	include/corelab/AliasAnalysis/TestClient.hpp	/^			StringRef getPassName() const { return "TestAAClient"; }$/;"	f	class:corelab::TestAAClient
getPassName	include/corelab/CAMP/CAMP.h	/^			const char *getPassName() const { return "CAMP"; }$/;"	f	class:corelab::CAMPInstaller
getPassName	include/corelab/CAMP/CampCache.h	/^			const char *getPassName() const { return "CAMP"; }$/;"	f	class:corelab::CAMPCache
getPassName	include/corelab/CAMP/CampExectime.h	/^			const char *getPassName() const { return "CAMP"; }$/;"	f	class:corelab::CAMPExectime
getPassName	include/corelab/CAMP/CampPlain.h	/^			const char *getPassName() const { return "CAMP_Plain"; }$/;"	f	class:corelab::CAMPPlain
getPassName	include/corelab/CAMP/ContextTreeBuilder.h	/^			const char *getPassName() const { return "CAMP-context-tree-builder"; }$/;"	f	class:corelab::ContextTreeBuilder
getPassName	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			const char *getPassName() const { return "regi-inter-iter-dep-finder"; }$/;"	f	class:corelab::RegiInterIterDepFinder
getPassName	include/corelab/Metadata/LoadNamer.h	/^			const char *getPassName() const { return "LoadNamer"; }$/;"	f	class:corelab::LoadNamer
getPassName	include/corelab/Metadata/Metadata.h	/^			const char *getPassName() const { return "MetadataManager"; }$/;"	f	class:corelab::Namer
getPassName	include/corelab/Metadata/NamedMetadata.h	/^			const char *getPassName() const { return "EsperantoNamer"; }$/;"	f	class:corelab::EsperantoNamer
getPassName	include/corelab/ObjTrace/CtxObjtrace.h	/^			const char *getPassName() const { return "Cxt-Objtrace"; }$/;"	f	class:corelab::CtxObjtrace
getPassName	include/corelab/ObjTrace/ObjTrace.h	/^      const char *getPassName() const { return "ObjTrace"; }$/;"	f	class:corelab::ObjTrace
getPassName	lib/CAMP/CAMP.h	/^			const char *getPassName() const { return "CAMP"; }$/;"	f	class:corelab::CAMPInstaller
getPassName	lib/CAMP/CampCache.h	/^			const char *getPassName() const { return "CAMP"; }$/;"	f	class:corelab::CAMPCache
getPassName	lib/CAMP/CampExectime.h	/^			const char *getPassName() const { return "CAMP"; }$/;"	f	class:corelab::CAMPExectime
getPassName	lib/CAMP/CampPlain.h	/^			const char *getPassName() const { return "CAMP_Plain"; }$/;"	f	class:corelab::CAMPPlain
getPassName	lib/CAMP/ContextTreeBuilder.h	/^			const char *getPassName() const { return "CAMP-context-tree-builder"; }$/;"	f	class:corelab::ContextTreeBuilder
getPassName	lib/CAMP/RegiInterIterDepFinder.h	/^			const char *getPassName() const { return "regi-inter-iter-dep-finder"; }$/;"	f	class:corelab::RegiInterIterDepFinder
getPassName	lib/ObjTrace/CtxObjtrace.h	/^			const char *getPassName() const { return "Cxt-Objtrace"; }$/;"	f	class:corelab::CtxObjtrace
getPassName	lib/ObjTrace/ObjTrace.h	/^      const char *getPassName() const { return "ObjTrace"; }$/;"	f	class:corelab::ObjTrace
getPersonalityFn	include/IR/Instructions.h	/^  Value *getPersonalityFn() const { return getOperand(0); }$/;"	f	class:llvm::LandingPadInst
getPlatform	lib/Metadata/EsperantoNamer.cpp	/^	EsperantoNamer::EsperantoPlatform EsperantoNamer::getPlatform(const char* compType) {$/;"	f	class:corelab::EsperantoNamer
getPlatformAsString	lib/Metadata/EsperantoNamer.cpp	/^	const char* EsperantoNamer::getPlatformAsString(EsperantoNamer::EsperantoPlatform E) {$/;"	f	class:corelab::EsperantoNamer
getPoint	include/IR/IRBuilder.h	/^    llvm::BasicBlock::iterator getPoint() const { return Point; }$/;"	f	class:llvm::IRBuilderBase::InsertPoint
getPointerAddressSpace	include/IR/Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::AtomicCmpXchgInst
getPointerAddressSpace	include/IR/Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::AtomicRMWInst
getPointerAddressSpace	include/IR/Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::GetElementPtrInst
getPointerAddressSpace	include/IR/Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::LoadInst
getPointerAddressSpace	include/IR/Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::PtrToIntInst
getPointerAddressSpace	include/IR/Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::StoreInst
getPointerAddressSpace	include/IR/Operator.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::GEPOperator
getPointerAddressSpace	include/IR/Operator.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::PtrToIntOperator
getPointerElementType	include/IR/Type.h	/^  Type *getPointerElementType() const { return getSequentialElementType(); }$/;"	f	class:llvm::Type
getPointerIntoBucketsArray	include/IR/ValueMap.h	/^  const void *getPointerIntoBucketsArray() const {$/;"	f	class:llvm::ValueMap
getPointerOperand	include/IR/Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::AtomicCmpXchgInst
getPointerOperand	include/IR/Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::AtomicRMWInst
getPointerOperand	include/IR/Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::LoadInst
getPointerOperand	include/IR/Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::PtrToIntInst
getPointerOperand	include/IR/Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::VAArgInst
getPointerOperand	include/IR/Instructions.h	/^  Value *getPointerOperand() { return getOperand(1); }$/;"	f	class:llvm::StoreInst
getPointerOperand	include/IR/Instructions.h	/^  Value *getPointerOperand() {$/;"	f	class:llvm::GetElementPtrInst
getPointerOperand	include/IR/Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::AtomicCmpXchgInst
getPointerOperand	include/IR/Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::AtomicRMWInst
getPointerOperand	include/IR/Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::LoadInst
getPointerOperand	include/IR/Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::PtrToIntInst
getPointerOperand	include/IR/Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::VAArgInst
getPointerOperand	include/IR/Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(1); }$/;"	f	class:llvm::StoreInst
getPointerOperand	include/IR/Instructions.h	/^  const Value *getPointerOperand() const {$/;"	f	class:llvm::GetElementPtrInst
getPointerOperand	include/IR/Operator.h	/^  Value *getPointerOperand() {$/;"	f	class:llvm::GEPOperator
getPointerOperand	include/IR/Operator.h	/^  Value *getPointerOperand() {$/;"	f	class:llvm::PtrToIntOperator
getPointerOperand	include/IR/Operator.h	/^  const Value *getPointerOperand() const {$/;"	f	class:llvm::GEPOperator
getPointerOperand	include/IR/Operator.h	/^  const Value *getPointerOperand() const {$/;"	f	class:llvm::PtrToIntOperator
getPointerOperandIndex	include/IR/Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::AtomicCmpXchgInst
getPointerOperandIndex	include/IR/Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::AtomicRMWInst
getPointerOperandIndex	include/IR/Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::LoadInst
getPointerOperandIndex	include/IR/Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::PtrToIntInst
getPointerOperandIndex	include/IR/Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::VAArgInst
getPointerOperandIndex	include/IR/Instructions.h	/^  static unsigned getPointerOperandIndex() { return 1U; }$/;"	f	class:llvm::StoreInst
getPointerOperandIndex	include/IR/Instructions.h	/^  static unsigned getPointerOperandIndex() {$/;"	f	class:llvm::GetElementPtrInst
getPointerOperandIndex	include/IR/Operator.h	/^  static unsigned getPointerOperandIndex() {$/;"	f	class:llvm::GEPOperator
getPointerOperandIndex	include/IR/Operator.h	/^  static unsigned getPointerOperandIndex() {$/;"	f	class:llvm::PtrToIntOperator
getPointerOperandType	include/IR/Instructions.h	/^  Type *getPointerOperandType() const {$/;"	f	class:llvm::GetElementPtrInst
getPointerOperandType	include/IR/Operator.h	/^  Type *getPointerOperandType() const {$/;"	f	class:llvm::GEPOperator
getPointerOperandType	include/IR/Operator.h	/^  Type *getPointerOperandType() const {$/;"	f	class:llvm::PtrToIntOperator
getPointerSizeInBits	include/IR/DataLayout.h	/^  unsigned getPointerSizeInBits(unsigned AS = 0) const {$/;"	f	class:llvm::DataLayout
getPointerTypeSize	include/IR/DataLayout.h	/^  unsigned getPointerTypeSize(Type *Ty) const {$/;"	f	class:llvm::DataLayout
getPosition	include/corelab/Utilities/InstInsertPt.h	/^      Instruction *getPosition() {$/;"	f	class:corelab::InstInsertPt
getPredicate	include/IR/InstrTypes.h	/^  Predicate getPredicate() const {$/;"	f	class:llvm::CmpInst
getPrefix	include/IR/DebugInfo.h	/^  StringRef getPrefix() const {$/;"	f	class:llvm::DIHeaderFieldIterator
getPrevPtr	include/IR/ValueHandle.h	/^  ValueHandleBase **getPrevPtr() const { return PrevPair.getPointer(); }$/;"	f	class:llvm::ValueHandleBase
getPrivateGlobalPrefix	include/IR/DataLayout.h	/^  const char *getPrivateGlobalPrefix() const {$/;"	f	class:llvm::DataLayout
getProducer	include/IR/DebugInfo.h	/^  StringRef getProducer() const { return get()->getProducer(); }$/;"	f	class:llvm::DICompileUnit
getProducer	include/IR/DebugInfoMetadata.h	/^  StringRef getProducer() const { return getStringOperand(1); }$/;"	f	class:llvm::MDCompileUnit
getProloguePosition	lib/CAMP/CAMP.cpp	/^Instruction *getProloguePosition(Instruction *inst){$/;"	f
getRawBaseType	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawBaseType() const { return getOperand(3); }$/;"	f	class:llvm::MDDerivedTypeBase
getRawContainingType	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawContainingType() const { return getOperand(6); }$/;"	f	class:llvm::MDSubprogram
getRawDeclaration	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawDeclaration() const { return getOperand(9); }$/;"	f	class:llvm::MDSubprogram
getRawDest	include/IR/IntrinsicInst.h	/^    Value *getRawDest() const { return const_cast<Value*>(getArgOperand(0)); }$/;"	f	class:llvm::MemIntrinsic
getRawDestUse	include/IR/IntrinsicInst.h	/^    Use &getRawDestUse() { return getArgOperandUse(0); }$/;"	f	class:llvm::MemIntrinsic
getRawDestUse	include/IR/IntrinsicInst.h	/^    const Use &getRawDestUse() const { return getArgOperandUse(0); }$/;"	f	class:llvm::MemIntrinsic
getRawDirectory	include/IR/DebugInfoMetadata.h	/^  MDString *getRawDirectory() const { return getOperandAs<MDString>(1); }$/;"	f	class:llvm::MDFile
getRawElements	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawElements() const { return getOperand(4); }$/;"	f	class:llvm::MDCompositeTypeBase
getRawEntity	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawEntity() const { return getOperand(1); }$/;"	f	class:llvm::MDImportedEntity
getRawEnumTypes	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawEnumTypes() const { return getOperand(4); }$/;"	f	class:llvm::MDCompileUnit
getRawExpression	include/IR/IntrinsicInst.h	/^    Metadata *getRawExpression() const {$/;"	f	class:llvm::DbgDeclareInst
getRawExpression	include/IR/IntrinsicInst.h	/^    Metadata *getRawExpression() const {$/;"	f	class:llvm::DbgValueInst
getRawExtraData	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawExtraData() const { return getOperand(4); }$/;"	f	class:llvm::MDDerivedType
getRawFile	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawFile() const { return getOperand(1); }$/;"	f	class:llvm::MDObjCProperty
getRawFile	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawFile() const { return getOperand(2); }$/;"	f	class:llvm::MDVariable
getRawFile	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawFile() const {$/;"	f	class:llvm::MDScope
getRawFilename	include/IR/DebugInfoMetadata.h	/^  MDString *getRawFilename() const { return getOperandAs<MDString>(0); }$/;"	f	class:llvm::MDFile
getRawFlags	include/IR/DebugInfoMetadata.h	/^  MDString *getRawFlags() const { return getOperandAs<MDString>(2); }$/;"	f	class:llvm::MDCompileUnit
getRawFunction	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawFunction() const { return getOperand(7); }$/;"	f	class:llvm::MDSubprogram
getRawGetterName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawGetterName() const { return getOperandAs<MDString>(2); }$/;"	f	class:llvm::MDObjCProperty
getRawGlobalVariables	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawGlobalVariables() const { return getOperand(7); }$/;"	f	class:llvm::MDCompileUnit
getRawIdentifier	include/IR/DebugInfoMetadata.h	/^  MDString *getRawIdentifier() const { return getOperandAs<MDString>(7); }$/;"	f	class:llvm::MDCompositeTypeBase
getRawImportedEntities	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawImportedEntities() const { return getOperand(8); }$/;"	f	class:llvm::MDCompileUnit
getRawInlinedAt	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawInlinedAt() const { return getOperand(4); }$/;"	f	class:llvm::MDLocalVariable
getRawInlinedAt	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawInlinedAt() const {$/;"	f	class:llvm::MDLocation
getRawLinkageName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawLinkageName() const { return getOperandAs<MDString>(4); }$/;"	f	class:llvm::MDSubprogram
getRawLinkageName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawLinkageName() const { return getOperandAs<MDString>(5); }$/;"	f	class:llvm::MDGlobalVariable
getRawName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawName() const { return getOperandAs<MDString>(0); }$/;"	f	class:llvm::MDEnumerator
getRawName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawName() const { return getOperandAs<MDString>(0); }$/;"	f	class:llvm::MDObjCProperty
getRawName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawName() const { return getOperandAs<MDString>(0); }$/;"	f	class:llvm::MDTemplateParameter
getRawName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawName() const { return getOperandAs<MDString>(1); }$/;"	f	class:llvm::MDVariable
getRawName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawName() const { return getOperandAs<MDString>(2); }$/;"	f	class:llvm::MDImportedEntity
getRawName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawName() const { return getOperandAs<MDString>(2); }$/;"	f	class:llvm::MDNamespace
getRawName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawName() const { return getOperandAs<MDString>(2); }$/;"	f	class:llvm::MDSubprogram
getRawName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawName() const { return getOperandAs<MDString>(2); }$/;"	f	class:llvm::MDType
getRawPointer	include/IR/Attributes.h	/^  void *getRawPointer() const {$/;"	f	class:llvm::AttributeSet
getRawProducer	include/IR/DebugInfoMetadata.h	/^  MDString *getRawProducer() const { return getOperandAs<MDString>(1); }$/;"	f	class:llvm::MDCompileUnit
getRawRetainedTypes	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawRetainedTypes() const { return getOperand(5); }$/;"	f	class:llvm::MDCompileUnit
getRawScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawScope() const { return getOperand(0); }$/;"	f	class:llvm::MDImportedEntity
getRawScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawScope() const { return getOperand(0); }$/;"	f	class:llvm::MDLocation
getRawScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawScope() const { return getOperand(0); }$/;"	f	class:llvm::MDVariable
getRawScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawScope() const { return getOperand(1); }$/;"	f	class:llvm::MDLexicalBlockBase
getRawScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawScope() const { return getOperand(1); }$/;"	f	class:llvm::MDNamespace
getRawScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawScope() const { return getOperand(1); }$/;"	f	class:llvm::MDSubprogram
getRawScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawScope() const { return getOperand(1); }$/;"	f	class:llvm::MDType
getRawSetterName	include/IR/DebugInfoMetadata.h	/^  MDString *getRawSetterName() const { return getOperandAs<MDString>(3); }$/;"	f	class:llvm::MDObjCProperty
getRawSource	include/IR/IntrinsicInst.h	/^    Value *getRawSource() const { return const_cast<Value*>(getArgOperand(1)); }$/;"	f	class:llvm::MemTransferInst
getRawSourceUse	include/IR/IntrinsicInst.h	/^    Use &getRawSourceUse() { return getArgOperandUse(1); }$/;"	f	class:llvm::MemTransferInst
getRawSourceUse	include/IR/IntrinsicInst.h	/^    const Use &getRawSourceUse() const { return getArgOperandUse(1); }$/;"	f	class:llvm::MemTransferInst
getRawSplitDebugFilename	include/IR/DebugInfoMetadata.h	/^  MDString *getRawSplitDebugFilename() const {$/;"	f	class:llvm::MDCompileUnit
getRawStaticDataMemberDeclaration	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawStaticDataMemberDeclaration() const { return getOperand(7); }$/;"	f	class:llvm::MDGlobalVariable
getRawSubclassOptionalData	include/IR/Value.h	/^  unsigned getRawSubclassOptionalData() const {$/;"	f	class:llvm::Value
getRawSubprograms	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawSubprograms() const { return getOperand(6); }$/;"	f	class:llvm::MDCompileUnit
getRawTemplateParams	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawTemplateParams() const { return getOperand(6); }$/;"	f	class:llvm::MDCompositeTypeBase
getRawTemplateParams	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawTemplateParams() const { return getOperand(8); }$/;"	f	class:llvm::MDSubprogram
getRawType	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawType() const { return getOperand(3); }$/;"	f	class:llvm::MDVariable
getRawType	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawType() const { return getOperand(4); }$/;"	f	class:llvm::MDObjCProperty
getRawType	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawType() const { return getOperand(5); }$/;"	f	class:llvm::MDSubprogram
getRawTypeArray	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawTypeArray() const { return getRawElements(); }$/;"	f	class:llvm::MDSubroutineType
getRawVTableHolder	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawVTableHolder() const { return getOperand(5); }$/;"	f	class:llvm::MDCompositeTypeBase
getRawValPtr	include/IR/ValueHandle.h	/^  Value *getRawValPtr() const { return ThePtr; }$/;"	f	class:llvm::AssertingVH
getRawValPtr	include/IR/ValueHandle.h	/^  Value *getRawValPtr() const { return ValueHandleBase::getValPtr(); }$/;"	f	class:llvm::AssertingVH
getRawVariable	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawVariable() const { return getOperand(6); }$/;"	f	class:llvm::MDGlobalVariable
getRawVariable	include/IR/IntrinsicInst.h	/^    Metadata *getRawVariable() const {$/;"	f	class:llvm::DbgDeclareInst
getRawVariable	include/IR/IntrinsicInst.h	/^    Metadata *getRawVariable() const {$/;"	f	class:llvm::DbgValueInst
getRawVariables	include/IR/DebugInfoMetadata.h	/^  Metadata *getRawVariables() const { return getOperand(10); }$/;"	f	class:llvm::MDSubprogram
getRealLinkageName	include/IR/GlobalValue.h	/^  static StringRef getRealLinkageName(StringRef Name) {$/;"	f	class:llvm::GlobalValue
getRecursiveFuncList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveFuncList &getRecursiveFuncList()       { return recFuncList; }$/;"	f	class:corelab::RecursiveFuncAnal
getRecursiveFuncList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      const RecursiveFuncList &getRecursiveFuncList() const { return recFuncList; }$/;"	f	class:corelab::RecursiveFuncAnal
getRecursiveFuncList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveFuncList &getRecursiveFuncList()       { return recFuncList; }$/;"	f	class:corelab::RecursiveFuncAnal
getRecursiveFuncList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      const RecursiveFuncList &getRecursiveFuncList() const { return recFuncList; }$/;"	f	class:corelab::RecursiveFuncAnal
getRelocates	include/IR/Statepoint.h	/^    getRelocates(ImmutableStatepoint &IS) {$/;"	f	class:llvm::StatepointBase
getReplaceableUses	include/IR/Metadata.h	/^  ReplaceableMetadataImpl *getReplaceableUses() const {$/;"	f	class:llvm::ContextAndReplaceableUses
getResult	include/IR/PassManager.h	/^  template <typename PassT> typename PassT::Result &getResult(IRUnitT &IR) {$/;"	f	class:llvm::detail::AnalysisManagerBase
getResultElementType	include/IR/Instructions.h	/^  Type *getResultElementType() const { return getType()->getElementType(); }$/;"	f	class:llvm::GetElementPtrInst
getResultImpl	include/IR/PassManager.h	/^  ResultConceptT &getResultImpl(void *PassID, IRUnitT &IR) {$/;"	f	class:llvm::AnalysisManager
getRetainedTypes	include/IR/DebugInfo.h	/^  DIArray getRetainedTypes() const {$/;"	f	class:llvm::DICompileUnit
getRetainedTypes	include/IR/DebugInfoMetadata.h	/^  MDTuple *getRetainedTypes() const {$/;"	f	class:llvm::MDCompileUnit
getReturnType	include/IR/DerivedTypes.h	/^  Type *getReturnType() const { return ContainedTys[0]; }$/;"	f	class:llvm::FunctionType
getReturnValue	include/IR/Instructions.h	/^  Value *getReturnValue() const {$/;"	f	class:llvm::ReturnInst
getRunTimeLang	include/IR/DebugInfo.h	/^  unsigned getRunTimeLang() const { return get()->getRuntimeLang(); }$/;"	f	class:llvm::DICompositeType
getRunTimeVersion	include/IR/DebugInfo.h	/^  unsigned getRunTimeVersion() const { return get()->getRuntimeVersion(); }$/;"	f	class:llvm::DICompileUnit
getRuntimeLang	include/IR/DebugInfoMetadata.h	/^  unsigned getRuntimeLang() const { return RuntimeLang; }$/;"	f	class:llvm::MDCompositeTypeBase
getRuntimeVersion	include/IR/DebugInfoMetadata.h	/^  unsigned getRuntimeVersion() const { return RuntimeVersion; }$/;"	f	class:llvm::MDCompileUnit
getSExtValue	include/IR/Constants.h	/^  inline int64_t getSExtValue() const {$/;"	f	class:llvm::ConstantInt
getScope	include/IR/DebugInfo.h	/^  DILexicalBlock getScope() const { return DILexicalBlock(get()->getScope()); }$/;"	f	class:llvm::DILexicalBlockFile
getScope	include/IR/DebugInfo.h	/^  DIScope getScope() const { return DIScope(get()->getScope()); }$/;"	f	class:llvm::DILocation
getScope	include/IR/DebugInfoMetadata.h	/^  MDLocalScope *getScope() const { return cast<MDLocalScope>(getRawScope()); }$/;"	f	class:llvm::MDLexicalBlockBase
getScope	include/IR/DebugInfoMetadata.h	/^  MDLocalScope *getScope() const {$/;"	f	class:llvm::MDLocalVariable
getScope	include/IR/DebugInfoMetadata.h	/^  MDLocalScope *getScope() const {$/;"	f	class:llvm::MDLocation
getScope	include/IR/DebugInfoMetadata.h	/^  MDScope *getScope() const { return cast_or_null<MDScope>(getRawScope()); }$/;"	f	class:llvm::MDImportedEntity
getScope	include/IR/DebugInfoMetadata.h	/^  MDScope *getScope() const { return cast_or_null<MDScope>(getRawScope()); }$/;"	f	class:llvm::MDNamespace
getScope	include/IR/DebugInfoMetadata.h	/^  MDScope *getScope() const { return cast_or_null<MDScope>(getRawScope()); }$/;"	f	class:llvm::MDVariable
getScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getScope() const { return getRawScope(); }$/;"	f	class:llvm::MDSubprogram
getScope	include/IR/DebugInfoMetadata.h	/^  Metadata *getScope() const { return getRawScope(); }$/;"	f	class:llvm::MDType
getScopeLine	include/IR/DebugInfoMetadata.h	/^  unsigned getScopeLine() const { return ScopeLine; }$/;"	f	class:llvm::MDSubprogram
getScopeLineNumber	include/IR/DebugInfo.h	/^  unsigned getScopeLineNumber() const { return get()->getScopeLine(); }$/;"	f	class:llvm::DISubprogram
getSection	include/IR/GlobalObject.h	/^  const char *getSection() const { return Section.c_str(); }$/;"	f	class:llvm::GlobalObject
getSelectionKind	include/IR/Comdat.h	/^  SelectionKind getSelectionKind() const { return SK; }$/;"	f	class:llvm::Comdat
getSetterName	include/IR/DebugInfoMetadata.h	/^  StringRef getSetterName() const { return getStringOperand(3); }$/;"	f	class:llvm::MDObjCProperty
getSeverity	include/IR/DiagnosticInfo.h	/^  DiagnosticSeverity getSeverity() const { return Severity; }$/;"	f	class:llvm::DiagnosticInfo
getShuffleMask	include/IR/Instructions.h	/^  SmallVector<int, 16> getShuffleMask() const {$/;"	f	class:llvm::ShuffleVectorInst
getShuffleMask	include/IR/Instructions.h	/^  void getShuffleMask(SmallVectorImpl<int> &Result) const {$/;"	f	class:llvm::ShuffleVectorInst
getSignBit	include/IR/DerivedTypes.h	/^  uint64_t getSignBit() const {$/;"	f	class:llvm::IntegerType
getSignedPredicate	include/IR/Instructions.h	/^  Predicate getSignedPredicate() const {$/;"	f	class:llvm::ICmpInst
getSimplifiedValue	include/IR/Metadata.h	/^  static SimpleType getSimplifiedValue(MDOperand &MD) { return MD.get(); }$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/Metadata.h	/^  static SimpleType getSimplifiedValue(const MDOperand &MD) { return MD.get(); }$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/TrackingMDRef.h	/^  static SimpleType getSimplifiedValue(TrackingMDRef &MD) { return MD.get(); }$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/TrackingMDRef.h	/^  static SimpleType getSimplifiedValue(TypedTrackingMDRef<T> &MD) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/TrackingMDRef.h	/^  static SimpleType getSimplifiedValue(const TrackingMDRef &MD) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/TrackingMDRef.h	/^  static SimpleType getSimplifiedValue(const TypedTrackingMDRef<T> &MD) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/Use.h	/^  static SimpleType getSimplifiedValue(Use &Val) { return Val.get(); }$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/Use.h	/^  static SimpleType getSimplifiedValue(const Use &Val) { return Val.get(); }$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/User.h	/^  static SimpleType getSimplifiedValue(User::const_op_iterator &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/User.h	/^  static SimpleType getSimplifiedValue(User::op_iterator &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	include/IR/ValueHandle.h	/^  static SimpleType getSimplifiedValue(WeakVH &WVH) {$/;"	f	struct:llvm::simplify_type
getSingleElement	include/IR/ConstantRange.h	/^  const APInt *getSingleElement() const {$/;"	f	class:llvm::ConstantRange
getSinglePredecessor	include/IR/BasicBlock.h	/^  const BasicBlock *getSinglePredecessor() const {$/;"	f	class:llvm::BasicBlock
getSizeInBits	include/IR/DataLayout.h	/^  uint64_t getSizeInBits() const { return 8 * StructSize; }$/;"	f	class:llvm::StructLayout
getSizeInBits	include/IR/DebugInfo.h	/^  uint64_t getSizeInBits() const { return get()->getSizeInBits(); }$/;"	f	class:llvm::DIType
getSizeInBits	include/IR/DebugInfoMetadata.h	/^  uint64_t getSizeInBits() const { return SizeInBits; }$/;"	f	class:llvm::MDType
getSizeInBytes	include/IR/DataLayout.h	/^  uint64_t getSizeInBytes() const { return StructSize; }$/;"	f	class:llvm::StructLayout
getSource	include/IR/CFG.h	/^  inline BB_ *getSource() {$/;"	f	class:llvm::SuccIterator
getSource	include/IR/IntrinsicInst.h	/^    Value *getSource() const { return getRawSource()->stripPointerCasts(); }$/;"	f	class:llvm::MemTransferInst
getSourceAddressSpace	include/IR/IntrinsicInst.h	/^    unsigned getSourceAddressSpace() const {$/;"	f	class:llvm::MemTransferInst
getSourceElementType	include/IR/Instructions.h	/^  Type *getSourceElementType() const {$/;"	f	class:llvm::GetElementPtrInst
getSourceElementType	include/IR/Operator.h	/^  Type *getSourceElementType() const {$/;"	f	class:llvm::GEPOperator
getSourceLanguage	include/IR/DebugInfoMetadata.h	/^  unsigned getSourceLanguage() const { return SourceLanguage; }$/;"	f	class:llvm::MDCompileUnit
getSplitDebugFilename	include/IR/DebugInfo.h	/^  StringRef getSplitDebugFilename() const {$/;"	f	class:llvm::DICompileUnit
getSplitDebugFilename	include/IR/DebugInfoMetadata.h	/^  StringRef getSplitDebugFilename() const { return getStringOperand(3); }$/;"	f	class:llvm::MDCompileUnit
getSrc	include/IR/IntrinsicInst.h	/^    Value *getSrc() const { return const_cast<Value*>(getArgOperand(1)); }$/;"	f	class:llvm::VACopyInst
getSrcTy	include/IR/InstrTypes.h	/^  Type* getSrcTy() const { return getOperand(0)->getType(); }$/;"	f	class:llvm::CastInst
getSrcTy	include/IR/Operator.h	/^  Type *getSrcTy() const {$/;"	f	class:llvm::BitCastOperator
getStackAlignment	include/IR/Attributes.h	/^  uint64_t getStackAlignment() const { return StackAlignment; }$/;"	f	class:llvm::AttrBuilder
getStackAlignment	include/IR/DataLayout.h	/^  unsigned getStackAlignment() const { return StackNaturalAlign; }$/;"	f	class:llvm::DataLayout
getStackSize	include/IR/DiagnosticInfo.h	/^  unsigned getStackSize() const { return StackSize; }$/;"	f	class:llvm::DiagnosticInfoStackSize
getStandardLibFunNameList	include/corelab/Utilities/StandardLibraryFunctionsName.h	/^		void getStandardLibFunNameList(std::unordered_set<std::string> &stdLibFunli){$/;"	f	namespace:corelab::utilities
getStart	include/IR/Dominators.h	/^  const BasicBlock *getStart() const {$/;"	f	class:llvm::BasicBlockEdge
getStaticDataMemberDeclaration	include/IR/DebugInfo.h	/^  DIDerivedType getStaticDataMemberDeclaration() const {$/;"	f	class:llvm::DIGlobalVariable
getStaticDataMemberDeclaration	include/IR/DebugInfoMetadata.h	/^  MDDerivedType *getStaticDataMemberDeclaration() const {$/;"	f	class:llvm::MDGlobalVariable
getStringOperand	include/IR/DebugInfoMetadata.h	/^  StringRef getStringOperand(unsigned I) const {$/;"	f	class:llvm::DebugNode
getStringRepresentation	include/IR/DataLayout.h	/^  std::string getStringRepresentation() const { return StringRepresentation; }$/;"	f	class:llvm::DataLayout
getStrongestFailureOrdering	include/IR/Instructions.h	/^  getStrongestFailureOrdering(AtomicOrdering SuccessOrdering) {$/;"	f	class:llvm::AtomicCmpXchgInst
getSubclassData	include/IR/Type.h	/^  unsigned getSubclassData() const { return IDAndSubclassData >> 8; }$/;"	f	class:llvm::Type
getSubclassDataFromInstruction	include/IR/Instruction.h	/^  unsigned getSubclassDataFromInstruction() const {$/;"	f	class:llvm::Instruction
getSubclassDataFromValue	include/IR/Instruction.h	/^  unsigned short getSubclassDataFromValue() const {$/;"	f	class:llvm::Instruction
getSubclassDataFromValue	include/IR/Value.h	/^  unsigned short getSubclassDataFromValue() const { return SubclassData; }$/;"	f	class:llvm::Value
getSublistAccess	include/IR/BasicBlock.h	/^  static iplist<Instruction> BasicBlock::*getSublistAccess(Instruction*) {$/;"	f	class:llvm::BasicBlock::BasicBlock
getSublistAccess	include/IR/Function.h	/^  static iplist<Argument> Function::*getSublistAccess(Argument*) {$/;"	f	class:llvm::Function::Function
getSublistAccess	include/IR/Function.h	/^  static iplist<BasicBlock> Function::*getSublistAccess(BasicBlock*) {$/;"	f	class:llvm::Function::Function
getSublistAccess	include/IR/Module.h	/^  static ilist<NamedMDNode> Module::*getSublistAccess(NamedMDNode*) {$/;"	f	class:llvm::Module::Module
getSublistAccess	include/IR/Module.h	/^  static iplist<Function> Module::*getSublistAccess(Function*) {$/;"	f	class:llvm::Module::Module
getSublistAccess	include/IR/Module.h	/^  static iplist<GlobalAlias> Module::*getSublistAccess(GlobalAlias*) {$/;"	f	class:llvm::Module::Module
getSublistAccess	include/IR/Module.h	/^  static iplist<GlobalVariable> Module::*getSublistAccess(GlobalVariable*) {$/;"	f	class:llvm::Module::Module
getSubprograms	include/IR/DebugInfo.h	/^  DIArray getSubprograms() const { return DIArray(get()->getSubprograms()); }$/;"	f	class:llvm::DICompileUnit
getSubprograms	include/IR/DebugInfoMetadata.h	/^  MDTuple *getSubprograms() const {$/;"	f	class:llvm::MDCompileUnit
getSuccessOrdering	include/IR/Instructions.h	/^  AtomicOrdering getSuccessOrdering() const {$/;"	f	class:llvm::AtomicCmpXchgInst
getSuccessor	include/IR/InstrTypes.h	/^  BasicBlock *getSuccessor(unsigned idx) const {$/;"	f	class:llvm::TerminatorInst
getSuccessor	include/IR/Instructions.h	/^  BasicBlock *getSuccessor(unsigned i) const {$/;"	f	class:llvm::BranchInst
getSuccessor	include/IR/Instructions.h	/^  BasicBlock *getSuccessor(unsigned i) const {$/;"	f	class:llvm::IndirectBrInst
getSuccessor	include/IR/Instructions.h	/^  BasicBlock *getSuccessor(unsigned i) const {$/;"	f	class:llvm::InvokeInst
getSuccessor	include/IR/Instructions.h	/^  BasicBlock *getSuccessor(unsigned idx) const {$/;"	f	class:llvm::SwitchInst
getSuccessorIndex	include/IR/CFG.h	/^  unsigned getSuccessorIndex() const { return idx; }$/;"	f	class:llvm::SuccIterator
getSuccessorIndex	include/IR/Instructions.h	/^    unsigned getSuccessorIndex() const {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getSuffix	include/IR/DebugInfo.h	/^  StringRef getSuffix() const {$/;"	f	class:llvm::DIHeaderFieldIterator
getSwappedPredicate	include/IR/InstrTypes.h	/^  Predicate getSwappedPredicate() const {$/;"	f	class:llvm::CmpInst
getSymTab	include/IR/Function.h	/^ilist_traits<Argument>::getSymTab(Function *F) {$/;"	f	class:llvm::ilist_traits
getSymTab	include/IR/Function.h	/^ilist_traits<BasicBlock>::getSymTab(Function *F) {$/;"	f	class:llvm::ilist_traits
getSymTab	include/IR/SymbolTableListTraits.h	/^  static ValueSymbolTable *getSymTab(ItemParentClass *Par) {$/;"	f	class:llvm::SymbolTableListTraits
getSynchScope	include/IR/Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::AtomicCmpXchgInst
getSynchScope	include/IR/Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::AtomicRMWInst
getSynchScope	include/IR/Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::FenceInst
getSynchScope	include/IR/Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::LoadInst
getSynchScope	include/IR/Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::StoreInst
getTag	include/IR/DebugInfo.h	/^  uint16_t getTag() const {$/;"	f	class:llvm::DIDescriptor
getTag	include/IR/DebugInfoMetadata.h	/^  unsigned getTag() const { return SubclassData16; }$/;"	f	class:llvm::DebugNode
getTag	include/IR/DebugInfoMetadata.h	/^  unsigned getTag() const { return SubclassData16; }$/;"	f	class:llvm::GenericDebugNode
getTailCallKind	include/IR/Instructions.h	/^  TailCallKind getTailCallKind() const {$/;"	f	class:llvm::CallInst
getTargetTriple	include/IR/Module.h	/^  const std::string &getTargetTriple() const { return TargetTriple; }$/;"	f	class:llvm::Module
getTemplateParams	include/IR/DebugInfo.h	/^  DIArray getTemplateParams() const {$/;"	f	class:llvm::DICompositeType
getTemplateParams	include/IR/DebugInfo.h	/^  DIArray getTemplateParams() const {$/;"	f	class:llvm::DISubprogram
getTemplateParams	include/IR/DebugInfoMetadata.h	/^  MDTuple *getTemplateParams() const {$/;"	f	class:llvm::MDCompositeTypeBase
getTemplateParams	include/IR/DebugInfoMetadata.h	/^  MDTuple *getTemplateParams() const {$/;"	f	class:llvm::MDSubprogram
getTemporary	include/IR/Metadata.h	/^  static TempMDTuple getTemporary(LLVMContext &Context,$/;"	f	class:llvm::MDTuple
getTemporary	include/IR/Metadata.h	/^TempMDTuple MDNode::getTemporary(LLVMContext &Context,$/;"	f	class:llvm::MDNode
getTerminatingMustTailCall	include/IR/BasicBlock.h	/^  const CallInst *getTerminatingMustTailCall() const {$/;"	f	class:llvm::BasicBlock
getThreadLocalMode	include/IR/GlobalValue.h	/^  ThreadLocalMode getThreadLocalMode() const {$/;"	f	class:llvm::GlobalValue
getTombstoneKey	include/IR/Attributes.h	/^  static inline AttributeSet getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	include/IR/Metadata.h	/^  static inline AAMDNodes getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	include/IR/ValueHandle.h	/^  static inline AssertingVH<T> getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	include/IR/ValueMap.h	/^  static inline VH getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTopLevelManager	include/IR/LegacyPassManagers.h	/^  PMTopLevelManager *getTopLevelManager() { return TPM; }$/;"	f	class:llvm::PMDataManager
getTrue	include/IR/IRBuilder.h	/^  ConstantInt *getTrue() {$/;"	f	class:llvm::IRBuilderBase
getTrueRecursiveCallList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveCallList &getTrueRecursiveCallList()       { return recursiveCalls; }$/;"	f	class:corelab::RecursiveFuncAnal
getTrueRecursiveCallList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      const RecursiveCallList &getTrueRecursiveCallList() const { return recursiveCalls; }$/;"	f	class:corelab::RecursiveFuncAnal
getTrueRecursiveCallList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveCallList &getTrueRecursiveCallList()       { return recursiveCalls; }$/;"	f	class:corelab::RecursiveFuncAnal
getTrueRecursiveCallList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      const RecursiveCallList &getTrueRecursiveCallList() const { return recursiveCalls; }$/;"	f	class:corelab::RecursiveFuncAnal
getTrueValue	include/IR/Instructions.h	/^  Value *getTrueValue() { return Op<1>(); }$/;"	f	class:llvm::SelectInst
getTrueValue	include/IR/Instructions.h	/^  const Value *getTrueValue() const { return Op<1>(); }$/;"	f	class:llvm::SelectInst
getTruncatedElementVectorType	include/IR/DerivedTypes.h	/^  static VectorType *getTruncatedElementVectorType(VectorType *VTy) {$/;"	f	class:llvm::VectorType
getType	include/IR/CallSite.h	/^  Type *getType() const { return (*this)->getType(); }$/;"	f	class:llvm::CallSiteBase
getType	include/IR/Constants.h	/^  inline ArrayType *getType() const {$/;"	f	class:llvm::ConstantArray
getType	include/IR/Constants.h	/^  inline ArrayType *getType() const {$/;"	f	class:llvm::ConstantDataArray
getType	include/IR/Constants.h	/^  inline IntegerType *getType() const {$/;"	f	class:llvm::ConstantInt
getType	include/IR/Constants.h	/^  inline PointerType *getType() const {$/;"	f	class:llvm::ConstantPointerNull
getType	include/IR/Constants.h	/^  inline SequentialType *getType() const {$/;"	f	class:llvm::ConstantDataSequential
getType	include/IR/Constants.h	/^  inline StructType *getType() const {$/;"	f	class:llvm::ConstantStruct
getType	include/IR/Constants.h	/^  inline VectorType *getType() const {$/;"	f	class:llvm::ConstantDataVector
getType	include/IR/Constants.h	/^  inline VectorType *getType() const {$/;"	f	class:llvm::ConstantVector
getType	include/IR/DebugInfo.h	/^  DISubroutineType getType() const {$/;"	f	class:llvm::DISubprogram
getType	include/IR/DebugInfo.h	/^  DIType getType() const { return DIType(get()->getType()); }$/;"	f	class:llvm::DIObjCProperty
getType	include/IR/DebugInfo.h	/^  DITypeRef getType() const { return DITypeRef::get(get()->getType()); }$/;"	f	class:llvm::DIGlobalVariable
getType	include/IR/DebugInfo.h	/^  DITypeRef getType() const { return DITypeRef::get(get()->getType()); }$/;"	f	class:llvm::DITemplateTypeParameter
getType	include/IR/DebugInfo.h	/^  DITypeRef getType() const { return DITypeRef::get(get()->getType()); }$/;"	f	class:llvm::DITemplateValueParameter
getType	include/IR/DebugInfo.h	/^  DITypeRef getType() const { return DITypeRef::get(get()->getType()); }$/;"	f	class:llvm::DIVariable
getType	include/IR/DebugInfoMetadata.h	/^  MDSubroutineType *getType() const {$/;"	f	class:llvm::MDSubprogram
getType	include/IR/DebugInfoMetadata.h	/^  MDType *getType() const { return cast_or_null<MDType>(getRawType()); }$/;"	f	class:llvm::MDObjCProperty
getType	include/IR/DebugInfoMetadata.h	/^  Metadata *getType() const { return getOperand(1); }$/;"	f	class:llvm::MDTemplateParameter
getType	include/IR/DebugInfoMetadata.h	/^  Metadata *getType() const { return getRawType(); }$/;"	f	class:llvm::MDVariable
getType	include/IR/GlobalValue.h	/^  PointerType *getType() const { return cast<PointerType>(User::getType()); }$/;"	f	class:llvm::GlobalValue
getType	include/IR/InlineAsm.h	/^  PointerType *getType() const {$/;"	f	class:llvm::InlineAsm
getType	include/IR/Instructions.h	/^  PointerType *getType() const {$/;"	f	class:llvm::AllocaInst
getType	include/IR/Instructions.h	/^  SequentialType *getType() const {$/;"	f	class:llvm::GetElementPtrInst
getType	include/IR/Instructions.h	/^  VectorType *getType() const {$/;"	f	class:llvm::InsertElementInst
getType	include/IR/Instructions.h	/^  VectorType *getType() const {$/;"	f	class:llvm::ShuffleVectorInst
getType	include/IR/Metadata.h	/^  Type *getType() const { return V->getType(); }$/;"	f	class:llvm::ValueAsMetadata
getType	include/IR/Value.h	/^  Type *getType() const { return VTy; }$/;"	f	class:llvm::Value
getTypeAllocSize	include/IR/DataLayout.h	/^  uint64_t getTypeAllocSize(Type *Ty) const {$/;"	f	class:llvm::DataLayout
getTypeAllocSizeInBits	include/IR/DataLayout.h	/^  uint64_t getTypeAllocSizeInBits(Type *Ty) const {$/;"	f	class:llvm::DataLayout
getTypeArray	include/IR/DebugInfo.h	/^  DITypedArray<DITypeRef> getTypeArray() const {$/;"	f	class:llvm::DISubroutineType
getTypeArray	include/IR/DebugInfoMetadata.h	/^  MDTuple *getTypeArray() const { return getElements(); }$/;"	f	class:llvm::MDSubroutineType
getTypeBasedMatching	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			void getTypeBasedMatching(Matching& matching){matching = typeBasedMatching;}$/;"	f	class:corelab::IndirectCallAnal
getTypeBasedMatching	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			void getTypeBasedMatching(Matching& matching){matching = typeBasedMatching;}$/;"	f	class:corelab::IndirectCallAnal
getTypeDerivedFrom	include/IR/DebugInfo.h	/^  DITypeRef getTypeDerivedFrom() const {$/;"	f	class:llvm::DIDerivedType
getTypeID	include/IR/Type.h	/^  TypeID getTypeID() const { return (TypeID)(IDAndSubclassData & 0xFF); }$/;"	f	class:llvm::Type
getTypeSizeInBits	include/IR/DataLayout.h	/^inline uint64_t DataLayout::getTypeSizeInBits(Type *Ty) const {$/;"	f	class:llvm::DataLayout
getTypeStoreSize	include/IR/DataLayout.h	/^  uint64_t getTypeStoreSize(Type *Ty) const {$/;"	f	class:llvm::DataLayout
getTypeStoreSizeInBits	include/IR/DataLayout.h	/^  uint64_t getTypeStoreSizeInBits(Type *Ty) const {$/;"	f	class:llvm::DataLayout
getUCID	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline UniqueContextID getUCID(){return ucID;}$/;"	f	class:corelab::ContextTree
getUCID	lib/CAMP/ContextTreeBuilder.h	/^			inline UniqueContextID getUCID(){return ucID;}$/;"	f	class:corelab::ContextTree
getUnderlyingCallSite	include/IR/Statepoint.h	/^  ImmutableCallSite getUnderlyingCallSite() {$/;"	f	class:llvm::GCRelocateOperands
getUniquePredecessor	include/IR/BasicBlock.h	/^  const BasicBlock *getUniquePredecessor() const {$/;"	f	class:llvm::BasicBlock
getUniqueSuccessor	include/IR/BasicBlock.h	/^  const BasicBlock *getUniqueSuccessor() const {$/;"	f	class:llvm::BasicBlock
getUnqual	include/IR/DerivedTypes.h	/^  static PointerType *getUnqual(Type *ElementType) {$/;"	f	class:llvm::PointerType
getUnsignedField	include/IR/DebugInfo.h	/^  unsigned getUnsignedField(unsigned Elt) const {$/;"	f	class:llvm::DIDescriptor
getUnsignedPredicate	include/IR/Instructions.h	/^  Predicate getUnsignedPredicate() const {$/;"	f	class:llvm::ICmpInst
getUnwindDest	include/IR/Instructions.h	/^  BasicBlock *getUnwindDest() const {$/;"	f	class:llvm::InvokeInst
getUpper	include/IR/ConstantRange.h	/^  const APInt &getUpper() const { return Upper; }$/;"	f	class:llvm::ConstantRange
getUse	include/IR/CFG.h	/^  Use &getUse() const {$/;"	f	class:llvm::PredIterator
getUse	include/IR/Value.h	/^    Use &getUse() const { return *UI; }$/;"	f	class:llvm::Value::user_iterator_impl
getVTableHolder	include/IR/DebugInfoMetadata.h	/^  Metadata *getVTableHolder() const { return getRawVTableHolder(); }$/;"	f	class:llvm::MDCompositeTypeBase
getValOperand	include/IR/Instructions.h	/^  Value *getValOperand() { return getOperand(1); }$/;"	f	class:llvm::AtomicRMWInst
getValOperand	include/IR/Instructions.h	/^  const Value *getValOperand() const { return getOperand(1); }$/;"	f	class:llvm::AtomicRMWInst
getValPtr	include/IR/ValueHandle.h	/^  Value *getValPtr() const { return V; }$/;"	f	class:llvm::ValueHandleBase
getValPtr	include/IR/ValueHandle.h	/^  ValueTy *getValPtr() const { return static_cast<ValueTy *>(getRawValPtr()); }$/;"	f	class:llvm::AssertingVH
getValPtr	include/IR/ValueHandle.h	/^  ValueTy *getValPtr() const {$/;"	f	class:llvm::TrackingVH
getValue	include/IR/Constants.h	/^  inline const APInt &getValue() const {$/;"	f	class:llvm::ConstantInt
getValue	include/IR/DebugInfo.h	/^  Metadata *getValue() const { return get()->getValue(); }$/;"	f	class:llvm::DITemplateValueParameter
getValue	include/IR/DebugInfoMetadata.h	/^  Metadata *getValue() const { return getOperand(2); }$/;"	f	class:llvm::MDTemplateValueParameter
getValue	include/IR/DebugInfoMetadata.h	/^  int64_t getValue() const { return Value; }$/;"	f	class:llvm::MDEnumerator
getValue	include/IR/Instructions.h	/^  Value *getValue() const { return Op<0>(); }$/;"	f	class:llvm::ResumeInst
getValue	include/IR/IntrinsicInst.h	/^    Value *getValue() const { return const_cast<Value*>(getArgOperand(1)); }$/;"	f	class:llvm::MemSetInst
getValue	include/IR/Metadata.h	/^  Constant *getValue() const {$/;"	f	class:llvm::ConstantAsMetadata
getValue	include/IR/Metadata.h	/^  Value *getValue() const { return V; }$/;"	f	class:llvm::ValueAsMetadata
getValue	lib/Metadata/Namer.cpp	/^	Value* Namer::getValue(const Instruction *I) {$/;"	f	class:corelab::Namer
getValueAPF	include/IR/Constants.h	/^  inline const APFloat &getValueAPF() const { return Val; }$/;"	f	class:llvm::ConstantFP
getValueID	include/IR/Value.h	/^  unsigned getValueID() const {$/;"	f	class:llvm::Value
getValueName	include/IR/Value.h	/^  ValueName *getValueName() const { return NameAndIsUsedByMD.getPointer(); }$/;"	f	class:llvm::Value
getValueOperand	include/IR/Instructions.h	/^  Value *getValueOperand() { return getOperand(0); }$/;"	f	class:llvm::StoreInst
getValueOperand	include/IR/Instructions.h	/^  const Value *getValueOperand() const { return getOperand(0); }$/;"	f	class:llvm::StoreInst
getValueSymbolTable	include/IR/Function.h	/^  inline       ValueSymbolTable &getValueSymbolTable()       { return *SymTab; }$/;"	f	class:llvm::Function
getValueSymbolTable	include/IR/Function.h	/^  inline const ValueSymbolTable &getValueSymbolTable() const { return *SymTab; }$/;"	f	class:llvm::Function
getValueSymbolTable	include/IR/Module.h	/^  ValueSymbolTable       &getValueSymbolTable()       { return *ValSymTab; }$/;"	f	class:llvm::Module
getValueSymbolTable	include/IR/Module.h	/^  const ValueSymbolTable &getValueSymbolTable() const { return *ValSymTab; }$/;"	f	class:llvm::Module
getValueType	include/IR/GlobalValue.h	/^  Type *getValueType() const { return getType()->getElementType(); }$/;"	f	class:llvm::GlobalValue
getValueUse	include/IR/IntrinsicInst.h	/^    Use &getValueUse() { return getArgOperandUse(1); }$/;"	f	class:llvm::MemSetInst
getValueUse	include/IR/IntrinsicInst.h	/^    const Use &getValueUse() const { return getArgOperandUse(1); }$/;"	f	class:llvm::MemSetInst
getVariable	include/IR/DebugInfoMetadata.h	/^  ConstantAsMetadata *getVariable() const {$/;"	f	class:llvm::MDGlobalVariable
getVariable	include/IR/IntrinsicInst.h	/^    MDLocalVariable *getVariable() const {$/;"	f	class:llvm::DbgDeclareInst
getVariable	include/IR/IntrinsicInst.h	/^    MDLocalVariable *getVariable() const {$/;"	f	class:llvm::DbgValueInst
getVariables	include/IR/DebugInfo.h	/^  DIArray getVariables() const { return DIArray(get()->getVariables()); }$/;"	f	class:llvm::DISubprogram
getVariables	include/IR/DebugInfoMetadata.h	/^  MDTuple *getVariables() const {$/;"	f	class:llvm::MDSubprogram
getVariablesNodes	include/IR/DebugInfo.h	/^  MDNode *getVariablesNodes() const { return getVariables(); }$/;"	f	class:llvm::DISubprogram
getVectorElementType	include/IR/Type.h	/^  Type *getVectorElementType() const { return getSequentialElementType(); }$/;"	f	class:llvm::Type
getVectorOperand	include/IR/Instructions.h	/^  Value *getVectorOperand() { return Op<0>(); }$/;"	f	class:llvm::ExtractElementInst
getVectorOperand	include/IR/Instructions.h	/^  const Value *getVectorOperand() const { return Op<0>(); }$/;"	f	class:llvm::ExtractElementInst
getVectorOperandType	include/IR/Instructions.h	/^  VectorType *getVectorOperandType() const {$/;"	f	class:llvm::ExtractElementInst
getVirtualIndex	include/IR/DebugInfo.h	/^  unsigned getVirtualIndex() const { return get()->getVirtualIndex(); }$/;"	f	class:llvm::DISubprogram
getVirtualIndex	include/IR/DebugInfoMetadata.h	/^  unsigned getVirtualIndex() const { return VirtualIndex; }$/;"	f	class:llvm::MDSubprogram
getVirtuality	include/IR/DebugInfo.h	/^  unsigned getVirtuality() const { return get()->getVirtuality(); }$/;"	f	class:llvm::DISubprogram
getVirtuality	include/IR/DebugInfoMetadata.h	/^  unsigned getVirtuality() const { return Virtuality; }$/;"	f	class:llvm::MDSubprogram
getVisibility	include/IR/GlobalValue.h	/^  VisibilityTypes getVisibility() const { return VisibilityTypes(Visibility); }$/;"	f	class:llvm::GlobalValue
getVoidTy	include/IR/IRBuilder.h	/^  Type *getVoidTy() {$/;"	f	class:llvm::IRBuilderBase
getVolatileCst	include/IR/IntrinsicInst.h	/^    ConstantInt *getVolatileCst() const {$/;"	f	class:llvm::MemIntrinsic
getWeakLinkage	include/IR/GlobalValue.h	/^  static LinkageTypes getWeakLinkage(bool ODR) {$/;"	f	class:llvm::GlobalValue
getWithOperands	include/IR/Constants.h	/^  Constant *getWithOperands(ArrayRef<Constant*> Ops) const {$/;"	f	class:llvm::ConstantExpr
getZExtValue	include/IR/Constants.h	/^  inline uint64_t getZExtValue() const {$/;"	f	class:llvm::ConstantInt
get_cyclecount	tools/camp/armtimer.hpp	/^unsigned int get_cyclecount (void)$/;"	f	class:armtimer
get_result_count	tools/camp/armtimer.hpp	/^unsigned int get_result_count (void)$/;"	f	class:armtimer
get_result_time	tools/camp/armtimer.hpp	/^double get_result_time (void)$/;"	f	class:armtimer
globalIterStack	tools/camp/campRuntime.cpp	/^static IterStack globalIterStack;$/;"	v	file:
globalIterStack	tools/campSampling/campRuntime.cpp	/^static IterStack globalIterStack;$/;"	v	file:
globalIterStack	tools/objtrace/ctxObjtraceRuntime.cpp	/^static IterStack globalIterStack;$/;"	v	file:
globalIterStackIdx	tools/camp/campRuntime.cpp	/^static int globalIterStackIdx;$/;"	v	file:
globalIterStackIdx	tools/campSampling/campRuntime.cpp	/^static int globalIterStackIdx;$/;"	v	file:
globalIterStackIdx	tools/objtrace/ctxObjtraceRuntime.cpp	/^static int globalIterStackIdx;$/;"	v	file:
globalIterStackIdx_overflow	tools/camp/campRuntime.cpp	/^static int globalIterStackIdx_overflow;$/;"	v	file:
globalIterStackIdx_overflow	tools/campSampling/campRuntime.cpp	/^static int globalIterStackIdx_overflow;$/;"	v	file:
globalIterStackIdx_overflow	tools/objtrace/ctxObjtraceRuntime.cpp	/^static int globalIterStackIdx_overflow;$/;"	v	file:
global_begin	include/IR/Module.h	/^  const_global_iterator global_begin() const { return GlobalList.begin(); }$/;"	f	class:llvm::Module
global_begin	include/IR/Module.h	/^  global_iterator       global_begin()       { return GlobalList.begin(); }$/;"	f	class:llvm::Module
global_empty	include/IR/Module.h	/^  bool                  global_empty() const { return GlobalList.empty(); }$/;"	f	class:llvm::Module
global_end	include/IR/Module.h	/^  const_global_iterator global_end  () const { return GlobalList.end(); }$/;"	f	class:llvm::Module
global_end	include/IR/Module.h	/^  global_iterator       global_end  ()       { return GlobalList.end(); }$/;"	f	class:llvm::Module
global_iterator	include/IR/Module.h	/^  typedef GlobalListType::iterator                      global_iterator;$/;"	t	class:llvm::Module
global_variable_count	include/IR/DebugInfo.h	/^  unsigned global_variable_count() const { return GVs.size(); }$/;"	f	class:llvm::DebugInfoFinder
global_variable_iterator	include/IR/DebugInfo.h	/^      global_variable_iterator;$/;"	t	class:llvm::DebugInfoFinder
global_variables	include/IR/DebugInfo.h	/^  iterator_range<global_variable_iterator> global_variables() const {$/;"	f	class:llvm::DebugInfoFinder
globals	include/IR/Module.h	/^  iterator_range<const_global_iterator> globals() const {$/;"	f	class:llvm::Module
globals	include/IR/Module.h	/^  iterator_range<global_iterator> globals() {$/;"	f	class:llvm::Module
handleChangedOperand	include/IR/Metadata.h	/^  void handleChangedOperand(void *, Metadata *) {$/;"	f	class:llvm::Metadata
hasAddressTaken	include/IR/BasicBlock.h	/^  bool hasAddressTaken() const { return getSubclassDataFromValue() != 0; }$/;"	f	class:llvm::BasicBlock
hasAllConstantIndices	include/IR/Operator.h	/^  bool hasAllConstantIndices() const {$/;"	f	class:llvm::GEPOperator
hasAllZeroIndices	include/IR/Operator.h	/^  bool hasAllZeroIndices() const {$/;"	f	class:llvm::GEPOperator
hasAllowReciprocal	include/IR/Operator.h	/^  bool hasAllowReciprocal() const {$/;"	f	class:llvm::FPMathOperator
hasAppendingLinkage	include/IR/GlobalValue.h	/^  bool hasAppendingLinkage() const { return isAppendingLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasArgument	include/IR/CallSite.h	/^  bool hasArgument(const Value *Arg) const {$/;"	f	class:llvm::CallSiteBase
hasAvailableExternallyLinkage	include/IR/GlobalValue.h	/^  bool hasAvailableExternallyLinkage() const {$/;"	f	class:llvm::GlobalValue
hasByValArgument	include/IR/Instructions.h	/^  bool hasByValArgument() const {$/;"	f	class:llvm::CallInst
hasByValArgument	include/IR/Instructions.h	/^  bool hasByValArgument() const {$/;"	f	class:llvm::InvokeInst
hasComdat	include/IR/GlobalObject.h	/^  bool hasComdat() const { return getComdat() != nullptr; }$/;"	f	class:llvm::GlobalObject
hasComdat	include/IR/GlobalValue.h	/^  bool hasComdat() const { return getComdat() != nullptr; }$/;"	f	class:llvm::GlobalValue
hasCommonLinkage	include/IR/GlobalValue.h	/^  bool hasCommonLinkage() const { return isCommonLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasDLLExportStorageClass	include/IR/GlobalValue.h	/^  bool hasDLLExportStorageClass() const {$/;"	f	class:llvm::GlobalValue
hasDLLImportStorageClass	include/IR/GlobalValue.h	/^  bool hasDLLImportStorageClass() const {$/;"	f	class:llvm::GlobalValue
hasDefaultVisibility	include/IR/GlobalValue.h	/^  bool hasDefaultVisibility() const { return Visibility == DefaultVisibility; }$/;"	f	class:llvm::GlobalValue
hasDefinitiveInitializer	include/IR/GlobalVariable.h	/^  inline bool hasDefinitiveInitializer() const {$/;"	f	class:llvm::GlobalVariable
hasExternalLinkage	include/IR/GlobalValue.h	/^  bool hasExternalLinkage() const { return isExternalLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasExternalWeakLinkage	include/IR/GlobalValue.h	/^  bool hasExternalWeakLinkage() const { return isExternalWeakLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasFnAttr	include/IR/CallSite.h	/^  bool hasFnAttr(Attribute::AttrKind A) const {$/;"	f	class:llvm::CallSiteBase
hasFnAttr	include/IR/Instructions.h	/^  bool hasFnAttr(Attribute::AttrKind A) const {$/;"	f	class:llvm::CallInst
hasFnAttr	include/IR/Instructions.h	/^  bool hasFnAttr(Attribute::AttrKind A) const {$/;"	f	class:llvm::InvokeInst
hasFnAttribute	include/IR/Function.h	/^  bool hasFnAttribute(Attribute::AttrKind Kind) const {$/;"	f	class:llvm::Function
hasFnAttribute	include/IR/Function.h	/^  bool hasFnAttribute(StringRef Kind) const {$/;"	f	class:llvm::Function
hasHiddenVisibility	include/IR/GlobalValue.h	/^  bool hasHiddenVisibility() const { return Visibility == HiddenVisibility; }$/;"	f	class:llvm::GlobalValue
hasInAllocaArgument	include/IR/CallSite.h	/^  bool hasInAllocaArgument() const {$/;"	f	class:llvm::CallSiteBase
hasIndices	include/IR/Instructions.h	/^  bool hasIndices() const {$/;"	f	class:llvm::ExtractValueInst
hasIndices	include/IR/Instructions.h	/^  bool hasIndices() const {$/;"	f	class:llvm::GetElementPtrInst
hasIndices	include/IR/Instructions.h	/^  bool hasIndices() const {$/;"	f	class:llvm::InsertValueInst
hasIndices	include/IR/Operator.h	/^  bool hasIndices() const {$/;"	f	class:llvm::GEPOperator
hasInitializer	include/IR/GlobalVariable.h	/^  inline bool hasInitializer() const { return !isDeclaration(); }$/;"	f	class:llvm::GlobalVariable
hasInternalLinkage	include/IR/GlobalValue.h	/^  bool hasInternalLinkage() const { return isInternalLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasLazyArguments	include/IR/Function.h	/^  bool hasLazyArguments() const {$/;"	f	class:llvm::Function
hasLinkOnceLinkage	include/IR/GlobalValue.h	/^  bool hasLinkOnceLinkage() const {$/;"	f	class:llvm::GlobalValue
hasLinkOnceODRLinkage	include/IR/GlobalValue.h	/^  bool hasLinkOnceODRLinkage() const { return isLinkOnceODRLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasLinkerPrivateGlobalPrefix	include/IR/DataLayout.h	/^  bool hasLinkerPrivateGlobalPrefix() const { return ManglingMode == MM_MachO; }$/;"	f	class:llvm::DataLayout
hasLocalLinkage	include/IR/GlobalValue.h	/^  bool hasLocalLinkage() const { return isLocalLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasMD	include/IR/ValueMap.h	/^  bool hasMD() const { return MDMap; }$/;"	f	class:llvm::ValueMap
hasMI	include/corelab/Utilities/ProfileInfo.h	/^    bool hasMI() const {$/;"	f	class:llvm::ProfileInfoT
hasMatchingInput	include/IR/InlineAsm.h	/^    bool hasMatchingInput() const { return MatchingInput != -1; }$/;"	f	struct:llvm::InlineAsm::ConstraintInfo
hasMetadata	include/IR/Instruction.h	/^  bool hasMetadata() const { return DbgLoc || hasMetadataHashEntry(); }$/;"	f	class:llvm::Instruction
hasMetadataHashEntry	include/IR/Instruction.h	/^  bool hasMetadataHashEntry() const {$/;"	f	class:llvm::Instruction
hasMetadataOtherThanDebugLoc	include/IR/Instruction.h	/^  bool hasMetadataOtherThanDebugLoc() const {$/;"	f	class:llvm::Instruction
hasMicrosoftFastStdCallMangling	include/IR/DataLayout.h	/^  bool hasMicrosoftFastStdCallMangling() const {$/;"	f	class:llvm::DataLayout
hasName	include/IR/DerivedTypes.h	/^  bool hasName() const { return SymbolTableEntry != nullptr; }$/;"	f	class:llvm::StructType
hasName	include/IR/Value.h	/^  bool hasName() const { return getValueName() != nullptr; }$/;"	f	class:llvm::Value
hasNoInfs	include/IR/Operator.h	/^  bool hasNoInfs() const {$/;"	f	class:llvm::FPMathOperator
hasNoNaNs	include/IR/Operator.h	/^  bool hasNoNaNs() const {$/;"	f	class:llvm::FPMathOperator
hasNoSignedWrap	include/IR/Operator.h	/^  bool hasNoSignedWrap() const {$/;"	f	class:llvm::OverflowingBinaryOperator
hasNoSignedZeros	include/IR/Operator.h	/^  bool hasNoSignedZeros() const {$/;"	f	class:llvm::FPMathOperator
hasNoUnsignedWrap	include/IR/Operator.h	/^  bool hasNoUnsignedWrap() const {$/;"	f	class:llvm::OverflowingBinaryOperator
hasOneUse	include/IR/Value.h	/^  bool hasOneUse() const {$/;"	f	class:llvm::Value
hasPrefixData	include/IR/Function.h	/^  bool hasPrefixData() const {$/;"	f	class:llvm::Function
hasPrivateLinkage	include/IR/GlobalValue.h	/^  bool hasPrivateLinkage() const { return isPrivateLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasPrologueData	include/IR/Function.h	/^  bool hasPrologueData() const {$/;"	f	class:llvm::Function
hasProtectedVisibility	include/IR/GlobalValue.h	/^  bool hasProtectedVisibility() const {$/;"	f	class:llvm::GlobalValue
hasRegClassConstraint	include/IR/InlineAsm.h	/^  static bool hasRegClassConstraint(unsigned Flag, unsigned &RC) {$/;"	f	class:llvm::InlineAsm
hasReplaceableUses	include/IR/Metadata.h	/^  bool hasReplaceableUses() const {$/;"	f	class:llvm::ContextAndReplaceableUses
hasSameSubclassOptionalData	include/IR/Value.h	/^  bool hasSameSubclassOptionalData(const Value *V) const {$/;"	f	class:llvm::Value
hasSection	include/IR/GlobalObject.h	/^  bool hasSection() const { return !StringRef(getSection()).empty(); }$/;"	f	class:llvm::GlobalObject
hasSection	include/IR/GlobalValue.h	/^  bool hasSection() const { return !StringRef(getSection()).empty(); }$/;"	f	class:llvm::GlobalValue
hasSideEffects	include/IR/InlineAsm.h	/^  bool hasSideEffects() const { return HasSideEffects; }$/;"	f	class:llvm::InlineAsm
hasStructRetAttr	include/IR/Function.h	/^  bool hasStructRetAttr() const {$/;"	f	class:llvm::Function
hasStructRetAttr	include/IR/Instructions.h	/^  bool hasStructRetAttr() const {$/;"	f	class:llvm::CallInst
hasStructRetAttr	include/IR/Instructions.h	/^  bool hasStructRetAttr() const {$/;"	f	class:llvm::InvokeInst
hasTrivialDestructor	include/IR/DebugLoc.h	/^    bool hasTrivialDestructor() const { return Loc.hasTrivialDestructor(); }$/;"	f	class:llvm::DebugLoc
hasTrivialDestructor	include/IR/TrackingMDRef.h	/^  bool hasTrivialDestructor() const { return Ref.hasTrivialDestructor(); }$/;"	f	class:llvm::TypedTrackingMDRef
hasTrivialDestructor	include/IR/TrackingMDRef.h	/^  bool hasTrivialDestructor() const {$/;"	f	class:llvm::TrackingMDRef
hasUWTable	include/IR/Function.h	/^  bool hasUWTable() const {$/;"	f	class:llvm::Function
hasUniqueInitializer	include/IR/GlobalVariable.h	/^  inline bool hasUniqueInitializer() const {$/;"	f	class:llvm::GlobalVariable
hasUnnamedAddr	include/IR/GlobalValue.h	/^  bool hasUnnamedAddr() const { return UnnamedAddr; }$/;"	f	class:llvm::GlobalValue
hasUnsafeAlgebra	include/IR/Operator.h	/^  bool hasUnsafeAlgebra() const {$/;"	f	class:llvm::FPMathOperator
hasValueHandle	include/IR/Value.h	/^  bool hasValueHandle() const { return HasValueHandle; }$/;"	f	class:llvm::Value
hasWeakAnyLinkage	include/IR/GlobalValue.h	/^  bool hasWeakAnyLinkage() const {$/;"	f	class:llvm::GlobalValue
hasWeakLinkage	include/IR/GlobalValue.h	/^  bool hasWeakLinkage() const {$/;"	f	class:llvm::GlobalValue
hasWeakODRLinkage	include/IR/GlobalValue.h	/^  bool hasWeakODRLinkage() const {$/;"	f	class:llvm::GlobalValue
hasa	include/IR/Metadata.h	/^    hasa(Y &MD) {$/;"	f	namespace:llvm::mdconst
hasa	include/IR/Metadata.h	/^hasa(Y &&MD) {$/;"	f	namespace:llvm::mdconst
header_begin	include/IR/DebugInfo.h	/^  DIHeaderFieldIterator header_begin() const {$/;"	f	class:llvm::DIDescriptor
header_end	include/IR/DebugInfo.h	/^  DIHeaderFieldIterator header_end() const { return DIHeaderFieldIterator(); }$/;"	f	class:llvm::DIDescriptor
hookMallocFree	lib/CAMP/CAMP.cpp	/^void CAMPInstaller::hookMallocFree(){$/;"	f	class:CAMPInstaller
hookMallocFree	lib/ObjTrace/CtxObjtrace.cpp	/^void CtxObjtrace::hookMallocFree(){$/;"	f	class:CtxObjtrace
hookMallocFree	lib/ObjTrace/ObjTrace.cpp	/^void ObjTrace::hookMallocFree(){$/;"	f	class:ObjTrace
i	include/IR/TypeBuilder.h	/^template<uint32_t num_bits> class i {};$/;"	c	namespace:llvm::types
i64	tools/camp/campRuntime.h	/^	uint64_t i64[STK_MAX_SIZE_DIV_BY_8];$/;"	m	union:IterStack
i64	tools/campSampling/campRuntime.h	/^	uint64_t i64[STK_MAX_SIZE_DIV_BY_8];$/;"	m	union:IterStack
i64	tools/objtrace/ctxObjtraceRuntime.h	/^	uint64_t i64[STK_MAX_SIZE_DIV_BY_8];$/;"	m	union:IterStack
i8	tools/camp/campRuntime.h	/^	uint8_t i8[STK_MAX_SIZE];$/;"	m	union:IterStack
i8	tools/campSampling/campRuntime.h	/^	uint8_t i8[STK_MAX_SIZE];$/;"	m	union:IterStack
i8	tools/objtrace/ctxObjtraceRuntime.h	/^	uint8_t i8[STK_MAX_SIZE];$/;"	m	union:IterStack
id	include/corelab/Metadata/NamedMetadata.h	/^			int id;$/;"	m	class:corelab::DeviceMapEntry
idx	include/IR/CFG.h	/^  unsigned idx;$/;"	m	class:llvm::SuccIterator
idx_begin	include/IR/Instructions.h	/^  inline const_op_iterator idx_begin() const { return op_begin()+1; }$/;"	f	class:llvm::GetElementPtrInst
idx_begin	include/IR/Instructions.h	/^  inline idx_iterator idx_begin() const { return Indices.begin(); }$/;"	f	class:llvm::ExtractValueInst
idx_begin	include/IR/Instructions.h	/^  inline idx_iterator idx_begin() const { return Indices.begin(); }$/;"	f	class:llvm::InsertValueInst
idx_begin	include/IR/Instructions.h	/^  inline op_iterator       idx_begin()       { return op_begin()+1; }$/;"	f	class:llvm::GetElementPtrInst
idx_begin	include/IR/Operator.h	/^  inline const_op_iterator idx_begin() const { return op_begin()+1; }$/;"	f	class:llvm::GEPOperator
idx_begin	include/IR/Operator.h	/^  inline op_iterator       idx_begin()       { return op_begin()+1; }$/;"	f	class:llvm::GEPOperator
idx_end	include/IR/Instructions.h	/^  inline const_op_iterator idx_end()   const { return op_end(); }$/;"	f	class:llvm::GetElementPtrInst
idx_end	include/IR/Instructions.h	/^  inline idx_iterator idx_end()   const { return Indices.end(); }$/;"	f	class:llvm::ExtractValueInst
idx_end	include/IR/Instructions.h	/^  inline idx_iterator idx_end()   const { return Indices.end(); }$/;"	f	class:llvm::InsertValueInst
idx_end	include/IR/Instructions.h	/^  inline op_iterator       idx_end()         { return op_end(); }$/;"	f	class:llvm::GetElementPtrInst
idx_end	include/IR/Operator.h	/^  inline const_op_iterator idx_end()   const { return op_end(); }$/;"	f	class:llvm::GEPOperator
idx_end	include/IR/Operator.h	/^  inline op_iterator       idx_end()         { return op_end(); }$/;"	f	class:llvm::GEPOperator
idx_iterator	include/IR/Instructions.h	/^  typedef const unsigned* idx_iterator;$/;"	t	class:llvm::ExtractValueInst
idx_iterator	include/IR/Instructions.h	/^  typedef const unsigned* idx_iterator;$/;"	t	class:llvm::InsertValueInst
ieee_double	include/IR/TypeBuilder.h	/^class ieee_double {};$/;"	c	namespace:llvm::types
ieee_float	include/IR/TypeBuilder.h	/^class ieee_float {};$/;"	c	namespace:llvm::types
ignorablePass	include/IR/LegacyPassNameParser.h	/^  inline bool ignorablePass(const PassInfo *P) const {$/;"	f	class:llvm::PassNameParser
ignorablePassImpl	include/IR/LegacyPassNameParser.h	/^  virtual bool ignorablePassImpl(const PassInfo *P) const { return false; }$/;"	f	class:llvm::PassNameParser
ilist_traits	include/IR/BasicBlock.h	/^template<> struct ilist_traits<BasicBlock>$/;"	s	namespace:llvm
ilist_traits	include/IR/Function.h	/^template<> struct ilist_traits<Argument>$/;"	s	namespace:llvm
ilist_traits	include/IR/Instruction.h	/^struct ilist_traits<Instruction>$/;"	s	namespace:llvm
ilist_traits	include/IR/Module.h	/^template<> struct ilist_traits<Function>$/;"	s	namespace:llvm
ilist_traits	include/IR/Module.h	/^template<> struct ilist_traits<GlobalAlias>$/;"	s	namespace:llvm
ilist_traits	include/IR/Module.h	/^template<> struct ilist_traits<GlobalVariable>$/;"	s	namespace:llvm
ilist_traits	include/IR/Module.h	/^template<> struct ilist_traits<NamedMDNode>$/;"	s	namespace:llvm
includedFunctionId	include/corelab/Metadata/Metadata.h	/^		uint16_t includedFunctionId;$/;"	m	struct:corelab::__anon5
incoming_values	include/IR/Instructions.h	/^  op_range incoming_values() { return operands(); }$/;"	f	class:llvm::PHINode
increment	include/IR/DebugInfo.h	/^    void increment() {$/;"	f	class:llvm::DIExpression::iterator
increment	include/IR/DebugInfo.h	/^  void increment() {$/;"	f	class:llvm::DIHeaderFieldIterator
increment	include/IR/DebugInfoMetadata.h	/^    void increment() { Op = ExprOperand(getBase() + Op.getSize()); }$/;"	f	class:llvm::MDExpression::expr_op_iterator
index_is_valid	include/IR/CFG.h	/^  inline bool index_is_valid(int idx) {$/;"	f	class:llvm::SuccIterator
indices	include/IR/Instructions.h	/^  inline iterator_range<idx_iterator> indices() const {$/;"	f	class:llvm::ExtractValueInst
indices	include/IR/Instructions.h	/^  inline iterator_range<idx_iterator> indices() const {$/;"	f	class:llvm::InsertValueInst
indirectCalls	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			IndirectCallList indirectCalls;$/;"	m	class:corelab::IndirectCallAnal
indirectCalls	include/corelab/CAMP/CAMP.h	/^			IndirectCallList indirectCalls;$/;"	m	class:corelab::CAMPInstaller
indirectCalls	include/corelab/CAMP/CampExectime.h	/^			IndirectCallList indirectCalls;$/;"	m	class:corelab::CAMPExectime
indirectCalls	include/corelab/ObjTrace/CtxObjtrace.h	/^			IndirectCallList indirectCalls;$/;"	m	class:corelab::CtxObjtrace
indirectCalls	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			IndirectCallList indirectCalls;$/;"	m	class:corelab::IndirectCallAnal
indirectCalls	lib/CAMP/CAMP.h	/^			IndirectCallList indirectCalls;$/;"	m	class:corelab::CAMPInstaller
indirectCalls	lib/CAMP/CampExectime.h	/^			IndirectCallList indirectCalls;$/;"	m	class:corelab::CAMPExectime
indirectCalls	lib/ObjTrace/CtxObjtrace.h	/^			IndirectCallList indirectCalls;$/;"	m	class:corelab::CtxObjtrace
indirectCallsWithNoTarget	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      IndirectCallList indirectCallsWithNoTarget;$/;"	m	class:corelab::LoopTraverse
indirectCallsWithNoTarget	lib/AliasAnalysis/LoopTraverse.hpp	/^      IndirectCallList indirectCallsWithNoTarget;$/;"	m	class:corelab::LoopTraverse
init	include/IR/Instructions.h	/^  void init(Value *C, Value *S1, Value *S2) {$/;"	f	class:llvm::SelectInst
initUseDefChains	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::initUseDefChains() {$/;"	f	class:corelab::EsperantoNamer
init_perfcounter	tools/camp/armtimer.hpp	/^void init_perfcounter (int do_reset, int enable_divider)                               $/;"	f	class:armtimer
initialize	include/IR/LegacyPassNameParser.h	/^  void initialize() {$/;"	f	class:llvm::PassNameParser
initialize	lib/Metadata/Namer.cpp	/^	void Namer::initialize() {$/;"	f	class:corelab::Namer
initialize	tools/camp/ShadowMemory.hpp	/^		static void initialize(){$/;"	f	class:ShadowMemoryManager
initialize	tools/campSampling/ShadowMemory.hpp	/^		static void initialize(){$/;"	f	class:ShadowMemoryManager
initialize	tools/objtrace/ShadowMemory.hpp	/^		static void initialize(){$/;"	f	class:ShadowMemoryManager
initializeAnalysisInfo	include/IR/LegacyPassManagers.h	/^  void initializeAnalysisInfo() {$/;"	f	class:llvm::PMDataManager
insert	include/IR/ValueMap.h	/^  std::pair<iterator, bool> insert(const std::pair<KeyT, ValueT> &KV) {$/;"	f	class:llvm::ValueMap
insert	include/IR/ValueMap.h	/^  void insert(InputIt I, InputIt E) {$/;"	f	class:llvm::ValueMap
insert	lib/Utilities/InstInsertPt.cpp	/^  void InstInsertPt::insert(Instruction *i) {$/;"	f	class:corelab::InstInsertPt
insertDep	tools/camp/campRuntime.cpp	/^static void insertDep(CampID srcCampID, CampID dstCampID, uint8_t* oldIter){$/;"	f	file:
insertDep	tools/campSampling/campRuntime.cpp	/^static void insertDep(CampID srcCampID, CampID dstCampID, uint8_t* oldIter){$/;"	f	file:
insertEntry	include/corelab/Metadata/NamedMetadata.h	/^			void insertEntry(DeviceMapEntry* entry){$/;"	f	class:corelab::DeviceMap
inst	include/corelab/Metadata/NamedMetadata.h	/^				Instruction* inst;$/;"	m	struct:corelab::EsperantoNamer::MetadataNode
inst_begin	include/IR/InstIterator.h	/^inline const_inst_iterator inst_begin(const Function &F) {$/;"	f	namespace:llvm
inst_begin	include/IR/InstIterator.h	/^inline const_inst_iterator inst_begin(const Function *F) {$/;"	f	namespace:llvm
inst_begin	include/IR/InstIterator.h	/^inline inst_iterator inst_begin(Function &F) { return inst_iterator(F); }$/;"	f	namespace:llvm
inst_begin	include/IR/InstIterator.h	/^inline inst_iterator inst_begin(Function *F) { return inst_iterator(*F); }$/;"	f	namespace:llvm
inst_end	include/IR/InstIterator.h	/^inline const_inst_iterator inst_end(const Function &F) {$/;"	f	namespace:llvm
inst_end	include/IR/InstIterator.h	/^inline const_inst_iterator inst_end(const Function *F) {$/;"	f	namespace:llvm
inst_end	include/IR/InstIterator.h	/^inline inst_iterator inst_end(Function &F)   { return inst_iterator(F, true); }$/;"	f	namespace:llvm
inst_end	include/IR/InstIterator.h	/^inline inst_iterator inst_end(Function *F)   { return inst_iterator(*F, true); }$/;"	f	namespace:llvm
inst_iterator	include/IR/InstIterator.h	/^                     Instruction> inst_iterator;$/;"	t	namespace:llvm
inst_range	include/IR/InstIterator.h	/^inline iterator_range<const_inst_iterator> inst_range(const Function &F) {$/;"	f	namespace:llvm
inst_range	include/IR/InstIterator.h	/^inline iterator_range<const_inst_iterator> inst_range(const Function *F) {$/;"	f	namespace:llvm
inst_range	include/IR/InstIterator.h	/^inline iterator_range<inst_iterator> inst_range(Function &F) {$/;"	f	namespace:llvm
inst_range	include/IR/InstIterator.h	/^inline iterator_range<inst_iterator> inst_range(Function *F) {$/;"	f	namespace:llvm
instructionCount	include/corelab/Metadata/Metadata.h	/^			uint16_t instructionCount;$/;"	m	class:corelab::Namer
instructionToBBId	include/corelab/Metadata/LoadNamer.h	/^			std::map<uint16_t, uint16_t> instructionToBBId;$/;"	m	class:corelab::LoadNamer
instructionToBBId	include/corelab/Metadata/Metadata.h	/^			std::map<uint16_t, uint16_t> instructionToBBId; $/;"	m	class:corelab::Namer
int64_t	tools/camp/x86timer.hpp	/^typedef __int64 int64_t;$/;"	t
int64_t	tools/objtrace/x86timer.hpp	/^typedef __int64 int64_t;$/;"	t
intersect	include/IR/PassManager.h	/^  void intersect(PreservedAnalyses &&Arg) {$/;"	f	class:llvm::PreservedAnalyses
intersect	include/IR/PassManager.h	/^  void intersect(const PreservedAnalyses &Arg) {$/;"	f	class:llvm::PreservedAnalyses
intersectOptionalDataWith	include/IR/Value.h	/^  void intersectOptionalDataWith(const Value *V) {$/;"	f	class:llvm::Value
invalid	include/corelab/Utilities/InstInsertPt.h	/^      bool                                    invalid;$/;"	m	class:corelab::InstInsertPt
invalidate	include/IR/PassManager.h	/^    bool invalidate(Function &) { return false; }$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy::Result
invalidate	include/IR/PassManager.h	/^  PreservedAnalyses invalidate(IRUnitT &IR, PreservedAnalyses PA) {$/;"	f	class:llvm::detail::AnalysisManagerBase
invalidate	include/IR/PassManager.h	/^  template <typename PassT> void invalidate(IRUnitT &IR) {$/;"	f	class:llvm::detail::AnalysisManagerBase
invalidateImpl	include/IR/PassManager.h	/^  PreservedAnalyses invalidateImpl(IRUnitT &IR, PreservedAnalyses PA) {$/;"	f	class:llvm::AnalysisManager
invalidateImpl	include/IR/PassManager.h	/^  void invalidateImpl(void *PassID, IRUnitT &IR) {$/;"	f	class:llvm::AnalysisManager
invokeOrCallInst	include/corelab/CAMP/ContextTreeBuilder.h	/^			const Instruction *invokeOrCallInst;$/;"	m	class:corelab::ContextTree
invokeOrCallInst	lib/CAMP/ContextTreeBuilder.h	/^			const Instruction *invokeOrCallInst;$/;"	m	class:corelab::ContextTree
isAggregateType	include/IR/Type.h	/^  bool isAggregateType() const {$/;"	f	class:llvm::Type
isAlignStack	include/IR/InlineAsm.h	/^  bool isAlignStack() const { return IsAlignStack; }$/;"	f	class:llvm::InlineAsm
isAppendingLinkage	include/IR/GlobalValue.h	/^  static bool isAppendingLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isAppleBlockExtension	include/IR/DebugInfo.h	/^  bool isAppleBlockExtension() const {$/;"	f	class:llvm::DIType
isArithmeticShift	include/IR/Instruction.h	/^  inline bool isArithmeticShift() const {$/;"	f	class:llvm::Instruction
isArrayTy	include/IR/Type.h	/^  bool isArrayTy() const { return getTypeID() == ArrayTyID; }$/;"	f	class:llvm::Type
isArtificial	include/IR/DebugInfo.h	/^  bool isArtificial() const { return (getFlags() & FlagArtificial) != 0; }$/;"	f	class:llvm::DIType
isArtificial	include/IR/DebugInfo.h	/^  bool isArtificial() const {$/;"	f	class:llvm::DIVariable
isArtificial	include/IR/DebugInfo.h	/^  unsigned isArtificial() const { return (getFlags() & FlagArtificial) != 0; }$/;"	f	class:llvm::DISubprogram
isAssignObjCProperty	include/IR/DebugInfo.h	/^  bool isAssignObjCProperty() const {$/;"	f	class:llvm::DIObjCProperty
isAtLeastAcquire	include/IR/Instructions.h	/^inline bool isAtLeastAcquire(AtomicOrdering Ord) {$/;"	f	namespace:llvm
isAtLeastRelease	include/IR/Instructions.h	/^inline bool isAtLeastRelease(AtomicOrdering Ord) {$/;"	f	namespace:llvm
isAvailableExternallyLinkage	include/IR/GlobalValue.h	/^  static bool isAvailableExternallyLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isBasicType	include/IR/DebugInfo.h	/^  bool isBasicType() const { return get() && isa<MDBasicType>(get()); }$/;"	f	class:llvm::DIDescriptor
isBigEndian	include/IR/DataLayout.h	/^  bool isBigEndian() const { return BigEndian; }$/;"	f	class:llvm::DataLayout
isBinaryOp	include/IR/Instruction.h	/^  bool isBinaryOp() const { return isBinaryOp(getOpcode()); }$/;"	f	class:llvm::Instruction
isBinaryOp	include/IR/Instruction.h	/^  static inline bool isBinaryOp(unsigned Opcode) {$/;"	f	class:llvm::Instruction
isBlockByrefStruct	include/IR/DebugInfo.h	/^  bool isBlockByrefStruct() const {$/;"	f	class:llvm::DIType
isBlockByrefVariable	include/IR/DebugInfo.h	/^  bool isBlockByrefVariable(const DITypeIdentifierMap &Map) const {$/;"	f	class:llvm::DIVariable
isByValArgument	include/IR/CallSite.h	/^  bool isByValArgument(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
isByValOrInAllocaArgument	include/IR/CallSite.h	/^  bool isByValOrInAllocaArgument(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
isCall	include/IR/CallSite.h	/^  bool isCall() const { return I.getInt(); }$/;"	f	class:llvm::CallSiteBase
isCallSite	include/corelab/CAMP/ContextTreeBuilder.h	/^			bool isCallSite;$/;"	m	class:corelab::ContextTree
isCallSite	lib/CAMP/ContextTreeBuilder.h	/^			bool isCallSite;$/;"	m	class:corelab::ContextTree
isCallSiteNode	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline bool isCallSiteNode(){return isCallSite;}$/;"	f	class:corelab::ContextTree
isCallSiteNode	lib/CAMP/ContextTreeBuilder.h	/^			inline bool isCallSiteNode(){return isCallSite;}$/;"	f	class:corelab::ContextTree
isCallee	include/IR/CallSite.h	/^  bool isCallee(Value::const_user_iterator UI) const {$/;"	f	class:llvm::CallSiteBase
isCallee	include/IR/CallSite.h	/^  bool isCallee(const Use *U) const { return getCallee() == U; }$/;"	f	class:llvm::CallSiteBase
isCast	include/IR/Instruction.h	/^  bool isCast() const { return isCast(getOpcode()); }$/;"	f	class:llvm::Instruction
isCast	include/IR/Instruction.h	/^  static inline bool isCast(unsigned OpCode) {$/;"	f	class:llvm::Instruction
isCatch	include/IR/Instructions.h	/^  bool isCatch(unsigned Idx) const {$/;"	f	class:llvm::LandingPadInst
isCheckedOrEnroll	lib/Metadata/EsperantoNamer.cpp	/^	bool EsperantoNamer::isCheckedOrEnroll(Instruction* target) {$/;"	f	class:corelab::EsperantoNamer
isCheckedOrEnroll	lib/Metadata/EsperantoNamer.cpp	/^	bool EsperantoNamer::isCheckedOrEnroll(Value* v) {$/;"	f	class:corelab::EsperantoNamer
isCleanup	include/IR/Instructions.h	/^  bool isCleanup() const { return getSubclassDataFromInstruction() & 1; }$/;"	f	class:llvm::LandingPadInst
isClobber	include/IR/InlineAsm.h	/^    isClobber           \/\/ '~x'$/;"	e	enum:llvm::InlineAsm::ConstraintPrefix
isClobberKind	include/IR/InlineAsm.h	/^  static bool isClobberKind(unsigned Flag) {$/;"	f	class:llvm::InlineAsm
isCommonLinkage	include/IR/GlobalValue.h	/^  static bool isCommonLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isCommutative	include/IR/InlineAsm.h	/^    bool isCommutative;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
isCommutative	include/IR/Instruction.h	/^  bool isCommutative() const { return isCommutative(getOpcode()); }$/;"	f	class:llvm::Instruction
isCommutative	include/IR/Instructions.h	/^  bool isCommutative() const { return isEquality(); }$/;"	f	class:llvm::ICmpInst
isCommutative	include/IR/Instructions.h	/^  bool isCommutative() const {$/;"	f	class:llvm::FCmpInst
isCompileUnit	include/IR/DebugInfo.h	/^  bool isCompileUnit() const { return get() && isa<MDCompileUnit>(get()); }$/;"	f	class:llvm::DIDescriptor
isCompositeType	include/IR/DebugInfo.h	/^  bool isCompositeType() const {$/;"	f	class:llvm::DIDescriptor
isConditional	include/IR/Instructions.h	/^  bool isConditional()   const { return getNumOperands() == 3; }$/;"	f	class:llvm::BranchInst
isConstant	include/IR/GlobalVariable.h	/^  bool isConstant() const { return isConstantGlobal; }$/;"	f	class:llvm::GlobalVariable
isCopyObjCProperty	include/IR/DebugInfo.h	/^  bool isCopyObjCProperty() const {$/;"	f	class:llvm::DIObjCProperty
isDeclarationForLinker	include/IR/GlobalValue.h	/^  bool isDeclarationForLinker() const {$/;"	f	class:llvm::GlobalValue
isDefault	include/IR/DataLayout.h	/^  bool isDefault() const { return StringRepresentation.empty(); }$/;"	f	class:llvm::DataLayout
isDefinition	include/IR/DebugInfo.h	/^  unsigned isDefinition() const { return get()->isDefinition(); }$/;"	f	class:llvm::DIGlobalVariable
isDefinition	include/IR/DebugInfo.h	/^  unsigned isDefinition() const { return get()->isDefinition(); }$/;"	f	class:llvm::DISubprogram
isDefinition	include/IR/DebugInfoMetadata.h	/^  bool isDefinition() const { return IsDefinition; }$/;"	f	class:llvm::MDGlobalVariable
isDefinition	include/IR/DebugInfoMetadata.h	/^  bool isDefinition() const { return IsDefinition; }$/;"	f	class:llvm::MDSubprogram
isDerivedType	include/IR/DebugInfo.h	/^  bool isDerivedType() const { return get() && isa<MDDerivedTypeBase>(get()); }$/;"	f	class:llvm::DIDescriptor
isDiscardableIfUnused	include/IR/GlobalValue.h	/^  bool isDiscardableIfUnused() const {$/;"	f	class:llvm::GlobalValue
isDiscardableIfUnused	include/IR/GlobalValue.h	/^  static bool isDiscardableIfUnused(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isDistinct	include/IR/Metadata.h	/^  bool isDistinct() const { return Storage == Distinct; }$/;"	f	class:llvm::MDNode
isDoubleTy	include/IR/Type.h	/^  bool isDoubleTy() const { return getTypeID() == DoubleTyID; }$/;"	f	class:llvm::Type
isEarlyClobber	include/IR/InlineAsm.h	/^    bool isEarlyClobber; $/;"	m	struct:llvm::InlineAsm::ConstraintInfo
isEmpty	include/IR/Attributes.h	/^  bool isEmpty() const {$/;"	f	class:llvm::AttributeSet
isEnumerator	include/IR/DebugInfo.h	/^  bool isEnumerator() const { return get() && isa<MDEnumerator>(get()); }$/;"	f	class:llvm::DIDescriptor
isEqual	include/IR/Attributes.h	/^  static bool isEqual(AttributeSet LHS, AttributeSet RHS) { return LHS == RHS; }$/;"	f	struct:llvm::DenseMapInfo
isEqual	include/IR/Metadata.h	/^  static bool isEqual(const AAMDNodes &LHS, const AAMDNodes &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	include/IR/ValueHandle.h	/^  static bool isEqual(const AssertingVH<T> &LHS, const AssertingVH<T> &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	include/IR/ValueMap.h	/^  static bool isEqual(const KeyT &LHS, const VH &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	include/IR/ValueMap.h	/^  static bool isEqual(const VH &LHS, const VH &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	lib/AliasAnalysis/IndirectCallAnal.cpp	/^bool IndirectCallAnal::isEqual(FunctionType *lhs, FunctionType *rhs){$/;"	f	class:IndirectCallAnal
isEquality	include/IR/Instructions.h	/^  bool isEquality() const { return isEquality(getPredicate()); }$/;"	f	class:llvm::FCmpInst
isEquality	include/IR/Instructions.h	/^  bool isEquality() const {$/;"	f	class:llvm::ICmpInst
isEquality	include/IR/Instructions.h	/^  static bool isEquality(Predicate P) {$/;"	f	class:llvm::ICmpInst
isEquality	include/IR/Instructions.h	/^  static bool isEquality(Predicate Pred) {$/;"	f	class:llvm::FCmpInst
isExact	include/IR/Operator.h	/^  bool isExact() const {$/;"	f	class:llvm::PossiblyExactOperator
isExactlyValue	include/IR/Constants.h	/^  bool isExactlyValue(double V) const {$/;"	f	class:llvm::ConstantFP
isExistOrInsert	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::isExistOrInsert(std::string cName){$/;"	f	class:corelab::EsperantoNamer
isExplicit	include/IR/DebugInfo.h	/^  bool isExplicit() const { return (getFlags() & FlagExplicit) != 0; }$/;"	f	class:llvm::DISubprogram
isExpression	include/IR/DebugInfo.h	/^  bool isExpression() const { return get() && isa<MDExpression>(get()); }$/;"	f	class:llvm::DIDescriptor
isExternalLinkage	include/IR/GlobalValue.h	/^  static bool isExternalLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isExternalWeakLinkage	include/IR/GlobalValue.h	/^  static bool isExternalWeakLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isExternallyInitialized	include/IR/GlobalVariable.h	/^  bool isExternallyInitialized() const {$/;"	f	class:llvm::GlobalVariable
isFP128Ty	include/IR/Type.h	/^  bool isFP128Ty() const { return getTypeID() == FP128TyID; }$/;"	f	class:llvm::Type
isFPOrFPVectorTy	include/IR/Type.h	/^  bool isFPOrFPVectorTy() const { return getScalarType()->isFloatingPointTy(); }$/;"	f	class:llvm::Type
isFPPredicate	include/IR/InstrTypes.h	/^  bool isFPPredicate() const { return isFPPredicate(getPredicate()); }$/;"	f	class:llvm::CmpInst
isFPPredicate	include/IR/InstrTypes.h	/^  static bool isFPPredicate(Predicate P) {$/;"	f	class:llvm::CmpInst
isFalseWhenEqual	include/IR/InstrTypes.h	/^  bool isFalseWhenEqual() const {$/;"	f	class:llvm::CmpInst
isFile	include/IR/DebugInfo.h	/^  bool isFile() const { return get() && isa<MDFile>(get()); }$/;"	f	class:llvm::DIDescriptor
isFilter	include/IR/Instructions.h	/^  bool isFilter(unsigned Idx) const {$/;"	f	class:llvm::LandingPadInst
isFirstClassType	include/IR/Type.h	/^  bool isFirstClassType() const {$/;"	f	class:llvm::Type
isFloatTy	include/IR/Type.h	/^  bool isFloatTy() const { return getTypeID() == FloatTyID; }$/;"	f	class:llvm::Type
isFloatingPointTy	include/IR/Type.h	/^  bool isFloatingPointTy() const {$/;"	f	class:llvm::Type
isForwardDecl	include/IR/DebugInfo.h	/^  bool isForwardDecl() const { return (getFlags() & FlagFwdDecl) != 0; }$/;"	f	class:llvm::DIType
isFunctionTy	include/IR/Type.h	/^  bool isFunctionTy() const { return getTypeID() == FunctionTyID; }$/;"	f	class:llvm::Type
isGlobalVariable	include/IR/DebugInfo.h	/^  bool isGlobalVariable() const {$/;"	f	class:llvm::DIDescriptor
isHalfTy	include/IR/Type.h	/^  bool isHalfTy() const { return getTypeID() == HalfTyID; }$/;"	f	class:llvm::Type
isIdempotent	include/IR/Instruction.h	/^  bool isIdempotent() const { return isIdempotent(getOpcode()); }$/;"	f	class:llvm::Instruction
isIllegalInteger	include/IR/DataLayout.h	/^  bool isIllegalInteger(unsigned Width) const { return !isLegalInteger(Width); }$/;"	f	class:llvm::DataLayout
isImmKind	include/IR/InlineAsm.h	/^  static bool isImmKind(unsigned Flag) { return getKind(Flag) == Kind_Imm; }$/;"	f	class:llvm::InlineAsm
isImportedEntity	include/IR/DebugInfo.h	/^  bool isImportedEntity() const {$/;"	f	class:llvm::DIDescriptor
isInAllocaArgument	include/IR/CallSite.h	/^  bool isInAllocaArgument(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
isInBounds	include/IR/Operator.h	/^  bool isInBounds() const {$/;"	f	class:llvm::GEPOperator
isIndVar	lib/CAMP/RegiInterIterDepFinder.cpp	/^bool RegiInterIterDepFinder::isIndVar(Value *inVal, std::vector<Value *> orginalVal, const Loop *loop){$/;"	f	class:RegiInterIterDepFinder
isIndirect	include/IR/InlineAsm.h	/^    bool isIndirect;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
isInfinity	include/IR/Constants.h	/^  bool isInfinity() const { return Val.isInfinity(); }$/;"	f	class:llvm::ConstantFP
isInlineAsm	include/IR/Instructions.h	/^  bool isInlineAsm() const {$/;"	f	class:llvm::CallInst
isInput	include/IR/InlineAsm.h	/^    isInput,            \/\/ 'x'$/;"	e	enum:llvm::InlineAsm::ConstraintPrefix
isIntOrIntVectorTy	include/IR/Type.h	/^  bool isIntOrIntVectorTy() const { return getScalarType()->isIntegerTy(); }$/;"	f	class:llvm::Type
isIntPredicate	include/IR/InstrTypes.h	/^  bool isIntPredicate() const { return isIntPredicate(getPredicate()); }$/;"	f	class:llvm::CmpInst
isIntPredicate	include/IR/InstrTypes.h	/^  static bool isIntPredicate(Predicate P) {$/;"	f	class:llvm::CmpInst
isIntegerTy	include/IR/Type.h	/^  bool isIntegerTy() const { return getTypeID() == IntegerTyID; } $/;"	f	class:llvm::Type
isInter	tools/camp/campRuntime.cpp	31;"	d	file:
isInter	tools/campSampling/campRuntime.cpp	44;"	d	file:
isInternalLinkage	include/IR/GlobalValue.h	/^  static bool isInternalLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isIntra	tools/camp/campRuntime.cpp	30;"	d	file:
isIntra	tools/campSampling/campRuntime.cpp	43;"	d	file:
isIntrinsic	include/IR/Function.h	/^  bool isIntrinsic() const { return getName().startswith("llvm."); }$/;"	f	class:llvm::Function
isInvoke	include/IR/CallSite.h	/^  bool isInvoke() const { return getInstruction() && !I.getInt(); }$/;"	f	class:llvm::CallSiteBase
isLValueReference	include/IR/DebugInfo.h	/^  bool isLValueReference() const {$/;"	f	class:llvm::DIType
isLValueReference	include/IR/DebugInfo.h	/^  unsigned isLValueReference() const {$/;"	f	class:llvm::DISubprogram
isLabelTy	include/IR/Type.h	/^  bool isLabelTy() const { return getTypeID() == LabelTyID; }$/;"	f	class:llvm::Type
isLegalInteger	include/IR/DataLayout.h	/^  bool isLegalInteger(unsigned Width) const {$/;"	f	class:llvm::DataLayout
isLexicalBlock	include/IR/DebugInfo.h	/^  bool isLexicalBlock() const {$/;"	f	class:llvm::DIDescriptor
isLexicalBlockFile	include/IR/DebugInfo.h	/^  bool isLexicalBlockFile() const {$/;"	f	class:llvm::DIDescriptor
isLinkOnceLinkage	include/IR/GlobalValue.h	/^  static bool isLinkOnceLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isLinkOnceODRLinkage	include/IR/GlobalValue.h	/^  static bool isLinkOnceODRLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isLiteral	include/IR/DerivedTypes.h	/^  bool isLiteral() const { return (getSubclassData() & SCDB_IsLiteral) != 0; }$/;"	f	class:llvm::StructType
isLittleEndian	include/IR/DataLayout.h	/^  bool isLittleEndian() const { return !BigEndian; }$/;"	f	class:llvm::DataLayout
isLocalLinkage	include/IR/GlobalValue.h	/^  static bool isLocalLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isLocalToUnit	include/IR/DebugInfo.h	/^  unsigned isLocalToUnit() const { return get()->isLocalToUnit(); }$/;"	f	class:llvm::DIGlobalVariable
isLocalToUnit	include/IR/DebugInfo.h	/^  unsigned isLocalToUnit() const { return get()->isLocalToUnit(); }$/;"	f	class:llvm::DISubprogram
isLocalToUnit	include/IR/DebugInfoMetadata.h	/^  bool isLocalToUnit() const { return IsLocalToUnit; }$/;"	f	class:llvm::MDGlobalVariable
isLocalToUnit	include/IR/DebugInfoMetadata.h	/^  bool isLocalToUnit() const { return IsLocalToUnit; }$/;"	f	class:llvm::MDSubprogram
isLogicalShift	include/IR/Instruction.h	/^  inline bool isLogicalShift() const {$/;"	f	class:llvm::Instruction
isMaxValue	include/IR/Constants.h	/^  bool isMaxValue(bool isSigned) const {$/;"	f	class:llvm::ConstantInt
isMemKind	include/IR/InlineAsm.h	/^  static bool isMemKind(unsigned Flag) { return getKind(Flag) == Kind_Mem; }$/;"	f	class:llvm::InlineAsm
isMetadataTy	include/IR/Type.h	/^  bool isMetadataTy() const { return getTypeID() == MetadataTyID; }$/;"	f	class:llvm::Type
isMinValue	include/IR/Constants.h	/^  bool isMinValue(bool isSigned) const {$/;"	f	class:llvm::ConstantInt
isMinusOne	include/IR/Constants.h	/^  bool isMinusOne() const {$/;"	f	class:llvm::ConstantInt
isMultipleAlternative	include/IR/InlineAsm.h	/^    bool isMultipleAlternative;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
isMustTailCall	include/IR/CallSite.h	/^  bool isMustTailCall() const {$/;"	f	class:llvm::CallSiteBase
isMustTailCall	include/IR/Instructions.h	/^  bool isMustTailCall() const {$/;"	f	class:llvm::CallInst
isNaN	include/IR/Constants.h	/^  bool isNaN() const { return Val.isNaN(); }$/;"	f	class:llvm::ConstantFP
isNamePreserving	include/IR/IRBuilder.h	/^  bool isNamePreserving() const { return preserveNames; }$/;"	f	class:llvm::IRBuilder
isNameSpace	include/IR/DebugInfo.h	/^  bool isNameSpace() const{ return get() && isa<MDNamespace>(get()); }$/;"	f	class:llvm::DIDescriptor
isNegative	include/IR/Constants.h	/^  bool isNegative() const { return Val.isNegative(); }$/;"	f	class:llvm::ConstantFP
isNegative	include/IR/Constants.h	/^  bool isNegative() const { return Val.isNegative(); }$/;"	f	class:llvm::ConstantInt
isNilpotent	include/IR/Instruction.h	/^  bool isNilpotent() const { return isNilpotent(getOpcode()); }$/;"	f	class:llvm::Instruction
isNoBuiltin	include/IR/CallSite.h	/^  bool isNoBuiltin() const {$/;"	f	class:llvm::CallSiteBase
isNoBuiltin	include/IR/Instructions.h	/^  bool isNoBuiltin() const {$/;"	f	class:llvm::CallInst
isNoBuiltin	include/IR/Instructions.h	/^  bool isNoBuiltin() const {$/;"	f	class:llvm::InvokeInst
isNoInline	include/IR/CallSite.h	/^  bool isNoInline() const {$/;"	f	class:llvm::CallSiteBase
isNoInline	include/IR/Instructions.h	/^  bool isNoInline() const { return hasFnAttr(Attribute::NoInline); }$/;"	f	class:llvm::CallInst
isNoInline	include/IR/Instructions.h	/^  bool isNoInline() const { return hasFnAttr(Attribute::NoInline); }$/;"	f	class:llvm::InvokeInst
isNonAtomicObjCProperty	include/IR/DebugInfo.h	/^  bool isNonAtomicObjCProperty() const {$/;"	f	class:llvm::DIObjCProperty
isObjCProperty	include/IR/DebugInfo.h	/^  bool isObjCProperty() const { return get() && isa<MDObjCProperty>(get()); }$/;"	f	class:llvm::DIDescriptor
isObjcClassComplete	include/IR/DebugInfo.h	/^  bool isObjcClassComplete() const {$/;"	f	class:llvm::DIType
isObjectPointer	include/IR/DebugInfo.h	/^  bool isObjectPointer() const { return (getFlags() & FlagObjectPointer) != 0; }$/;"	f	class:llvm::DIType
isObjectPointer	include/IR/DebugInfo.h	/^  bool isObjectPointer() const {$/;"	f	class:llvm::DIVariable
isOne	include/IR/Constants.h	/^  bool isOne() const {$/;"	f	class:llvm::ConstantInt
isOpaque	include/IR/DerivedTypes.h	/^  bool isOpaque() const { return (getSubclassData() & SCDB_HasBody) == 0; }$/;"	f	class:llvm::StructType
isOptimized	include/IR/DebugInfo.h	/^  bool isOptimized() const { return get()->isOptimized(); }$/;"	f	class:llvm::DICompileUnit
isOptimized	include/IR/DebugInfo.h	/^  unsigned isOptimized() const { return get()->isOptimized(); }$/;"	f	class:llvm::DISubprogram
isOptimized	include/IR/DebugInfoMetadata.h	/^  bool isOptimized() const { return IsOptimized; }$/;"	f	class:llvm::MDCompileUnit
isOptimized	include/IR/DebugInfoMetadata.h	/^  bool isOptimized() const { return IsOptimized; }$/;"	f	class:llvm::MDSubprogram
isOutput	include/IR/InlineAsm.h	/^    isOutput,           \/\/ '=x'$/;"	e	enum:llvm::InlineAsm::ConstraintPrefix
isPPC_FP128Ty	include/IR/Type.h	/^  bool isPPC_FP128Ty() const { return getTypeID() == PPC_FP128TyID; }$/;"	f	class:llvm::Type
isPacked	include/IR/DerivedTypes.h	/^  bool isPacked() const { return (getSubclassData() & SCDB_Packed) != 0; }$/;"	f	class:llvm::StructType
isPodLike	include/IR/CFG.h	/^template <typename T, typename U> struct isPodLike<SuccIterator<T, U> > {$/;"	s	namespace:llvm
isPodLike	include/IR/ValueHandle.h	/^struct isPodLike<AssertingVH<T> > {$/;"	s	namespace:llvm
isPointerIntoBucketsArray	include/IR/ValueMap.h	/^  bool isPointerIntoBucketsArray(const void *Ptr) const {$/;"	f	class:llvm::ValueMap
isPointerTy	include/IR/Type.h	/^  bool isPointerTy() const { return getTypeID() == PointerTyID; }$/;"	f	class:llvm::Type
isPossiblyExactOpcode	include/IR/Operator.h	/^  static bool isPossiblyExactOpcode(unsigned OpC) {$/;"	f	class:llvm::PossiblyExactOperator
isPrivate	include/IR/DebugInfo.h	/^  bool isPrivate() const {$/;"	f	class:llvm::DISubprogram
isPrivate	include/IR/DebugInfo.h	/^  bool isPrivate() const {$/;"	f	class:llvm::DIType
isPrivateLinkage	include/IR/GlobalValue.h	/^  static bool isPrivateLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isProtected	include/IR/DebugInfo.h	/^  bool isProtected() const {$/;"	f	class:llvm::DISubprogram
isProtected	include/IR/DebugInfo.h	/^  bool isProtected() const {$/;"	f	class:llvm::DIType
isPrototyped	include/IR/DebugInfo.h	/^  bool isPrototyped() const { return (getFlags() & FlagPrototyped) != 0; }$/;"	f	class:llvm::DISubprogram
isPtrOrPtrVectorTy	include/IR/Type.h	/^  bool isPtrOrPtrVectorTy() const { return getScalarType()->isPointerTy(); }$/;"	f	class:llvm::Type
isPublic	include/IR/DebugInfo.h	/^  bool isPublic() const {$/;"	f	class:llvm::DISubprogram
isPublic	include/IR/DebugInfo.h	/^  bool isPublic() const {$/;"	f	class:llvm::DIType
isRValueReference	include/IR/DebugInfo.h	/^  bool isRValueReference() const {$/;"	f	class:llvm::DIType
isRValueReference	include/IR/DebugInfo.h	/^  unsigned isRValueReference() const {$/;"	f	class:llvm::DISubprogram
isReadOnlyObjCProperty	include/IR/DebugInfo.h	/^  bool isReadOnlyObjCProperty() const {$/;"	f	class:llvm::DIObjCProperty
isReadWriteObjCProperty	include/IR/DebugInfo.h	/^  bool isReadWriteObjCProperty() const {$/;"	f	class:llvm::DIObjCProperty
isRecursiveCallSite	include/corelab/CAMP/ContextTreeBuilder.h	/^			bool isRecursiveCallSite;$/;"	m	class:corelab::ContextTree
isRecursiveCallSite	lib/CAMP/ContextTreeBuilder.h	/^			bool isRecursiveCallSite;$/;"	m	class:corelab::ContextTree
isRecursiveCallSiteNode	include/corelab/CAMP/ContextTreeBuilder.h	/^			inline bool isRecursiveCallSiteNode(){return isRecursiveCallSite;}$/;"	f	class:corelab::ContextTree
isRecursiveCallSiteNode	lib/CAMP/ContextTreeBuilder.h	/^			inline bool isRecursiveCallSiteNode(){return isRecursiveCallSite;}$/;"	f	class:corelab::ContextTree
isRegDefEarlyClobberKind	include/IR/InlineAsm.h	/^  static bool isRegDefEarlyClobberKind(unsigned Flag) {$/;"	f	class:llvm::InlineAsm
isRegDefKind	include/IR/InlineAsm.h	/^  static bool isRegDefKind(unsigned Flag){ return getKind(Flag) == Kind_RegDef;}$/;"	f	class:llvm::InlineAsm
isRelational	include/IR/Instructions.h	/^  bool isRelational() const { return !isEquality(); }$/;"	f	class:llvm::FCmpInst
isRelational	include/IR/Instructions.h	/^  bool isRelational() const {$/;"	f	class:llvm::ICmpInst
isRelational	include/IR/Instructions.h	/^  static bool isRelational(Predicate P) {$/;"	f	class:llvm::ICmpInst
isResolved	include/IR/Metadata.h	/^  bool isResolved() const { return !Context.hasReplaceableUses(); }$/;"	f	class:llvm::MDNode
isRetInst	lib/Utilities/FindFunctionExitBB.cpp	/^static inline bool isRetInst(const Instruction *I) {$/;"	f	file:
isRetainObjCProperty	include/IR/DebugInfo.h	/^  bool isRetainObjCProperty() const {$/;"	f	class:llvm::DIObjCProperty
isReturnNonNull	include/IR/CallSite.h	/^  bool isReturnNonNull() const {$/;"	f	class:llvm::CallSiteBase
isScope	include/IR/DebugInfo.h	/^  bool isScope() const { return get() && isa<MDScope>(get()); }$/;"	f	class:llvm::DIDescriptor
isSet	include/IR/IRBuilder.h	/^    bool isSet() const { return (Block != nullptr); }$/;"	f	class:llvm::IRBuilderBase::InsertPoint
isShift	include/IR/Instruction.h	/^  bool isShift() { return isShift(getOpcode()); }$/;"	f	class:llvm::Instruction
isShift	include/IR/Instruction.h	/^  static inline bool isShift(unsigned Opcode) {$/;"	f	class:llvm::Instruction
isSigned	include/IR/InstrTypes.h	/^  bool isSigned() const {$/;"	f	class:llvm::CmpInst
isSimple	include/IR/Instructions.h	/^  bool isSimple() const { return !isAtomic() && !isVolatile(); }$/;"	f	class:llvm::LoadInst
isSimple	include/IR/Instructions.h	/^  bool isSimple() const { return !isAtomic() && !isVolatile(); }$/;"	f	class:llvm::StoreInst
isSingleElement	include/IR/ConstantRange.h	/^  bool isSingleElement() const { return getSingleElement() != nullptr; }$/;"	f	class:llvm::ConstantRange
isSingleValueType	include/IR/Type.h	/^  bool isSingleValueType() const {$/;"	f	class:llvm::Type
isSized	include/IR/Type.h	/^  bool isSized(SmallPtrSetImpl<const Type*> *Visited = nullptr) const {$/;"	f	class:llvm::Type
isStaticMember	include/IR/DebugInfo.h	/^  bool isStaticMember() const { return (getFlags() & FlagStaticMember) != 0; }$/;"	f	class:llvm::DIType
isStructTy	include/IR/Type.h	/^  bool isStructTy() const { return getTypeID() == StructTyID; }$/;"	f	class:llvm::Type
isSubprogram	include/IR/DebugInfo.h	/^  bool isSubprogram() const { return get() && isa<MDSubprogram>(get()); }$/;"	f	class:llvm::DIDescriptor
isSubrange	include/IR/DebugInfo.h	/^  bool isSubrange() const { return get() && isa<MDSubrange>(get()); }$/;"	f	class:llvm::DIDescriptor
isSubroutineType	include/IR/DebugInfo.h	/^  bool isSubroutineType() const {$/;"	f	class:llvm::DIDescriptor
isTailCall	include/IR/CallSite.h	/^  bool isTailCall() const {$/;"	f	class:llvm::CallSiteBase
isTailCall	include/IR/Instructions.h	/^  bool isTailCall() const {$/;"	f	class:llvm::CallInst
isTemplateTypeParameter	include/IR/DebugInfo.h	/^  bool isTemplateTypeParameter() const {$/;"	f	class:llvm::DIDescriptor
isTemplateValueParameter	include/IR/DebugInfo.h	/^  bool isTemplateValueParameter() const {$/;"	f	class:llvm::DIDescriptor
isTemporary	include/IR/Metadata.h	/^  bool isTemporary() const { return Storage == Temporary; }$/;"	f	class:llvm::MDNode
isTerminator	include/IR/Instruction.h	/^  bool isTerminator() const { return isTerminator(getOpcode()); }$/;"	f	class:llvm::Instruction
isTerminator	include/IR/Instruction.h	/^  static inline bool isTerminator(unsigned OpCode) {$/;"	f	class:llvm::Instruction
isThreadLocal	include/IR/GlobalValue.h	/^  bool isThreadLocal() const { return getThreadLocalMode() != NotThreadLocal; }$/;"	f	class:llvm::GlobalValue
isTiedToInvoke	include/IR/Statepoint.h	/^  bool isTiedToInvoke() const {$/;"	f	class:llvm::GCRelocateOperands
isTrueWhenEqual	include/IR/InstrTypes.h	/^  bool isTrueWhenEqual() const {$/;"	f	class:llvm::CmpInst
isType	include/IR/DebugInfo.h	/^  bool isType() const { return get() && isa<MDType>(get()); }$/;"	f	class:llvm::DIDescriptor
isUnconditional	include/IR/Instructions.h	/^  bool isUnconditional() const { return getNumOperands() == 1; }$/;"	f	class:llvm::BranchInst
isUniqued	include/IR/Metadata.h	/^  bool isUniqued() const { return Storage == Uniqued; }$/;"	f	class:llvm::MDNode
isUnordered	include/IR/Instructions.h	/^  bool isUnordered() const {$/;"	f	class:llvm::LoadInst
isUnordered	include/IR/Instructions.h	/^  bool isUnordered() const {$/;"	f	class:llvm::StoreInst
isUnsigned	include/IR/InstrTypes.h	/^  bool isUnsigned() const {$/;"	f	class:llvm::CmpInst
isUseOfGetElementPtrInst	lib/CAMP/CAMP.cpp	/^bool CAMPInstaller::isUseOfGetElementPtrInst(LoadInst *ld){$/;"	f	class:CAMPInstaller
isUseOfGetElementPtrInst	lib/ObjTrace/CtxObjtrace.cpp	/^bool CtxObjtrace::isUseOfGetElementPtrInst(LoadInst *ld){$/;"	f	class:CtxObjtrace
isUseOfGetElementPtrInst	lib/ObjTrace/ObjTrace.cpp	/^bool ObjTrace::isUseOfGetElementPtrInst(LoadInst *ld){$/;"	f	class:ObjTrace
isUseOperandTiedToDef	include/IR/InlineAsm.h	/^  static bool isUseOperandTiedToDef(unsigned Flag, unsigned &Idx) {$/;"	f	class:llvm::InlineAsm
isUsedByMetadata	include/IR/Value.h	/^  bool isUsedByMetadata() const { return NameAndIsUsedByMD.getInt(); }$/;"	f	class:llvm::Value
isUsedWithInAlloca	include/IR/Instructions.h	/^  bool isUsedWithInAlloca() const {$/;"	f	class:llvm::AllocaInst
isValid	include/IR/DebugInfo.h	/^  bool isValid() const { return DbgNode && isType(); }$/;"	f	class:llvm::DIType
isValid	include/IR/ValueHandle.h	/^  static bool isValid(Value *V) {$/;"	f	class:llvm::ValueHandleBase
isValidLinkage	include/IR/GlobalAlias.h	/^  static bool isValidLinkage(LinkageTypes L) {$/;"	f	class:llvm::GlobalAlias
isValidLocationForIntrinsic	include/IR/DebugInfoMetadata.h	/^  bool isValidLocationForIntrinsic(const MDLocation *DL) const {$/;"	f	class:llvm::MDLocalVariable
isValue	include/IR/PatternMatch.h	/^  bool isValue(const APInt &C) { return C == 1; }$/;"	f	struct:llvm::PatternMatch::is_one
isValue	include/IR/PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isAllOnesValue(); }$/;"	f	struct:llvm::PatternMatch::is_all_ones
isValue	include/IR/PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isMaxSignedValue(); }$/;"	f	struct:llvm::PatternMatch::is_maxsignedvalue
isValue	include/IR/PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isPowerOf2(); }$/;"	f	struct:llvm::PatternMatch::is_power2
isValue	include/IR/PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isSignBit(); }$/;"	f	struct:llvm::PatternMatch::is_sign_bit
isVarArg	include/IR/DerivedTypes.h	/^  bool isVarArg() const { return getSubclassData()!=0; }$/;"	f	class:llvm::FunctionType
isVariable	include/IR/DebugInfo.h	/^  bool isVariable() const { return get() && isa<MDLocalVariable>(get()); }$/;"	f	class:llvm::DIDescriptor
isVector	include/IR/DebugInfo.h	/^  bool isVector() const { return (getFlags() & FlagVector) != 0; }$/;"	f	class:llvm::DIType
isVectorTy	include/IR/Type.h	/^  bool isVectorTy() const { return getTypeID() == VectorTyID; }$/;"	f	class:llvm::Type
isVirtual	include/IR/DebugInfo.h	/^  bool isVirtual() const { return (getFlags() & FlagVirtual) != 0; }$/;"	f	class:llvm::DIType
isVoidTy	include/IR/Type.h	/^  bool isVoidTy() const { return getTypeID() == VoidTyID; }$/;"	f	class:llvm::Type
isVolatile	include/IR/Instructions.h	/^  bool isVolatile() const { return getSubclassDataFromInstruction() & 1; }$/;"	f	class:llvm::LoadInst
isVolatile	include/IR/Instructions.h	/^  bool isVolatile() const { return getSubclassDataFromInstruction() & 1; }$/;"	f	class:llvm::StoreInst
isVolatile	include/IR/Instructions.h	/^  bool isVolatile() const {$/;"	f	class:llvm::AtomicCmpXchgInst
isVolatile	include/IR/Instructions.h	/^  bool isVolatile() const {$/;"	f	class:llvm::AtomicRMWInst
isVolatile	include/IR/IntrinsicInst.h	/^    bool isVolatile() const {$/;"	f	class:llvm::MemIntrinsic
isWeak	include/IR/Instructions.h	/^  bool isWeak() const {$/;"	f	class:llvm::AtomicCmpXchgInst
isWeakAnyLinkage	include/IR/GlobalValue.h	/^  static bool isWeakAnyLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isWeakForLinker	include/IR/GlobalValue.h	/^  bool isWeakForLinker() const { return isWeakForLinker(Linkage); }$/;"	f	class:llvm::GlobalValue
isWeakForLinker	include/IR/GlobalValue.h	/^  static bool isWeakForLinker(LinkageTypes Linkage)  {$/;"	f	class:llvm::GlobalValue
isWeakLinkage	include/IR/GlobalValue.h	/^  static bool isWeakLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isWeakODRLinkage	include/IR/GlobalValue.h	/^  static bool isWeakODRLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isX86_FP80Ty	include/IR/Type.h	/^  bool isX86_FP80Ty() const { return getTypeID() == X86_FP80TyID; }$/;"	f	class:llvm::Type
isX86_MMXTy	include/IR/Type.h	/^  bool isX86_MMXTy() const { return getTypeID() == X86_MMXTyID; }$/;"	f	class:llvm::Type
isZero	include/IR/Constants.h	/^  bool isZero() const { return Val.isZero(); }$/;"	f	class:llvm::ConstantFP
isZero	include/IR/Constants.h	/^  bool isZero() const {$/;"	f	class:llvm::ConstantInt
is_all_ones	include/IR/PatternMatch.h	/^struct is_all_ones {$/;"	s	namespace:llvm::PatternMatch
is_maxsignedvalue	include/IR/PatternMatch.h	/^struct is_maxsignedvalue {$/;"	s	namespace:llvm::PatternMatch
is_one	include/IR/PatternMatch.h	/^struct is_one {$/;"	s	namespace:llvm::PatternMatch
is_power2	include/IR/PatternMatch.h	/^struct is_power2 {$/;"	s	namespace:llvm::PatternMatch
is_sign_bit	include/IR/PatternMatch.h	/^struct is_sign_bit {$/;"	s	namespace:llvm::PatternMatch
isa_impl	include/IR/Type.h	/^template <> struct isa_impl<PointerType, Type> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<Argument, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<BasicBlock, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<Constant, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<Function, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<GlobalAlias, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<GlobalObject, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<GlobalValue, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<GlobalVariable, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<InlineAsm, Value> {$/;"	s	namespace:llvm
isa_impl	include/IR/Value.h	/^template <> struct isa_impl<Instruction, Value> {$/;"	s	namespace:llvm
it	include/IR/CFG.h	/^    Self it;$/;"	m	class:llvm::SuccIterator::SuccessorProxy
iterStack	tools/camp/campRuntime.h	/^	IterStack iterStack;$/;"	m	struct:StoreHistoryElem
iterStack	tools/campSampling/campRuntime.h	/^	IterStack iterStack;$/;"	m	struct:StoreHistoryElem
iterator	include/IR/Attributes.h	/^  typedef ArrayRef<Attribute>::iterator iterator;$/;"	t	class:llvm::AttributeSet
iterator	include/IR/BasicBlock.h	/^  typedef InstListType::iterator iterator;$/;"	t	class:llvm::BasicBlock
iterator	include/IR/DebugInfo.h	/^    iterator(MDExpression::element_iterator I) : I(I) {}$/;"	f	class:llvm::DIExpression::iterator
iterator	include/IR/DebugInfo.h	/^  class iterator : public std::iterator<std::input_iterator_tag, StringRef,$/;"	c	class:llvm::DIExpression
iterator	include/IR/Function.h	/^  typedef BasicBlockListType::iterator iterator;$/;"	t	class:llvm::Function
iterator	include/IR/LegacyPassManagers.h	/^  typedef std::vector<PMDataManager *>::const_reverse_iterator iterator;$/;"	t	class:llvm::PMStack
iterator	include/IR/Metadata.h	/^  typedef StringRef::iterator iterator;$/;"	t	class:llvm::MDString
iterator	include/IR/Module.h	/^  typedef FunctionListType::iterator                           iterator;$/;"	t	class:llvm::Module
iterator	include/IR/TypeFinder.h	/^  typedef std::vector<StructType*>::iterator iterator;$/;"	t	class:llvm::TypeFinder
iterator	include/IR/ValueMap.h	/^  typedef ValueMapIterator<MapT, KeyT> iterator;$/;"	t	class:llvm::ValueMap
iterator	include/IR/ValueSymbolTable.h	/^  typedef ValueMap::iterator iterator;$/;"	t	class:llvm::ValueSymbolTable
iterator	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef RecursiveFuncList::iterator iterator;$/;"	t	class:corelab::RecursiveFuncAnal
iterator	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef RecursiveFuncList::iterator iterator;$/;"	t	class:corelab::RecursiveFuncAnal
iterator_category	include/IR/InstIterator.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:llvm::InstIterator
key_type	include/IR/ValueMap.h	/^  typedef KeyT key_type;$/;"	t	class:llvm::ValueMap
last	include/corelab/CAMP/campTimer.h	/^			static double last;$/;"	m	namespace:corelab::CAMP::Timer
legacy	include/IR/LegacyPassManager.h	/^namespace legacy {$/;"	n	namespace:llvm
llvm	include/IR/Argument.h	/^namespace llvm {$/;"	n
llvm	include/IR/AssemblyAnnotationWriter.h	/^namespace llvm {$/;"	n
llvm	include/IR/Attributes.h	/^namespace llvm {$/;"	n
llvm	include/IR/AutoUpgrade.h	/^namespace llvm {$/;"	n
llvm	include/IR/BasicBlock.h	/^namespace llvm {$/;"	n
llvm	include/IR/CFG.h	/^namespace llvm {$/;"	n
llvm	include/IR/CallSite.h	/^namespace llvm {$/;"	n
llvm	include/IR/CallingConv.h	/^namespace llvm {$/;"	n
llvm	include/IR/Comdat.h	/^namespace llvm {$/;"	n
llvm	include/IR/Constant.h	/^namespace llvm {$/;"	n
llvm	include/IR/ConstantFolder.h	/^namespace llvm {$/;"	n
llvm	include/IR/ConstantRange.h	/^namespace llvm {$/;"	n
llvm	include/IR/Constants.h	/^namespace llvm {$/;"	n
llvm	include/IR/DIBuilder.h	/^namespace llvm {$/;"	n
llvm	include/IR/DataLayout.h	/^namespace llvm {$/;"	n
llvm	include/IR/DebugInfo.h	/^namespace llvm {$/;"	n
llvm	include/IR/DebugInfoMetadata.h	/^namespace llvm {$/;"	n
llvm	include/IR/DebugLoc.h	/^namespace llvm {$/;"	n
llvm	include/IR/DerivedTypes.h	/^namespace llvm {$/;"	n
llvm	include/IR/DiagnosticInfo.h	/^namespace llvm {$/;"	n
llvm	include/IR/DiagnosticPrinter.h	/^namespace llvm {$/;"	n
llvm	include/IR/Dominators.h	/^namespace llvm {$/;"	n
llvm	include/IR/Function.h	/^namespace llvm {$/;"	n
llvm	include/IR/GVMaterializer.h	/^namespace llvm {$/;"	n
llvm	include/IR/GetElementPtrTypeIterator.h	/^namespace llvm {$/;"	n
llvm	include/IR/GlobalAlias.h	/^namespace llvm {$/;"	n
llvm	include/IR/GlobalObject.h	/^namespace llvm {$/;"	n
llvm	include/IR/GlobalValue.h	/^namespace llvm {$/;"	n
llvm	include/IR/GlobalVariable.h	/^namespace llvm {$/;"	n
llvm	include/IR/IRBuilder.h	/^namespace llvm {$/;"	n
llvm	include/IR/IRPrintingPasses.h	/^namespace llvm {$/;"	n
llvm	include/IR/InlineAsm.h	/^namespace llvm {$/;"	n
llvm	include/IR/InstIterator.h	/^namespace llvm {$/;"	n
llvm	include/IR/InstVisitor.h	/^namespace llvm {$/;"	n
llvm	include/IR/InstrTypes.h	/^namespace llvm {$/;"	n
llvm	include/IR/Instruction.h	/^namespace llvm {$/;"	n
llvm	include/IR/Instructions.h	/^namespace llvm {$/;"	n
llvm	include/IR/IntrinsicInst.h	/^namespace llvm {$/;"	n
llvm	include/IR/Intrinsics.h	/^namespace llvm {$/;"	n
llvm	include/IR/LLVMContext.h	/^namespace llvm {$/;"	n
llvm	include/IR/LegacyPassManager.h	/^namespace llvm {$/;"	n
llvm	include/IR/LegacyPassManagers.h	/^namespace llvm {$/;"	n
llvm	include/IR/LegacyPassNameParser.h	/^namespace llvm {$/;"	n
llvm	include/IR/MDBuilder.h	/^namespace llvm {$/;"	n
llvm	include/IR/Mangler.h	/^namespace llvm {$/;"	n
llvm	include/IR/Metadata.h	/^namespace llvm {$/;"	n
llvm	include/IR/MetadataTracking.h	/^namespace llvm {$/;"	n
llvm	include/IR/Module.h	/^namespace llvm {$/;"	n
llvm	include/IR/NoFolder.h	/^namespace llvm {$/;"	n
llvm	include/IR/OperandTraits.h	/^namespace llvm {$/;"	n
llvm	include/IR/Operator.h	/^namespace llvm {$/;"	n
llvm	include/IR/PassManager.h	/^namespace llvm {$/;"	n
llvm	include/IR/PassManagerInternal.h	/^namespace llvm {$/;"	n
llvm	include/IR/PatternMatch.h	/^namespace llvm {$/;"	n
llvm	include/IR/PredIteratorCache.h	/^namespace llvm {$/;"	n
llvm	include/IR/Statepoint.h	/^namespace llvm {$/;"	n
llvm	include/IR/SymbolTableListTraits.h	/^namespace llvm {$/;"	n
llvm	include/IR/TrackingMDRef.h	/^namespace llvm {$/;"	n
llvm	include/IR/Type.h	/^namespace llvm {$/;"	n
llvm	include/IR/TypeBuilder.h	/^namespace llvm {$/;"	n
llvm	include/IR/TypeFinder.h	/^namespace llvm {$/;"	n
llvm	include/IR/Use.h	/^namespace llvm {$/;"	n
llvm	include/IR/UseListOrder.h	/^namespace llvm {$/;"	n
llvm	include/IR/User.h	/^namespace llvm {$/;"	n
llvm	include/IR/Value.h	/^namespace llvm {$/;"	n
llvm	include/IR/ValueHandle.h	/^namespace llvm {$/;"	n
llvm	include/IR/ValueMap.h	/^namespace llvm {$/;"	n
llvm	include/IR/ValueSymbolTable.h	/^namespace llvm {$/;"	n
llvm	include/IR/Verifier.h	/^namespace llvm {$/;"	n
llvm	include/corelab/Utilities/ProfileInfo.h	/^namespace llvm {$/;"	n
loadCount	include/corelab/Metadata/Metadata.h	/^			uint16_t loadCount;$/;"	m	class:corelab::Namer
loadIdMap	tools/objtrace/objtraceruntime.cpp	/^LoadStoreMap *loadIdMap;$/;"	v
loadMetadata	lib/Metadata/LoadNamer.cpp	/^	bool LoadNamer::loadMetadata() {$/;"	f	class:corelab::LoadNamer
locID	include/corelab/CAMP/ContextTreeBuilder.h	/^			LocalContextID locID;$/;"	m	class:corelab::ContextTree
locID	lib/CAMP/ContextTreeBuilder.h	/^			LocalContextID locID;$/;"	m	class:corelab::ContextTree
locIdOf_callSite	include/corelab/CAMP/CAMP.h	/^			LocIDMapForCallSite *locIdOf_callSite;  \/\/ if key is instrID of indirect call, then value is -1$/;"	m	class:corelab::CAMPInstaller
locIdOf_callSite	include/corelab/CAMP/CampCache.h	/^			LocIDMapForCallSite *locIdOf_callSite;$/;"	m	class:corelab::CAMPCache
locIdOf_callSite	include/corelab/CAMP/CampExectime.h	/^			LocIDMapForCallSite *locIdOf_callSite;  \/\/ if key is instrID of indirect call, then value is -1$/;"	m	class:corelab::CAMPExectime
locIdOf_callSite	include/corelab/CAMP/ContextTreeBuilder.h	/^			LocIDMapForCallSite locIdOf_callSite;  \/\/ if key is instrID of indirect call, then value is -1$/;"	m	class:corelab::ContextTreeBuilder
locIdOf_callSite	include/corelab/ObjTrace/CtxObjtrace.h	/^			LocIDMapForCallSite *locIdOf_callSite;  \/\/ if key is instrID of indirect call, then value is -1$/;"	m	class:corelab::CtxObjtrace
locIdOf_callSite	lib/CAMP/CAMP.h	/^			LocIDMapForCallSite *locIdOf_callSite;  \/\/ if key is instrID of indirect call, then value is -1$/;"	m	class:corelab::CAMPInstaller
locIdOf_callSite	lib/CAMP/CampCache.h	/^			LocIDMapForCallSite *locIdOf_callSite;$/;"	m	class:corelab::CAMPCache
locIdOf_callSite	lib/CAMP/CampExectime.h	/^			LocIDMapForCallSite *locIdOf_callSite;  \/\/ if key is instrID of indirect call, then value is -1$/;"	m	class:corelab::CAMPExectime
locIdOf_callSite	lib/CAMP/ContextTreeBuilder.h	/^			LocIDMapForCallSite locIdOf_callSite;  \/\/ if key is instrID of indirect call, then value is -1$/;"	m	class:corelab::ContextTreeBuilder
locIdOf_callSite	lib/ObjTrace/CtxObjtrace.h	/^			LocIDMapForCallSite *locIdOf_callSite;  \/\/ if key is instrID of indirect call, then value is -1$/;"	m	class:corelab::CtxObjtrace
locIdOf_indCall	include/corelab/CAMP/CAMP.h	/^			LocIDMapForIndirectCalls *locIdOf_indCall;$/;"	m	class:corelab::CAMPInstaller
locIdOf_indCall	include/corelab/CAMP/CampCache.h	/^			LocIDMapForIndirectCalls *locIdOf_indCall;$/;"	m	class:corelab::CAMPCache
locIdOf_indCall	include/corelab/CAMP/CampExectime.h	/^			LocIDMapForIndirectCalls *locIdOf_indCall;$/;"	m	class:corelab::CAMPExectime
locIdOf_indCall	include/corelab/CAMP/ContextTreeBuilder.h	/^			LocIDMapForIndirectCalls locIdOf_indCall;$/;"	m	class:corelab::ContextTreeBuilder
locIdOf_indCall	include/corelab/ObjTrace/CtxObjtrace.h	/^			LocIDMapForIndirectCalls *locIdOf_indCall;$/;"	m	class:corelab::CtxObjtrace
locIdOf_indCall	lib/CAMP/CAMP.h	/^			LocIDMapForIndirectCalls *locIdOf_indCall;$/;"	m	class:corelab::CAMPInstaller
locIdOf_indCall	lib/CAMP/CampCache.h	/^			LocIDMapForIndirectCalls *locIdOf_indCall;$/;"	m	class:corelab::CAMPCache
locIdOf_indCall	lib/CAMP/CampExectime.h	/^			LocIDMapForIndirectCalls *locIdOf_indCall;$/;"	m	class:corelab::CAMPExectime
locIdOf_indCall	lib/CAMP/ContextTreeBuilder.h	/^			LocIDMapForIndirectCalls locIdOf_indCall;$/;"	m	class:corelab::ContextTreeBuilder
locIdOf_indCall	lib/ObjTrace/CtxObjtrace.h	/^			LocIDMapForIndirectCalls *locIdOf_indCall;$/;"	m	class:corelab::CtxObjtrace
locIdOf_loop	include/corelab/CAMP/CAMP.h	/^			LocIDMapForLoop *locIdOf_loop;$/;"	m	class:corelab::CAMPInstaller
locIdOf_loop	include/corelab/CAMP/CampExectime.h	/^			LocIDMapForLoop *locIdOf_loop;$/;"	m	class:corelab::CAMPExectime
locIdOf_loop	include/corelab/CAMP/ContextTreeBuilder.h	/^			LocIDMapForLoop locIdOf_loop;$/;"	m	class:corelab::ContextTreeBuilder
locIdOf_loop	include/corelab/ObjTrace/CtxObjtrace.h	/^			LocIDMapForLoop *locIdOf_loop;$/;"	m	class:corelab::CtxObjtrace
locIdOf_loop	lib/CAMP/CAMP.h	/^			LocIDMapForLoop *locIdOf_loop;$/;"	m	class:corelab::CAMPInstaller
locIdOf_loop	lib/CAMP/CampExectime.h	/^			LocIDMapForLoop *locIdOf_loop;$/;"	m	class:corelab::CAMPExectime
locIdOf_loop	lib/CAMP/ContextTreeBuilder.h	/^			LocIDMapForLoop locIdOf_loop;$/;"	m	class:corelab::ContextTreeBuilder
locIdOf_loop	lib/ObjTrace/CtxObjtrace.h	/^			LocIDMapForLoop *locIdOf_loop;$/;"	m	class:corelab::CtxObjtrace
lookup	include/IR/ValueMap.h	/^  ValueT lookup(const KeyT &Val) const {$/;"	f	class:llvm::ValueMap
lookup	include/IR/ValueSymbolTable.h	/^  Value *lookup(StringRef Name) const { return vmap.lookup(Name); }$/;"	f	class:llvm::ValueSymbolTable
lookupPass	include/IR/PassManager.h	/^  PassConceptT &lookupPass(void *PassID) {$/;"	f	class:llvm::detail::AnalysisManagerBase
lookupPass	include/IR/PassManager.h	/^  const PassConceptT &lookupPass(void *PassID) const {$/;"	f	class:llvm::detail::AnalysisManagerBase
loop	include/corelab/CAMP/ContextTreeBuilder.h	/^			Loop *loop;$/;"	m	class:corelab::ContextTree
loop	lib/CAMP/ContextTreeBuilder.h	/^			Loop *loop;$/;"	m	class:corelab::ContextTree
loopCount	include/corelab/Metadata/Metadata.h	/^			uint16_t loopCount;$/;"	m	class:corelab::Namer
loopDep	include/corelab/CAMP/campCommon.h	/^			uint32_t 	loopDep;						\/\/ Accumulative Loop Dependence Bit Vector$/;"	m	struct:corelab::CAMP::__anon1
loopDep	lib/CAMP/campCommon.h	/^			uint32_t 	loopDep;						\/\/ Accumulative Loop Dependence Bit Vector$/;"	m	struct:corelab::CAMP::__anon25
loopIdOf	include/corelab/CAMP/ContextTreeBuilder.h	/^			LoopIdOf loopIdOf;$/;"	m	class:corelab::ContextTreeBuilder
loopIdOf	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			ContextTreeBuilder::LoopIdOf *loopIdOf;$/;"	m	class:corelab::RegiInterIterDepFinder
loopIdOf	lib/CAMP/ContextTreeBuilder.h	/^			LoopIdOf loopIdOf;$/;"	m	class:corelab::ContextTreeBuilder
loopIdOf	lib/CAMP/RegiInterIterDepFinder.h	/^			ContextTreeBuilder::LoopIdOf *loopIdOf;$/;"	m	class:corelab::RegiInterIterDepFinder
loopInfoOf	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      LoopInfoOfFunc loopInfoOf;$/;"	m	class:corelab::LoopTraverse
loopInfoOf	include/corelab/CAMP/ContextTreeBuilder.h	/^			LoopInfoOfFunc loopInfoOf;$/;"	m	class:corelab::ContextTreeBuilder
loopInfoOf	lib/AliasAnalysis/LoopTraverse.hpp	/^      LoopInfoOfFunc loopInfoOf;$/;"	m	class:corelab::LoopTraverse
loopInfoOf	lib/CAMP/ContextTreeBuilder.h	/^			LoopInfoOfFunc loopInfoOf;$/;"	m	class:corelab::ContextTreeBuilder
loopOfCntxID	include/corelab/CAMP/ContextTreeBuilder.h	/^			LoopOfCntxID loopOfCntxID;$/;"	m	class:corelab::ContextTreeBuilder
loopOfCntxID	lib/CAMP/ContextTreeBuilder.h	/^			LoopOfCntxID loopOfCntxID;$/;"	m	class:corelab::ContextTreeBuilder
loopOfLoopID	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			ContextTreeBuilder::LoopOfCntxID *loopOfLoopID;$/;"	m	class:corelab::RegiInterIterDepFinder
loopOfLoopID	lib/CAMP/RegiInterIterDepFinder.h	/^			ContextTreeBuilder::LoopOfCntxID *loopOfLoopID;$/;"	m	class:corelab::RegiInterIterDepFinder
loopTable	include/corelab/Metadata/LoadNamer.h	/^			std::map<uint16_t, LoopEntry*> loopTable; \/\/ ctxId -> loopInfo$/;"	m	class:corelab::LoadNamer
loopTable	include/corelab/Metadata/Metadata.h	/^			std::map<uint16_t, LoopEntry*> loopTable; \/\/ ctxId -> loopInfo$/;"	m	class:corelab::Namer
lowestHeapSetting	tools/objtrace/objtraceruntime.cpp	/^void lowestHeapSetting (uint64_t addr){$/;"	f
lowest_heap	tools/objtrace/objtraceruntime.cpp	/^uint64_t lowest_heap;$/;"	v
m_APInt	include/IR/PatternMatch.h	/^inline apint_match m_APInt(const APInt *&Res) { return Res; }$/;"	f	namespace:llvm::PatternMatch
m_AShr	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::AShr> m_AShr(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_Add	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::Add> m_Add(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_AllOnes	include/IR/PatternMatch.h	/^inline api_pred_ty<is_all_ones> m_AllOnes(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_AllOnes	include/IR/PatternMatch.h	/^inline cst_pred_ty<is_all_ones> m_AllOnes() {$/;"	f	namespace:llvm::PatternMatch
m_And	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::And> m_And(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_AnyZero	include/IR/PatternMatch.h	/^inline match_combine_or<match_zero, match_neg_zero> m_AnyZero() {$/;"	f	namespace:llvm::PatternMatch
m_Argument	include/IR/PatternMatch.h	/^inline Argument_match<Opnd_t> m_Argument(const Opnd_t &Op) {$/;"	f	namespace:llvm::PatternMatch
m_BSwap	include/IR/PatternMatch.h	/^inline typename m_Intrinsic_Ty<Opnd0>::Ty m_BSwap(const Opnd0 &Op0) {$/;"	f	namespace:llvm::PatternMatch
m_BinOp	include/IR/PatternMatch.h	/^inline AnyBinaryOp_match<LHS, RHS> m_BinOp(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_BinOp	include/IR/PatternMatch.h	/^inline bind_ty<BinaryOperator> m_BinOp(BinaryOperator *&I) { return I; }$/;"	f	namespace:llvm::PatternMatch
m_BinOp	include/IR/PatternMatch.h	/^inline class_match<BinaryOperator> m_BinOp() {$/;"	f	namespace:llvm::PatternMatch
m_BitCast	include/IR/PatternMatch.h	/^inline CastClass_match<OpTy, Instruction::BitCast> m_BitCast(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_Br	include/IR/PatternMatch.h	/^inline brc_match<Cond_t> m_Br(const Cond_t &C, BasicBlock *&T, BasicBlock *&F) {$/;"	f	namespace:llvm::PatternMatch
m_Cmp	include/IR/PatternMatch.h	/^inline class_match<CmpInst> m_Cmp() { return class_match<CmpInst>(); }$/;"	f	namespace:llvm::PatternMatch
m_Cmp	include/IR/PatternMatch.h	/^m_Cmp(CmpInst::Predicate &Pred, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_CombineAnd	include/IR/PatternMatch.h	/^inline match_combine_and<LTy, RTy> m_CombineAnd(const LTy &L, const RTy &R) {$/;"	f	namespace:llvm::PatternMatch
m_CombineOr	include/IR/PatternMatch.h	/^inline match_combine_or<LTy, RTy> m_CombineOr(const LTy &L, const RTy &R) {$/;"	f	namespace:llvm::PatternMatch
m_Constant	include/IR/PatternMatch.h	/^inline bind_ty<Constant> m_Constant(Constant *&C) { return C; }$/;"	f	namespace:llvm::PatternMatch
m_Constant	include/IR/PatternMatch.h	/^inline class_match<Constant> m_Constant() { return class_match<Constant>(); }$/;"	f	namespace:llvm::PatternMatch
m_ConstantFP	include/IR/PatternMatch.h	/^inline bind_ty<ConstantFP> m_ConstantFP(ConstantFP *&C) { return C; }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	include/IR/PatternMatch.h	/^inline bind_const_intval_ty m_ConstantInt(uint64_t &V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	include/IR/PatternMatch.h	/^inline bind_ty<ConstantInt> m_ConstantInt(ConstantInt *&CI) { return CI; }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	include/IR/PatternMatch.h	/^inline class_match<ConstantInt> m_ConstantInt() {$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	include/IR/PatternMatch.h	/^template <int64_t Val> inline constantint_match<Val> m_ConstantInt() {$/;"	f	namespace:llvm::PatternMatch
m_Exact	include/IR/PatternMatch.h	/^template <typename T> inline Exact_match<T> m_Exact(const T &SubPattern) {$/;"	f	namespace:llvm::PatternMatch
m_FAdd	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::FAdd> m_FAdd(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_FCmp	include/IR/PatternMatch.h	/^m_FCmp(FCmpInst::Predicate &Pred, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FDiv	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::FDiv> m_FDiv(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_FMax	include/IR/PatternMatch.h	/^inline typename m_Intrinsic_Ty<Opnd0, Opnd1>::Ty m_FMax(const Opnd0 &Op0,$/;"	f	namespace:llvm::PatternMatch
m_FMin	include/IR/PatternMatch.h	/^inline typename m_Intrinsic_Ty<Opnd0, Opnd1>::Ty m_FMin(const Opnd0 &Op0,$/;"	f	namespace:llvm::PatternMatch
m_FMul	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::FMul> m_FMul(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_FNeg	include/IR/PatternMatch.h	/^template <typename LHS> inline fneg_match<LHS> m_FNeg(const LHS &L) {$/;"	f	namespace:llvm::PatternMatch
m_FPOne	include/IR/PatternMatch.h	/^inline specific_fpval m_FPOne() { return m_SpecificFP(1.0); }$/;"	f	namespace:llvm::PatternMatch
m_FRem	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::FRem> m_FRem(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_FSub	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::FSub> m_FSub(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_ICmp	include/IR/PatternMatch.h	/^m_ICmp(ICmpInst::Predicate &Pred, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_IDiv	include/IR/PatternMatch.h	/^m_IDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Intrinsic	include/IR/PatternMatch.h	/^inline typename m_Intrinsic_Ty<T0, T1>::Ty m_Intrinsic(const T0 &Op0,$/;"	f	namespace:llvm::PatternMatch
m_Intrinsic	include/IR/PatternMatch.h	/^inline typename m_Intrinsic_Ty<T0>::Ty m_Intrinsic(const T0 &Op0) {$/;"	f	namespace:llvm::PatternMatch
m_Intrinsic	include/IR/PatternMatch.h	/^m_Intrinsic(const T0 &Op0, const T1 &Op1, const T2 &Op2) {$/;"	f	namespace:llvm::PatternMatch
m_Intrinsic	include/IR/PatternMatch.h	/^m_Intrinsic(const T0 &Op0, const T1 &Op1, const T2 &Op2, const T3 &Op3) {$/;"	f	namespace:llvm::PatternMatch
m_Intrinsic	include/IR/PatternMatch.h	/^template <Intrinsic::ID IntrID> inline IntrinsicID_match m_Intrinsic() {$/;"	f	namespace:llvm::PatternMatch
m_Intrinsic_Ty	include/IR/PatternMatch.h	/^struct m_Intrinsic_Ty<T0, T1, T2, T3> {$/;"	s	namespace:llvm::PatternMatch
m_Intrinsic_Ty	include/IR/PatternMatch.h	/^struct m_Intrinsic_Ty<T0, T1, T2> {$/;"	s	namespace:llvm::PatternMatch
m_Intrinsic_Ty	include/IR/PatternMatch.h	/^template <typename T0, typename T1> struct m_Intrinsic_Ty<T0, T1> {$/;"	s	namespace:llvm::PatternMatch
m_Intrinsic_Ty	include/IR/PatternMatch.h	/^template <typename T0> struct m_Intrinsic_Ty<T0> {$/;"	s	namespace:llvm::PatternMatch
m_LShr	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::LShr> m_LShr(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_LogicalShift	include/IR/PatternMatch.h	/^m_LogicalShift(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_MaxSignedValue	include/IR/PatternMatch.h	/^inline api_pred_ty<is_maxsignedvalue> m_MaxSignedValue(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_MaxSignedValue	include/IR/PatternMatch.h	/^inline cst_pred_ty<is_maxsignedvalue> m_MaxSignedValue() { return cst_pred_ty<is_maxsignedvalue>(); }$/;"	f	namespace:llvm::PatternMatch
m_Mul	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::Mul> m_Mul(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_NSWAdd	include/IR/PatternMatch.h	/^m_NSWAdd(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_NSWMul	include/IR/PatternMatch.h	/^m_NSWMul(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_NSWShl	include/IR/PatternMatch.h	/^m_NSWShl(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_NSWSub	include/IR/PatternMatch.h	/^m_NSWSub(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_NUWAdd	include/IR/PatternMatch.h	/^m_NUWAdd(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_NUWMul	include/IR/PatternMatch.h	/^m_NUWMul(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_NUWShl	include/IR/PatternMatch.h	/^m_NUWShl(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_NUWSub	include/IR/PatternMatch.h	/^m_NUWSub(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Neg	include/IR/PatternMatch.h	/^template <typename LHS> inline neg_match<LHS> m_Neg(const LHS &L) { return L; }$/;"	f	namespace:llvm::PatternMatch
m_NegZero	include/IR/PatternMatch.h	/^inline match_neg_zero m_NegZero() { return match_neg_zero(); }$/;"	f	namespace:llvm::PatternMatch
m_Not	include/IR/PatternMatch.h	/^template <typename LHS> inline not_match<LHS> m_Not(const LHS &L) { return L; }$/;"	f	namespace:llvm::PatternMatch
m_One	include/IR/PatternMatch.h	/^inline api_pred_ty<is_one> m_One(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_One	include/IR/PatternMatch.h	/^inline cst_pred_ty<is_one> m_One() { return cst_pred_ty<is_one>(); }$/;"	f	namespace:llvm::PatternMatch
m_OneUse	include/IR/PatternMatch.h	/^template <typename T> inline OneUse_match<T> m_OneUse(const T &SubPattern) {$/;"	f	namespace:llvm::PatternMatch
m_Or	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::Or> m_Or(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_OrdFMax	include/IR/PatternMatch.h	/^inline MaxMin_match<FCmpInst, LHS, RHS, ofmax_pred_ty> m_OrdFMax(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_OrdFMin	include/IR/PatternMatch.h	/^inline MaxMin_match<FCmpInst, LHS, RHS, ofmin_pred_ty> m_OrdFMin(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_Power2	include/IR/PatternMatch.h	/^inline api_pred_ty<is_power2> m_Power2(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_Power2	include/IR/PatternMatch.h	/^inline cst_pred_ty<is_power2> m_Power2() { return cst_pred_ty<is_power2>(); }$/;"	f	namespace:llvm::PatternMatch
m_PtrToInt	include/IR/PatternMatch.h	/^inline CastClass_match<OpTy, Instruction::PtrToInt> m_PtrToInt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_SDiv	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::SDiv> m_SDiv(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_SExt	include/IR/PatternMatch.h	/^inline CastClass_match<OpTy, Instruction::SExt> m_SExt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_SIToFP	include/IR/PatternMatch.h	/^inline CastClass_match<OpTy, Instruction::SIToFP> m_SIToFP(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_SMax	include/IR/PatternMatch.h	/^inline MaxMin_match<ICmpInst, LHS, RHS, smax_pred_ty> m_SMax(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_SMin	include/IR/PatternMatch.h	/^inline MaxMin_match<ICmpInst, LHS, RHS, smin_pred_ty> m_SMin(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_SRem	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::SRem> m_SRem(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_Select	include/IR/PatternMatch.h	/^inline SelectClass_match<Cond, LHS, RHS> m_Select(const Cond &C, const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_SelectCst	include/IR/PatternMatch.h	/^m_SelectCst(const Cond &C) {$/;"	f	namespace:llvm::PatternMatch
m_Shl	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::Shl> m_Shl(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_Shr	include/IR/PatternMatch.h	/^m_Shr(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SignBit	include/IR/PatternMatch.h	/^inline api_pred_ty<is_sign_bit> m_SignBit(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_SignBit	include/IR/PatternMatch.h	/^inline cst_pred_ty<is_sign_bit> m_SignBit() {$/;"	f	namespace:llvm::PatternMatch
m_Specific	include/IR/PatternMatch.h	/^inline specificval_ty m_Specific(const Value *V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_SpecificFP	include/IR/PatternMatch.h	/^inline specific_fpval m_SpecificFP(double V) { return specific_fpval(V); }$/;"	f	namespace:llvm::PatternMatch
m_SpecificInt	include/IR/PatternMatch.h	/^inline specific_intval m_SpecificInt(uint64_t V) { return specific_intval(V); }$/;"	f	namespace:llvm::PatternMatch
m_Sub	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::Sub> m_Sub(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_Trunc	include/IR/PatternMatch.h	/^inline CastClass_match<OpTy, Instruction::Trunc> m_Trunc(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_UDiv	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::UDiv> m_UDiv(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_UIToFP	include/IR/PatternMatch.h	/^inline CastClass_match<OpTy, Instruction::UIToFP> m_UIToFP(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_UMax	include/IR/PatternMatch.h	/^inline MaxMin_match<ICmpInst, LHS, RHS, umax_pred_ty> m_UMax(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_UMin	include/IR/PatternMatch.h	/^inline MaxMin_match<ICmpInst, LHS, RHS, umin_pred_ty> m_UMin(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_URem	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::URem> m_URem(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_UnconditionalBr	include/IR/PatternMatch.h	/^inline br_match m_UnconditionalBr(BasicBlock *&Succ) { return br_match(Succ); }$/;"	f	namespace:llvm::PatternMatch
m_Undef	include/IR/PatternMatch.h	/^inline class_match<UndefValue> m_Undef() { return class_match<UndefValue>(); }$/;"	f	namespace:llvm::PatternMatch
m_UnordFMax	include/IR/PatternMatch.h	/^m_UnordFMax(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_UnordFMin	include/IR/PatternMatch.h	/^m_UnordFMin(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Value	include/IR/PatternMatch.h	/^inline bind_ty<Value> m_Value(Value *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_Value	include/IR/PatternMatch.h	/^inline class_match<Value> m_Value() { return class_match<Value>(); }$/;"	f	namespace:llvm::PatternMatch
m_Xor	include/IR/PatternMatch.h	/^inline BinaryOp_match<LHS, RHS, Instruction::Xor> m_Xor(const LHS &L,$/;"	f	namespace:llvm::PatternMatch
m_ZExt	include/IR/PatternMatch.h	/^inline CastClass_match<OpTy, Instruction::ZExt> m_ZExt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_Zero	include/IR/PatternMatch.h	/^inline match_zero m_Zero() { return match_zero(); }$/;"	f	namespace:llvm::PatternMatch
main	autoconf/config.guess	/^		main()$/;"	f
main	autoconf/config.guess	/^	main ()$/;"	f
main	autoconf/config.guess	/^main ()$/;"	f
makeCmpResultType	include/IR/InstrTypes.h	/^  static Type* makeCmpResultType(Type* opnd_type) {$/;"	f	class:llvm::CmpInst
makeFunctionTable	lib/Metadata/Namer.cpp	/^	bool Namer::makeFunctionTable(Function &F)$/;"	f	class:corelab::Namer
makeMetadata	lib/Metadata/Namer.cpp	/^	void Namer::makeMetadata(Instruction* instruction, uint64_t Id) {$/;"	f	class:corelab::Namer
makeMetadata	lib/ObjTrace/CtxObjtrace.cpp	/^void CtxObjtrace::makeMetadata(Instruction* instruction, uint64_t Id) {$/;"	f	class:CtxObjtrace
makeMetadata	lib/ObjTrace/ObjTrace.cpp	/^void ObjTrace::makeMetadata(Instruction* instruction, uint64_t Id) {$/;"	f	class:ObjTrace
makeNodeOfCallSite	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTreeBuilder::makeNodeOfCallSite(Instruction *invokeOrCallinst, ContextTreeNode *parent){$/;"	f	class:ContextTreeBuilder
makeNodeOfCallSite_aux	lib/CAMP/ContextTreeBuilder.cpp	/^ContextTreeNode * ContextTreeBuilder::makeNodeOfCallSite_aux(Function *callee, Instruction *invokeOrCallinst, ContextTreeNode *parent){$/;"	f	class:ContextTreeBuilder
makeNodeOfLoop	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTreeBuilder::makeNodeOfLoop(Loop *loop, ContextTreeNode *parent){$/;"	f	class:ContextTreeBuilder
makeNonEmpty	include/corelab/Utilities/InstInsertPt.h	/^      static Instruction *makeNonEmpty(BasicBlock *bb) {$/;"	f	class:corelab::InstInsertPt
makeReplaceable	include/IR/Metadata.h	/^  makeReplaceable(std::unique_ptr<ReplaceableMetadataImpl> ReplaceableUses) {$/;"	f	class:llvm::ContextAndReplaceableUses
map	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<DeviceMapEntry*> map;$/;"	m	class:corelab::DeviceMap
mapped_type	include/IR/ValueMap.h	/^  typedef ValueT mapped_type;$/;"	t	class:llvm::ValueMap
markRecursive	include/corelab/CAMP/ContextTreeBuilder.h	/^			void markRecursive(){$/;"	f	class:corelab::ContextTree
markRecursive	lib/CAMP/ContextTreeBuilder.h	/^			void markRecursive(){$/;"	f	class:corelab::ContextTree
match	include/IR/PatternMatch.h	/^  static bool match(FCmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::ofmax_pred_ty
match	include/IR/PatternMatch.h	/^  static bool match(FCmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::ofmin_pred_ty
match	include/IR/PatternMatch.h	/^  static bool match(FCmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::ufmax_pred_ty
match	include/IR/PatternMatch.h	/^  static bool match(FCmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::ufmin_pred_ty
match	include/IR/PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::smax_pred_ty
match	include/IR/PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::smin_pred_ty
match	include/IR/PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::umax_pred_ty
match	include/IR/PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::umin_pred_ty
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) { return V == Val; }$/;"	f	struct:llvm::PatternMatch::specificval_ty
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) { return isa<Class>(V); }$/;"	f	struct:llvm::PatternMatch::class_match
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::api_pred_ty
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::apint_match
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::bind_const_intval_ty
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::bind_ty
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::constantint_match
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::cst_pred_ty
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::match_combine_and
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::match_combine_or
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::match_neg_zero
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::match_zero
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::specific_fpval
match	include/IR/PatternMatch.h	/^  template <typename ITy> bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::specific_intval
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::AnyBinaryOp_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::Argument_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::BinOp2_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::BinaryOp_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::CastClass_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::CmpClass_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::Exact_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::IntrinsicID_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::MaxMin_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::OneUse_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::OverflowingBinaryOp_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::SelectClass_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::br_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::brc_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::fneg_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::neg_match
match	include/IR/PatternMatch.h	/^  template <typename OpTy> bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::not_match
match	include/IR/PatternMatch.h	/^template <typename Val, typename Pattern> bool match(Val *V, const Pattern &P) {$/;"	f	namespace:llvm::PatternMatch
matchIfFNeg	include/IR/PatternMatch.h	/^  bool matchIfFNeg(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::fneg_match
matchIfNeg	include/IR/PatternMatch.h	/^  bool matchIfNeg(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::neg_match
matchIfNot	include/IR/PatternMatch.h	/^  bool matchIfNot(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::not_match
match_combine_and	include/IR/PatternMatch.h	/^  match_combine_and(const LTy &Left, const RTy &Right) : L(Left), R(Right) {}$/;"	f	struct:llvm::PatternMatch::match_combine_and
match_combine_and	include/IR/PatternMatch.h	/^template <typename LTy, typename RTy> struct match_combine_and {$/;"	s	namespace:llvm::PatternMatch
match_combine_or	include/IR/PatternMatch.h	/^  match_combine_or(const LTy &Left, const RTy &Right) : L(Left), R(Right) {}$/;"	f	struct:llvm::PatternMatch::match_combine_or
match_combine_or	include/IR/PatternMatch.h	/^template <typename LTy, typename RTy> struct match_combine_or {$/;"	s	namespace:llvm::PatternMatch
match_neg_zero	include/IR/PatternMatch.h	/^struct match_neg_zero {$/;"	s	namespace:llvm::PatternMatch
match_zero	include/IR/PatternMatch.h	/^struct match_zero {$/;"	s	namespace:llvm::PatternMatch
maxDepth	include/corelab/CAMP/ContextTreeBuilder.h	/^			unsigned maxDepth;$/;"	m	class:corelab::ContextTreeBuilder
maxDepth	lib/CAMP/ContextTreeBuilder.h	/^			unsigned maxDepth;$/;"	m	class:corelab::ContextTreeBuilder
maxDepthOf	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      FunToMaxDepth maxDepthOf;$/;"	m	class:corelab::LoopTraverse
maxDepthOf	lib/AliasAnalysis/LoopTraverse.hpp	/^      FunToMaxDepth maxDepthOf;$/;"	m	class:corelab::LoopTraverse
mayBeOverridden	include/IR/GlobalValue.h	/^  bool mayBeOverridden() const { return mayBeOverridden(Linkage); }$/;"	f	class:llvm::GlobalValue
mayBeOverridden	include/IR/GlobalValue.h	/^  static bool mayBeOverridden(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
mayHaveSideEffects	include/IR/Instruction.h	/^  bool mayHaveSideEffects() const {$/;"	f	class:llvm::Instruction
mayReadOrWriteMemory	include/IR/Instruction.h	/^  bool mayReadOrWriteMemory() const {$/;"	f	class:llvm::Instruction
mdList	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<MetadataNode*> mdList;$/;"	m	class:corelab::EsperantoNamer
mdListBuild	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<MetadataNode*> mdListBuild;$/;"	m	class:corelab::EsperantoNamer
mdconst	include/IR/Metadata.h	/^namespace mdconst {$/;"	n	namespace:llvm
mergeID	lib/Metadata/Namer.cpp	28;"	d	file:
mergeUseLists	include/IR/Value.h	/^  static Use *mergeUseLists(Use *L, Use *R, Compare Cmp) {$/;"	f	class:llvm::Value
mergeUseListsImpl	include/IR/Value.h	/^void Value::mergeUseListsImpl(Use *L, Use *R, Use **Next, Compare Cmp) {$/;"	f	class:llvm::Value
module	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			Module *module;$/;"	m	class:corelab::IndirectCallAnal
module	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      Module *module;$/;"	m	class:corelab::LoopTraverse
module	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      Module *module;$/;"	m	class:corelab::RecursiveFuncAnal
module	include/corelab/CAMP/CAMP.h	/^			Module *module;$/;"	m	class:corelab::CAMPInstaller
module	include/corelab/CAMP/CampCache.h	/^			Module *module;$/;"	m	class:corelab::CAMPCache
module	include/corelab/CAMP/CampExectime.h	/^			Module *module;$/;"	m	class:corelab::CAMPExectime
module	include/corelab/CAMP/ContextTreeBuilder.h	/^			Module *module;$/;"	m	class:corelab::ContextTreeBuilder
module	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			Module *module;$/;"	m	class:corelab::RegiInterIterDepFinder
module	include/corelab/ObjTrace/CtxObjtrace.h	/^			Module *module;$/;"	m	class:corelab::CtxObjtrace
module	include/corelab/ObjTrace/ObjTrace.h	/^      Module *module;$/;"	m	class:corelab::ObjTrace
module	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			Module *module;$/;"	m	class:corelab::IndirectCallAnal
module	lib/AliasAnalysis/LoopTraverse.hpp	/^      Module *module;$/;"	m	class:corelab::LoopTraverse
module	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      Module *module;$/;"	m	class:corelab::RecursiveFuncAnal
module	lib/CAMP/CAMP.h	/^			Module *module;$/;"	m	class:corelab::CAMPInstaller
module	lib/CAMP/CampCache.h	/^			Module *module;$/;"	m	class:corelab::CAMPCache
module	lib/CAMP/CampExectime.h	/^			Module *module;$/;"	m	class:corelab::CAMPExectime
module	lib/CAMP/ContextTreeBuilder.h	/^			Module *module;$/;"	m	class:corelab::ContextTreeBuilder
module	lib/CAMP/RegiInterIterDepFinder.h	/^			Module *module;$/;"	m	class:corelab::RegiInterIterDepFinder
module	lib/ObjTrace/CtxObjtrace.h	/^			Module *module;$/;"	m	class:corelab::CtxObjtrace
module	lib/ObjTrace/ObjTrace.h	/^      Module *module;$/;"	m	class:corelab::ObjTrace
multipleAlternatives	include/IR/InlineAsm.h	/^    SubConstraintInfoVector multipleAlternatives;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
mutable_begin	include/IR/Metadata.h	/^  MDOperand *mutable_begin() { return mutable_end() - NumOperands; }$/;"	f	class:llvm::MDNode
mutable_end	include/IR/Metadata.h	/^  MDOperand *mutable_end() { return reinterpret_cast<MDOperand *>(this); }$/;"	f	class:llvm::MDNode
mutable_op_range	include/IR/Metadata.h	/^  typedef iterator_range<MDOperand *> mutable_op_range;$/;"	t	class:llvm::MDNode
mutable_operands	include/IR/Metadata.h	/^  mutable_op_range mutable_operands() {$/;"	f	class:llvm::MDNode
mutateType	include/IR/Value.h	/^  void mutateType(Type *Ty) {$/;"	f	class:llvm::Value
mutex_type	include/IR/ValueMap.h	/^  typedef MutexT mutex_type;$/;"	t	struct:llvm::ValueMapConfig
nCallSiteNode	include/corelab/CAMP/ContextTreeBuilder.h	/^			unsigned nCallSiteNode;$/;"	m	class:corelab::ContextTreeBuilder
nCallSiteNode	lib/CAMP/ContextTreeBuilder.h	/^			unsigned nCallSiteNode;$/;"	m	class:corelab::ContextTreeBuilder
nLoadInvo	tools/campSampling/campRuntime.cpp	/^static uint64_t nLoadInvo; \/\/sampling ratio stat$/;"	v	file:
nLoopCarriedDepMap	include/corelab/CAMP/RegiInterIterDepFinder.h	/^			NumLoopCarriedDepMap nLoopCarriedDepMap;$/;"	m	class:corelab::RegiInterIterDepFinder
nLoopCarriedDepMap	lib/CAMP/RegiInterIterDepFinder.h	/^			NumLoopCarriedDepMap nLoopCarriedDepMap;$/;"	m	class:corelab::RegiInterIterDepFinder
nLoopNode	include/corelab/CAMP/ContextTreeBuilder.h	/^			unsigned nLoopNode;$/;"	m	class:corelab::ContextTreeBuilder
nLoopNode	lib/CAMP/ContextTreeBuilder.h	/^			unsigned nLoopNode;$/;"	m	class:corelab::ContextTreeBuilder
nSampledLoadInvo	tools/campSampling/campRuntime.cpp	/^static uint64_t nSampledLoadInvo; \/\/sampling ratio stat$/;"	v	file:
nSampledStoreInvo	tools/campSampling/campRuntime.cpp	/^static uint64_t nSampledStoreInvo; \/\/sampling ratio stat$/;"	v	file:
nStoreInvo	tools/campSampling/campRuntime.cpp	/^static uint64_t nStoreInvo; \/\/sampling ratio stat$/;"	v	file:
name	include/IR/Dominators.h	/^  static StringRef name() { return "DominatorTreeAnalysis"; }$/;"	f	class:llvm::DominatorTreeAnalysis
name	include/IR/Dominators.h	/^  static StringRef name() { return "DominatorTreePrinterPass"; }$/;"	f	class:llvm::DominatorTreePrinterPass
name	include/IR/Dominators.h	/^  static StringRef name() { return "DominatorTreeVerifierPass"; }$/;"	f	struct:llvm::DominatorTreeVerifierPass
name	include/IR/IRPrintingPasses.h	/^  static StringRef name() { return "PrintFunctionPass"; }$/;"	f	class:llvm::PrintFunctionPass
name	include/IR/IRPrintingPasses.h	/^  static StringRef name() { return "PrintModulePass"; }$/;"	f	class:llvm::PrintModulePass
name	include/IR/PassManager.h	/^  static StringRef name() { return "FunctionAnalysisManagerModuleProxy"; }$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy
name	include/IR/PassManager.h	/^  static StringRef name() { return "InvalidateAllAnalysesPass"; }$/;"	f	struct:llvm::InvalidateAllAnalysesPass
name	include/IR/PassManager.h	/^  static StringRef name() { return "InvalidateAnalysisPass"; }$/;"	f	struct:llvm::InvalidateAnalysisPass
name	include/IR/PassManager.h	/^  static StringRef name() { return "ModuleAnalysisManagerFunctionProxy"; }$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy
name	include/IR/PassManager.h	/^  static StringRef name() { return "ModuleToFunctionPassAdaptor"; }$/;"	f	class:llvm::ModuleToFunctionPassAdaptor
name	include/IR/PassManager.h	/^  static StringRef name() { return "PassManager"; }$/;"	f	class:llvm::PassManager
name	include/IR/PassManager.h	/^  static StringRef name() { return "RequireAnalysisPass"; }$/;"	f	struct:llvm::RequireAnalysisPass
name	include/IR/Verifier.h	/^  static StringRef name() { return "VerifierPass"; }$/;"	f	class:llvm::VerifierPass
name	include/corelab/Metadata/Metadata.h	/^		const char* name;$/;"	m	struct:corelab::__anon6
name	include/corelab/Metadata/NamedMetadata.h	/^				char name[256];$/;"	m	struct:corelab::EsperantoNamer::DeviceEntry
named_metadata	include/IR/Module.h	/^  iterator_range<const_named_metadata_iterator> named_metadata() const {$/;"	f	class:llvm::Module
named_metadata	include/IR/Module.h	/^  iterator_range<named_metadata_iterator> named_metadata() {$/;"	f	class:llvm::Module
named_metadata_begin	include/IR/Module.h	/^  const_named_metadata_iterator named_metadata_begin() const {$/;"	f	class:llvm::Module
named_metadata_begin	include/IR/Module.h	/^  named_metadata_iterator named_metadata_begin() { return NamedMDList.begin(); }$/;"	f	class:llvm::Module
named_metadata_empty	include/IR/Module.h	/^  bool named_metadata_empty() const { return NamedMDList.empty(); }$/;"	f	class:llvm::Module
named_metadata_end	include/IR/Module.h	/^  const_named_metadata_iterator named_metadata_end() const {$/;"	f	class:llvm::Module
named_metadata_end	include/IR/Module.h	/^  named_metadata_iterator named_metadata_end() { return NamedMDList.end(); }$/;"	f	class:llvm::Module
named_metadata_iterator	include/IR/Module.h	/^  typedef NamedMDListType::iterator             named_metadata_iterator;$/;"	t	class:llvm::Module
named_metadata_size	include/IR/Module.h	/^  size_t named_metadata_size() const { return NamedMDList.size();  }$/;"	f	class:llvm::Module
nanosleep	tools/camp/x86timer.hpp	/^void nanosleep(uint64_t nanoseconds)$/;"	f	class:x86timer
nanosleep	tools/objtrace/x86timer.hpp	/^void nanosleep(uint64_t nanoseconds)$/;"	f	class:x86timer
needsUnwindTableEntry	include/IR/Function.h	/^  bool needsUnwindTableEntry() const {$/;"	f	class:llvm::Function
neg_match	include/IR/PatternMatch.h	/^  neg_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::neg_match
neg_match	include/IR/PatternMatch.h	/^template <typename LHS_t> struct neg_match {$/;"	s	namespace:llvm::PatternMatch
nestingDepth	tools/camp/campExecRuntime.cpp	/^static unsigned nestingDepth;$/;"	v	file:
nestingDepth	tools/objtrace/ctxObjtraceRuntime.cpp	/^static unsigned nestingDepth;$/;"	v	file:
noInfs	include/IR/Operator.h	/^  bool noInfs()          { return 0 != (Flags & NoInfs); }$/;"	f	class:llvm::FastMathFlags
noNaNs	include/IR/Operator.h	/^  bool noNaNs()          { return 0 != (Flags & NoNaNs); }$/;"	f	class:llvm::FastMathFlags
noSignedZeros	include/IR/Operator.h	/^  bool noSignedZeros()   { return 0 != (Flags & NoSignedZeros); }$/;"	f	class:llvm::FastMathFlags
nodes_begin	include/IR/CFG.h	/^  static nodes_iterator nodes_begin(Function *F) { return F->begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_begin	include/IR/CFG.h	/^  static nodes_iterator nodes_begin(const Function *F) { return F->begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_begin	include/IR/Dominators.h	/^  static nodes_iterator nodes_begin(DomTreeNode *N) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	include/IR/Dominators.h	/^  static nodes_iterator nodes_begin(DominatorTree *N) {$/;"	f	struct:llvm::GraphTraits
nodes_end	include/IR/CFG.h	/^  static nodes_iterator nodes_end  (Function *F) { return F->end(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	include/IR/CFG.h	/^  static nodes_iterator nodes_end  (const Function *F) { return F->end(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	include/IR/Dominators.h	/^  static nodes_iterator nodes_end(DomTreeNode *N) {$/;"	f	struct:llvm::GraphTraits
nodes_end	include/IR/Dominators.h	/^  static nodes_iterator nodes_end(DominatorTree *N) {$/;"	f	struct:llvm::GraphTraits
nodes_iterator	include/IR/CFG.h	/^  typedef Function::const_iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	include/IR/CFG.h	/^  typedef Function::iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	include/IR/Dominators.h	/^  typedef df_iterator<DomTreeNode*> nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nonRecFuncList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      NonRecursiveFuncList nonRecFuncList;$/;"	m	class:corelab::RecursiveFuncAnal
nonRecFuncList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      NonRecursiveFuncList nonRecFuncList;$/;"	m	class:corelab::RecursiveFuncAnal
none	include/IR/PassManager.h	/^  static PreservedAnalyses none() { return PreservedAnalyses(); }$/;"	f	class:llvm::PreservedAnalyses
not_intrinsic	include/IR/Intrinsics.h	/^    not_intrinsic = 0,   \/\/ Must be zero$/;"	e	enum:llvm::Intrinsic::ID
not_match	include/IR/PatternMatch.h	/^  not_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::not_match
not_match	include/IR/PatternMatch.h	/^template <typename LHS_t> struct not_match {$/;"	s	namespace:llvm::PatternMatch
noteHead	include/IR/BasicBlock.h	/^  static void noteHead(BasicBlock*, BasicBlock*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	include/IR/Function.h	/^  static void noteHead(Argument*, Argument*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	include/IR/Instruction.h	/^  static void noteHead(Instruction *, Instruction *) {}$/;"	f	struct:llvm::ilist_traits
noteHead	include/IR/Module.h	/^  static void noteHead(Function*, Function*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	include/IR/Module.h	/^  static void noteHead(GlobalAlias*, GlobalAlias*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	include/IR/Module.h	/^  static void noteHead(GlobalVariable*, GlobalVariable*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	include/IR/Module.h	/^  static void noteHead(NamedMDNode*, NamedMDNode*) {}$/;"	f	struct:llvm::ilist_traits
now	tools/camp/x86timer.hpp	/^double now()$/;"	f	class:x86timer
now	tools/objtrace/x86timer.hpp	/^double now()$/;"	f	class:x86timer
numBBs	include/corelab/Metadata/LoadNamer.h	/^			size_t numBBs;$/;"	m	class:corelab::LoadNamer
numCallArgs	include/IR/Statepoint.h	/^  int numCallArgs() {$/;"	f	class:llvm::StatepointBase
numCalls	include/corelab/Metadata/LoadNamer.h	/^			size_t numCalls;$/;"	m	class:corelab::LoadNamer
numContexts	include/corelab/Metadata/LoadNamer.h	/^			size_t numContexts;$/;"	m	class:corelab::LoadNamer
numDuplicationOnPathToRoot	lib/CAMP/ContextTreeBuilder.cpp	/^unsigned ContextTree::numDuplicationOnPathToRoot(bool isCallSiteCmp, const Instruction *instCmp, CntxID cntxIDCmp){$/;"	f	class:ContextTree
numFuncs	include/corelab/Metadata/LoadNamer.h	/^			size_t numFuncs;$/;"	m	class:corelab::LoadNamer
numLoads	include/corelab/Metadata/LoadNamer.h	/^			size_t numLoads;$/;"	m	class:corelab::LoadNamer
numLoops	include/corelab/Metadata/LoadNamer.h	/^			size_t numLoops;$/;"	m	class:corelab::LoadNamer
numStores	include/corelab/Metadata/LoadNamer.h	/^			size_t numStores;$/;"	m	class:corelab::LoadNamer
numTotalVMSArgs	include/IR/Statepoint.h	/^  int numTotalVMSArgs() {$/;"	f	class:llvm::StatepointBase
num_intrinsics	include/IR/Intrinsics.h	/^    , num_intrinsics$/;"	e	enum:llvm::Intrinsic::ID
objTraceCalloc	include/corelab/ObjTrace/ObjTrace.h	/^      Constant *objTraceCalloc;$/;"	m	class:corelab::ObjTrace
objTraceCalloc	lib/ObjTrace/ObjTrace.h	/^      Constant *objTraceCalloc;$/;"	m	class:corelab::ObjTrace
objTraceCalloc	tools/objtrace/objtraceruntime.cpp	/^objTraceCalloc (size_t num, size_t size, FullID fullId){$/;"	f
objTraceFinalize	include/corelab/ObjTrace/ObjTrace.h	/^      Constant *objTraceFinalize;$/;"	m	class:corelab::ObjTrace
objTraceFinalize	lib/ObjTrace/ObjTrace.h	/^      Constant *objTraceFinalize;$/;"	m	class:corelab::ObjTrace
objTraceFinalize	tools/objtrace/objtraceruntime.cpp	/^void objTraceFinalize () {$/;"	f
objTraceFree	include/corelab/ObjTrace/ObjTrace.h	/^      Constant *objTraceFree;$/;"	m	class:corelab::ObjTrace
objTraceFree	lib/ObjTrace/ObjTrace.h	/^      Constant *objTraceFree;$/;"	m	class:corelab::ObjTrace
objTraceFree	tools/objtrace/objtraceruntime.cpp	/^objTraceFree (void* addr, FullID fullId){$/;"	f
objTraceInitialize	include/corelab/ObjTrace/ObjTrace.h	/^      Constant *objTraceInitialize;$/;"	m	class:corelab::ObjTrace
objTraceInitialize	lib/ObjTrace/ObjTrace.h	/^      Constant *objTraceInitialize;$/;"	m	class:corelab::ObjTrace
objTraceInitialize	tools/objtrace/objtraceruntime.cpp	/^void objTraceInitialize () {$/;"	f
objTraceLoadInstr	include/corelab/ObjTrace/ObjTrace.h	/^      Constant *objTraceLoadInstr;$/;"	m	class:corelab::ObjTrace
objTraceLoadInstr	lib/ObjTrace/ObjTrace.h	/^      Constant *objTraceLoadInstr;$/;"	m	class:corelab::ObjTrace
objTraceLoadInstr	tools/objtrace/objtraceruntime.cpp	/^void objTraceLoadInstr (void* addr, FullID fullId) {$/;"	f
objTraceMalloc	include/corelab/ObjTrace/ObjTrace.h	/^      Constant *objTraceMalloc;$/;"	m	class:corelab::ObjTrace
objTraceMalloc	lib/ObjTrace/ObjTrace.h	/^      Constant *objTraceMalloc;$/;"	m	class:corelab::ObjTrace
objTraceMalloc	tools/objtrace/objtraceruntime.cpp	/^objTraceMalloc (size_t size, FullID fullId){$/;"	f
objTraceRealloc	include/corelab/ObjTrace/ObjTrace.h	/^      Constant *objTraceRealloc;$/;"	m	class:corelab::ObjTrace
objTraceRealloc	lib/ObjTrace/ObjTrace.h	/^      Constant *objTraceRealloc;$/;"	m	class:corelab::ObjTrace
objTraceRealloc	tools/objtrace/objtraceruntime.cpp	/^objTraceRealloc (void* addr, size_t size, FullID fullId){$/;"	f
objTraceStoreInstr	include/corelab/ObjTrace/ObjTrace.h	/^      Constant *objTraceStoreInstr;$/;"	m	class:corelab::ObjTrace
objTraceStoreInstr	lib/ObjTrace/ObjTrace.h	/^      Constant *objTraceStoreInstr;$/;"	m	class:corelab::ObjTrace
objTraceStoreInstr	tools/objtrace/objtraceruntime.cpp	/^void objTraceStoreInstr (void* addr, FullID fullId) {$/;"	f
ofmax_pred_ty	include/IR/PatternMatch.h	/^struct ofmax_pred_ty {$/;"	s	namespace:llvm::PatternMatch
ofmin_pred_ty	include/IR/PatternMatch.h	/^struct ofmin_pred_ty {$/;"	s	namespace:llvm::PatternMatch
onDelete	include/IR/ValueMap.h	/^  static void onDelete(const ExtraDataT &\/*Data*\/, KeyT \/*Old*\/) {}$/;"	f	struct:llvm::ValueMapConfig
onRAUW	include/IR/ValueMap.h	/^  static void onRAUW(const ExtraDataT & \/*Data*\/, KeyT \/*Old*\/, KeyT \/*New*\/) {}$/;"	f	struct:llvm::ValueMapConfig
oneDigitTag	include/IR/Use.h	/^  enum PrevPtrTag { zeroDigitTag, oneDigitTag, stopTag, fullStopTag };$/;"	e	enum:llvm::Use::PrevPtrTag
onlyReadsMemory	include/IR/CallSite.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::CallSiteBase
onlyReadsMemory	include/IR/CallSite.h	/^  bool onlyReadsMemory(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
onlyReadsMemory	include/IR/Function.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::Function
onlyReadsMemory	include/IR/Function.h	/^  bool onlyReadsMemory(unsigned n) const {$/;"	f	class:llvm::Function
onlyReadsMemory	include/IR/Instructions.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::CallInst
onlyReadsMemory	include/IR/Instructions.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::InvokeInst
op_begin	include/IR/Metadata.h	/^  const_op_iterator op_begin() const { return const_op_iterator(this, 0); }$/;"	f	class:llvm::NamedMDNode
op_begin	include/IR/Metadata.h	/^  op_iterator op_begin() const {$/;"	f	class:llvm::MDNode
op_begin	include/IR/Metadata.h	/^  op_iterator op_begin() { return op_iterator(this, 0); }$/;"	f	class:llvm::NamedMDNode
op_begin	include/IR/OperandTraits.h	/^  static Use *op_begin(SubClass* U) {$/;"	f	struct:llvm::FixedNumOperandTraits
op_begin	include/IR/OperandTraits.h	/^  static Use *op_begin(SubClass* U) {$/;"	f	struct:llvm::VariadicOperandTraits
op_begin	include/IR/OperandTraits.h	/^  static Use *op_begin(User* U) {$/;"	f	struct:llvm::HungoffOperandTraits
op_begin	include/IR/User.h	/^  inline const_op_iterator op_begin() const { return OperandList; }$/;"	f	class:llvm::User
op_begin	include/IR/User.h	/^  inline op_iterator       op_begin()       { return OperandList; }$/;"	f	class:llvm::User
op_end	include/IR/Metadata.h	/^  const_op_iterator op_end()   const { return const_op_iterator(this, getNumOperands()); }$/;"	f	class:llvm::NamedMDNode
op_end	include/IR/Metadata.h	/^  op_iterator op_end()   { return op_iterator(this, getNumOperands()); }$/;"	f	class:llvm::NamedMDNode
op_end	include/IR/Metadata.h	/^  op_iterator op_end() const {$/;"	f	class:llvm::MDNode
op_end	include/IR/OperandTraits.h	/^  static Use *op_end(SubClass* U) {$/;"	f	struct:llvm::FixedNumOperandTraits
op_end	include/IR/OperandTraits.h	/^  static Use *op_end(SubClass* U) {$/;"	f	struct:llvm::VariadicOperandTraits
op_end	include/IR/OperandTraits.h	/^  static Use *op_end(User* U) {$/;"	f	struct:llvm::HungoffOperandTraits
op_end	include/IR/User.h	/^  inline const_op_iterator op_end()   const { return OperandList+NumOperands; }$/;"	f	class:llvm::User
op_end	include/IR/User.h	/^  inline op_iterator       op_end()         { return OperandList+NumOperands; }$/;"	f	class:llvm::User
op_iterator	include/IR/Metadata.h	/^  typedef const MDOperand *op_iterator;$/;"	t	class:llvm::MDNode
op_iterator	include/IR/Metadata.h	/^  typedef op_iterator_impl<MDNode *, MDNode> op_iterator;$/;"	t	class:llvm::NamedMDNode
op_iterator	include/IR/User.h	/^  typedef Use*       op_iterator;$/;"	t	class:llvm::User
op_iterator_impl	include/IR/Metadata.h	/^    op_iterator_impl() : Node(nullptr), Idx(0) { }$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
op_iterator_impl	include/IR/Metadata.h	/^    op_iterator_impl(const NamedMDNode *N, unsigned i) : Node(N), Idx(i) { }$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
op_iterator_impl	include/IR/Metadata.h	/^  class op_iterator_impl :$/;"	c	class:llvm::NamedMDNode
op_range	include/IR/Metadata.h	/^  typedef iterator_range<op_iterator> op_range;$/;"	t	class:llvm::MDNode
op_range	include/IR/User.h	/^  typedef iterator_range<op_iterator> op_range;$/;"	t	class:llvm::User
operand_values	include/IR/User.h	/^  inline iterator_range<value_op_iterator> operand_values() {$/;"	f	class:llvm::User
operands	include/IR/Metadata.h	/^  inline iterator_range<const_op_iterator> operands() const {$/;"	f	class:llvm::NamedMDNode
operands	include/IR/Metadata.h	/^  inline iterator_range<op_iterator>  operands() {$/;"	f	class:llvm::NamedMDNode
operands	include/IR/Metadata.h	/^  op_range operands() const { return op_range(op_begin(), op_end()); }$/;"	f	class:llvm::MDNode
operands	include/IR/OperandTraits.h	/^  static unsigned operands(const User *U) {$/;"	f	struct:llvm::HungoffOperandTraits
operands	include/IR/OperandTraits.h	/^  static unsigned operands(const User *U) {$/;"	f	struct:llvm::OptionalOperandTraits
operands	include/IR/OperandTraits.h	/^  static unsigned operands(const User *U) {$/;"	f	struct:llvm::VariadicOperandTraits
operands	include/IR/OperandTraits.h	/^  static unsigned operands(const User*) {$/;"	f	struct:llvm::FixedNumOperandTraits
operands	include/IR/User.h	/^  inline const_op_range operands() const {$/;"	f	class:llvm::User
operands	include/IR/User.h	/^  inline op_range operands() {$/;"	f	class:llvm::User
operator !=	include/IR/Attributes.h	/^  bool operator!=(Attribute A) const { return pImpl != A.pImpl; }$/;"	f	class:llvm::Attribute
operator !=	include/IR/Attributes.h	/^  bool operator!=(const AttrBuilder &B) {$/;"	f	class:llvm::AttrBuilder
operator !=	include/IR/Attributes.h	/^  bool operator!=(const AttributeSet &RHS) const {$/;"	f	class:llvm::AttributeSet
operator !=	include/IR/CFG.h	/^  inline bool operator!=(const Self& x) const { return !operator==(x); }$/;"	f	class:llvm::PredIterator
operator !=	include/IR/CFG.h	/^  inline bool operator!=(const Self& x) const { return !operator==(x); }$/;"	f	class:llvm::SuccIterator
operator !=	include/IR/CallSite.h	/^  bool operator!=(const CallSite &CS) const { return I != CS.I; }$/;"	f	class:llvm::CallSite
operator !=	include/IR/ConstantRange.h	/^  bool operator!=(const ConstantRange &CR) const {$/;"	f	class:llvm::ConstantRange
operator !=	include/IR/DataLayout.h	/^  bool operator!=(const DataLayout &Other) const { return !(*this == Other); }$/;"	f	class:llvm::DataLayout
operator !=	include/IR/DebugInfo.h	/^    bool operator!=(const iterator &X) const { return !(*this == X); }$/;"	f	class:llvm::DIExpression::iterator
operator !=	include/IR/DebugInfo.h	/^  bool operator!=(DIDescriptor Other) const { return !operator==(Other); }$/;"	f	class:llvm::DIDescriptor
operator !=	include/IR/DebugInfo.h	/^  bool operator!=(const DIHeaderFieldIterator &X) const {$/;"	f	class:llvm::DIHeaderFieldIterator
operator !=	include/IR/DebugInfoMetadata.h	/^    bool operator!=(const expr_op_iterator &X) const {$/;"	f	class:llvm::MDExpression::expr_op_iterator
operator !=	include/IR/DebugLoc.h	/^    bool operator!=(const DebugLoc &DL) const { return Loc != DL.Loc; }$/;"	f	class:llvm::DebugLoc
operator !=	include/IR/GetElementPtrTypeIterator.h	/^    bool operator!=(const generic_gep_type_iterator& x) const {$/;"	f	class:llvm::generic_gep_type_iterator
operator !=	include/IR/InstIterator.h	/^  inline bool operator!=(const InstIterator& y) const {$/;"	f	class:llvm::InstIterator
operator !=	include/IR/Instructions.h	/^    bool operator!=(const Self& RHS) const {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator !=	include/IR/Metadata.h	/^    bool operator!=(const op_iterator_impl &o) const { return Idx != o.Idx; }$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
operator !=	include/IR/Metadata.h	/^  bool operator!=(const AAMDNodes &A) const { return !(*this == A); }$/;"	f	struct:llvm::AAMDNodes
operator !=	include/IR/TrackingMDRef.h	/^  bool operator!=(const TrackingMDRef &X) const { return MD != X.MD; }$/;"	f	class:llvm::TrackingMDRef
operator !=	include/IR/TrackingMDRef.h	/^  bool operator!=(const TypedTrackingMDRef &X) const { return Ref != X.Ref; }$/;"	f	class:llvm::TypedTrackingMDRef
operator !=	include/IR/Value.h	/^    bool operator!=(const use_iterator_impl &x) const { return !operator==(x); }$/;"	f	class:llvm::Value::use_iterator_impl
operator !=	include/IR/Value.h	/^    bool operator!=(const user_iterator_impl &x) const { return !operator==(x); }$/;"	f	class:llvm::Value::user_iterator_impl
operator !=	include/IR/ValueMap.h	/^  bool operator!=(const ValueMapConstIterator &RHS) const {$/;"	f	class:llvm::ValueMapConstIterator
operator !=	include/IR/ValueMap.h	/^  bool operator!=(const ValueMapIterator &RHS) const {$/;"	f	class:llvm::ValueMapIterator
operator !=	include/corelab/Metadata/NamedMetadata.h	/^			bool operator!=(const DeviceMapEntry& source) const{$/;"	f	class:corelab::DeviceMapEntry
operator &=	include/IR/Operator.h	/^  void operator&=(const FastMathFlags &OtherFlags) {$/;"	f	class:llvm::FastMathFlags
operator ()	include/IR/LegacyPassNameParser.h	/^  bool operator()(const PassInfo &P) const {$/;"	f	class:llvm::PassArgFilter
operator ()	include/IR/Metadata.h	/^void TempMDNodeDeleter::operator()(MDNode *Node) const {$/;"	f	class:llvm::TempMDNodeDeleter
operator *	include/IR/CFG.h	/^  inline reference operator*() const { return Term->getSuccessor(idx); }$/;"	f	class:llvm::SuccIterator
operator *	include/IR/CFG.h	/^  inline reference operator*() const {$/;"	f	class:llvm::PredIterator
operator *	include/IR/DebugInfo.h	/^    const Operand &operator*() { return Tmp = Operand(I); }$/;"	f	class:llvm::DIExpression::iterator
operator *	include/IR/DebugInfo.h	/^  MDBasicType &operator*() const {$/;"	f	class:llvm::DIBasicType
operator *	include/IR/DebugInfo.h	/^  MDCompileUnit &operator*() const {$/;"	f	class:llvm::DICompileUnit
operator *	include/IR/DebugInfo.h	/^  MDCompositeTypeBase &operator*() const {$/;"	f	class:llvm::DICompositeType
operator *	include/IR/DebugInfo.h	/^  MDDerivedTypeBase &operator*() const {$/;"	f	class:llvm::DIDerivedType
operator *	include/IR/DebugInfo.h	/^  MDEnumerator &operator*() const {$/;"	f	class:llvm::DIEnumerator
operator *	include/IR/DebugInfo.h	/^  MDExpression &operator*() const {$/;"	f	class:llvm::DIExpression
operator *	include/IR/DebugInfo.h	/^  MDFile &operator*() const {$/;"	f	class:llvm::DIFile
operator *	include/IR/DebugInfo.h	/^  MDGlobalVariable &operator*() const {$/;"	f	class:llvm::DIGlobalVariable
operator *	include/IR/DebugInfo.h	/^  MDImportedEntity &operator*() const {$/;"	f	class:llvm::DIImportedEntity
operator *	include/IR/DebugInfo.h	/^  MDLexicalBlockBase &operator*() const {$/;"	f	class:llvm::DILexicalBlock
operator *	include/IR/DebugInfo.h	/^  MDLexicalBlockFile &operator*() const {$/;"	f	class:llvm::DILexicalBlockFile
operator *	include/IR/DebugInfo.h	/^  MDLocalVariable &operator*() const {$/;"	f	class:llvm::DIVariable
operator *	include/IR/DebugInfo.h	/^  MDLocation &operator*() const {$/;"	f	class:llvm::DILocation
operator *	include/IR/DebugInfo.h	/^  MDNamespace &operator*() const {$/;"	f	class:llvm::DINameSpace
operator *	include/IR/DebugInfo.h	/^  MDNode &operator*() const {$/;"	f	class:llvm::DIDescriptor
operator *	include/IR/DebugInfo.h	/^  MDObjCProperty &operator*() const {$/;"	f	class:llvm::DIObjCProperty
operator *	include/IR/DebugInfo.h	/^  MDScope &operator*() const {$/;"	f	class:llvm::DIScope
operator *	include/IR/DebugInfo.h	/^  MDSubprogram &operator*() const {$/;"	f	class:llvm::DISubprogram
operator *	include/IR/DebugInfo.h	/^  MDSubrange &operator*() const {$/;"	f	class:llvm::DISubrange
operator *	include/IR/DebugInfo.h	/^  MDSubroutineType &operator*() const {$/;"	f	class:llvm::DISubroutineType
operator *	include/IR/DebugInfo.h	/^  MDTemplateTypeParameter &operator*() const {$/;"	f	class:llvm::DITemplateTypeParameter
operator *	include/IR/DebugInfo.h	/^  MDTemplateValueParameter &operator*() const {$/;"	f	class:llvm::DITemplateValueParameter
operator *	include/IR/DebugInfo.h	/^  MDType &operator*() const {$/;"	f	class:llvm::DIType
operator *	include/IR/DebugInfo.h	/^  StringRef operator*() const { return Current; }$/;"	f	class:llvm::DIHeaderFieldIterator
operator *	include/IR/DebugInfoMetadata.h	/^    const ExprOperand &operator*() const { return Op; }$/;"	f	class:llvm::MDExpression::expr_op_iterator
operator *	include/IR/DebugLoc.h	/^    MDLocation &operator*() const { return *get(); }$/;"	f	class:llvm::DebugLoc
operator *	include/IR/GetElementPtrTypeIterator.h	/^    Type *operator*() const {$/;"	f	class:llvm::generic_gep_type_iterator
operator *	include/IR/InstIterator.h	/^  inline reference operator*()  const { return *BI; }$/;"	f	class:llvm::InstIterator
operator *	include/IR/Instructions.h	/^    Self &operator*() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator *	include/IR/Metadata.h	/^    T1 operator*() const { return Node->getOperand(Idx); }$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
operator *	include/IR/Metadata.h	/^  Metadata &operator*() const { return *get(); }$/;"	f	class:llvm::MDOperand
operator *	include/IR/TrackingMDRef.h	/^  Metadata &operator*() const { return *get(); }$/;"	f	class:llvm::TrackingMDRef
operator *	include/IR/TrackingMDRef.h	/^  T &operator*() const { return *get(); }$/;"	f	class:llvm::TypedTrackingMDRef
operator *	include/IR/User.h	/^    Value *operator*() const { return *I; }$/;"	f	struct:llvm::User::value_op_iterator
operator *	include/IR/Value.h	/^    UseT &operator*() const {$/;"	f	class:llvm::Value::use_iterator_impl
operator *	include/IR/Value.h	/^    UserTy *operator*() const {$/;"	f	class:llvm::Value::user_iterator_impl
operator *	include/IR/ValueHandle.h	/^  Value &operator*() const { return *V; }$/;"	f	class:llvm::ValueHandleBase
operator *	include/IR/ValueHandle.h	/^  ValueTy &operator*() const { return *getValPtr(); }$/;"	f	class:llvm::AssertingVH
operator *	include/IR/ValueHandle.h	/^  ValueTy &operator*() const { return *getValPtr(); }$/;"	f	class:llvm::TrackingVH
operator *	include/IR/ValueMap.h	/^  ValueTypeProxy operator*() const {$/;"	f	class:llvm::ValueMapConstIterator
operator *	include/IR/ValueMap.h	/^  ValueTypeProxy operator*() const {$/;"	f	class:llvm::ValueMapIterator
operator +	include/IR/CFG.h	/^  inline Self operator+(int Right) const {$/;"	f	class:llvm::SuccIterator
operator ++	include/IR/CFG.h	/^  inline Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::PredIterator
operator ++	include/IR/CFG.h	/^  inline Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::SuccIterator
operator ++	include/IR/CFG.h	/^  inline Self& operator++() {   \/\/ Preincrement$/;"	f	class:llvm::PredIterator
operator ++	include/IR/CFG.h	/^  inline Self& operator++() { ++idx; return *this; } \/\/ Preincrement$/;"	f	class:llvm::SuccIterator
operator ++	include/IR/DebugInfo.h	/^    iterator &operator++() {$/;"	f	class:llvm::DIExpression::iterator
operator ++	include/IR/DebugInfo.h	/^    iterator operator++(int) {$/;"	f	class:llvm::DIExpression::iterator
operator ++	include/IR/DebugInfo.h	/^  DIHeaderFieldIterator &operator++() {$/;"	f	class:llvm::DIHeaderFieldIterator
operator ++	include/IR/DebugInfo.h	/^  DIHeaderFieldIterator operator++(int) {$/;"	f	class:llvm::DIHeaderFieldIterator
operator ++	include/IR/DebugInfoMetadata.h	/^    expr_op_iterator &operator++() {$/;"	f	class:llvm::MDExpression::expr_op_iterator
operator ++	include/IR/DebugInfoMetadata.h	/^    expr_op_iterator operator++(int) {$/;"	f	class:llvm::MDExpression::expr_op_iterator
operator ++	include/IR/GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::generic_gep_type_iterator
operator ++	include/IR/GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator& operator++() {   \/\/ Preincrement$/;"	f	class:llvm::generic_gep_type_iterator
operator ++	include/IR/InstIterator.h	/^  InstIterator& operator++() {$/;"	f	class:llvm::InstIterator
operator ++	include/IR/InstIterator.h	/^  inline InstIterator operator++(int) {$/;"	f	class:llvm::InstIterator
operator ++	include/IR/Instructions.h	/^    Self operator++() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator ++	include/IR/Instructions.h	/^    Self operator++(int) {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator ++	include/IR/Metadata.h	/^    op_iterator_impl &operator++() {$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
operator ++	include/IR/Metadata.h	/^    op_iterator_impl operator++(int) {$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
operator ++	include/IR/Value.h	/^    use_iterator_impl &operator++() { \/\/ Preincrement$/;"	f	class:llvm::Value::use_iterator_impl
operator ++	include/IR/Value.h	/^    use_iterator_impl operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::Value::use_iterator_impl
operator ++	include/IR/Value.h	/^    user_iterator_impl &operator++() { \/\/ Preincrement$/;"	f	class:llvm::Value::user_iterator_impl
operator ++	include/IR/Value.h	/^    user_iterator_impl operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::Value::user_iterator_impl
operator ++	include/IR/ValueMap.h	/^  ValueMapConstIterator operator++(int) {  \/\/ Postincrement$/;"	f	class:llvm::ValueMapConstIterator
operator ++	include/IR/ValueMap.h	/^  ValueMapIterator operator++(int) {  \/\/ Postincrement$/;"	f	class:llvm::ValueMapIterator
operator ++	include/IR/ValueMap.h	/^  inline ValueMapConstIterator& operator++() {  \/\/ Preincrement$/;"	f	class:llvm::ValueMapConstIterator
operator ++	include/IR/ValueMap.h	/^  inline ValueMapIterator& operator++() {  \/\/ Preincrement$/;"	f	class:llvm::ValueMapIterator
operator +=	include/IR/CFG.h	/^  inline Self& operator+=(int Right) {$/;"	f	class:llvm::SuccIterator
operator -	include/IR/CFG.h	/^  inline Self operator-(int Right) const {$/;"	f	class:llvm::SuccIterator
operator -	include/IR/CFG.h	/^  inline int operator-(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator --	include/IR/CFG.h	/^  inline Self operator--(int) { \/\/ Postdecrement$/;"	f	class:llvm::SuccIterator
operator --	include/IR/CFG.h	/^  inline Self& operator--() { --idx; return *this; }  \/\/ Predecrement$/;"	f	class:llvm::SuccIterator
operator --	include/IR/InstIterator.h	/^  InstIterator& operator--() {$/;"	f	class:llvm::InstIterator
operator --	include/IR/InstIterator.h	/^  inline InstIterator  operator--(int) {$/;"	f	class:llvm::InstIterator
operator --	include/IR/Instructions.h	/^    Self operator--() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator --	include/IR/Instructions.h	/^    Self operator--(int) {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator --	include/IR/Metadata.h	/^    op_iterator_impl &operator--() {$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
operator --	include/IR/Metadata.h	/^    op_iterator_impl operator--(int) {$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
operator -=	include/IR/CFG.h	/^  inline Self& operator-=(int Right) {$/;"	f	class:llvm::SuccIterator
operator ->	include/IR/CFG.h	/^  inline pointer *operator->() const { return &operator*(); }$/;"	f	class:llvm::PredIterator
operator ->	include/IR/CFG.h	/^  inline pointer operator->() const { return operator*(); }$/;"	f	class:llvm::SuccIterator
operator ->	include/IR/CallSite.h	/^  InstrTy *operator->() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
operator ->	include/IR/DebugInfo.h	/^    const Operand *operator->() { return &(Tmp = Operand(I)); }$/;"	f	class:llvm::DIExpression::iterator
operator ->	include/IR/DebugInfo.h	/^  MDBasicType *operator->() const { return get(); }$/;"	f	class:llvm::DIBasicType
operator ->	include/IR/DebugInfo.h	/^  MDCompileUnit *operator->() const { return get(); }$/;"	f	class:llvm::DICompileUnit
operator ->	include/IR/DebugInfo.h	/^  MDCompositeTypeBase *operator->() const { return get(); }$/;"	f	class:llvm::DICompositeType
operator ->	include/IR/DebugInfo.h	/^  MDDerivedTypeBase *operator->() const { return get(); }$/;"	f	class:llvm::DIDerivedType
operator ->	include/IR/DebugInfo.h	/^  MDEnumerator *operator->() const { return get(); }$/;"	f	class:llvm::DIEnumerator
operator ->	include/IR/DebugInfo.h	/^  MDExpression *operator->() const { return get(); }$/;"	f	class:llvm::DIExpression
operator ->	include/IR/DebugInfo.h	/^  MDFile *operator->() const { return get(); }$/;"	f	class:llvm::DIFile
operator ->	include/IR/DebugInfo.h	/^  MDGlobalVariable *operator->() const { return get(); }$/;"	f	class:llvm::DIGlobalVariable
operator ->	include/IR/DebugInfo.h	/^  MDImportedEntity *operator->() const { return get(); }$/;"	f	class:llvm::DIImportedEntity
operator ->	include/IR/DebugInfo.h	/^  MDLexicalBlockBase *operator->() const { return get(); }$/;"	f	class:llvm::DILexicalBlock
operator ->	include/IR/DebugInfo.h	/^  MDLexicalBlockFile *operator->() const { return get(); }$/;"	f	class:llvm::DILexicalBlockFile
operator ->	include/IR/DebugInfo.h	/^  MDLocalVariable *operator->() const { return get(); }$/;"	f	class:llvm::DIVariable
operator ->	include/IR/DebugInfo.h	/^  MDLocation *operator->() const { return get(); }$/;"	f	class:llvm::DILocation
operator ->	include/IR/DebugInfo.h	/^  MDNamespace *operator->() const { return get(); }$/;"	f	class:llvm::DINameSpace
operator ->	include/IR/DebugInfo.h	/^  MDNode *operator->() const { return get(); }$/;"	f	class:llvm::DIDescriptor
operator ->	include/IR/DebugInfo.h	/^  MDObjCProperty *operator->() const { return get(); }$/;"	f	class:llvm::DIObjCProperty
operator ->	include/IR/DebugInfo.h	/^  MDScope *operator->() const { return get(); }$/;"	f	class:llvm::DIScope
operator ->	include/IR/DebugInfo.h	/^  MDSubprogram *operator->() const { return get(); }$/;"	f	class:llvm::DISubprogram
operator ->	include/IR/DebugInfo.h	/^  MDSubrange *operator->() const { return get(); }$/;"	f	class:llvm::DISubrange
operator ->	include/IR/DebugInfo.h	/^  MDSubroutineType *operator->() const { return get(); }$/;"	f	class:llvm::DISubroutineType
operator ->	include/IR/DebugInfo.h	/^  MDTemplateTypeParameter *operator->() const { return get(); }$/;"	f	class:llvm::DITemplateTypeParameter
operator ->	include/IR/DebugInfo.h	/^  MDTemplateValueParameter *operator->() const { return get(); }$/;"	f	class:llvm::DITemplateValueParameter
operator ->	include/IR/DebugInfo.h	/^  MDType *operator->() const { return get(); }$/;"	f	class:llvm::DIType
operator ->	include/IR/DebugInfo.h	/^  const StringRef *operator->() const { return &Current; }$/;"	f	class:llvm::DIHeaderFieldIterator
operator ->	include/IR/DebugInfoMetadata.h	/^    const ExprOperand *operator->() const { return &Op; }$/;"	f	class:llvm::MDExpression::expr_op_iterator
operator ->	include/IR/DebugLoc.h	/^    MDLocation *operator->() const { return get(); }$/;"	f	class:llvm::DebugLoc
operator ->	include/IR/GetElementPtrTypeIterator.h	/^    Type *operator->() const { return operator*(); }$/;"	f	class:llvm::generic_gep_type_iterator
operator ->	include/IR/InstIterator.h	/^  inline pointer operator->() const { return &operator*(); }$/;"	f	class:llvm::InstIterator
operator ->	include/IR/Metadata.h	/^  Metadata *operator->() const { return get(); }$/;"	f	class:llvm::MDOperand
operator ->	include/IR/TrackingMDRef.h	/^  Metadata *operator->() const { return get(); }$/;"	f	class:llvm::TrackingMDRef
operator ->	include/IR/TrackingMDRef.h	/^  T *operator->() const { return get(); }$/;"	f	class:llvm::TypedTrackingMDRef
operator ->	include/IR/Use.h	/^  Value *operator->() { return Val; }$/;"	f	class:llvm::Use
operator ->	include/IR/Use.h	/^  const Value *operator->() const { return Val; }$/;"	f	class:llvm::Use
operator ->	include/IR/User.h	/^    Value *operator->() const { return operator*(); }$/;"	f	struct:llvm::User::value_op_iterator
operator ->	include/IR/Value.h	/^    UseT *operator->() const { return &operator*(); }$/;"	f	class:llvm::Value::use_iterator_impl
operator ->	include/IR/Value.h	/^    UserTy *operator->() const { return operator*(); }$/;"	f	class:llvm::Value::user_iterator_impl
operator ->	include/IR/ValueHandle.h	/^  Value *operator->() const { return V; }$/;"	f	class:llvm::ValueHandleBase
operator ->	include/IR/ValueHandle.h	/^  ValueTy *operator->() const { return getValPtr(); }$/;"	f	class:llvm::AssertingVH
operator ->	include/IR/ValueHandle.h	/^  ValueTy *operator->() const { return getValPtr(); }$/;"	f	class:llvm::TrackingVH
operator ->	include/IR/ValueMap.h	/^    ValueTypeProxy *operator->() { return this; }$/;"	f	struct:llvm::ValueMapConstIterator::ValueTypeProxy
operator ->	include/IR/ValueMap.h	/^    ValueTypeProxy *operator->() { return this; }$/;"	f	struct:llvm::ValueMapIterator::ValueTypeProxy
operator ->	include/IR/ValueMap.h	/^  ValueTypeProxy operator->() const {$/;"	f	class:llvm::ValueMapConstIterator
operator ->	include/IR/ValueMap.h	/^  ValueTypeProxy operator->() const {$/;"	f	class:llvm::ValueMapIterator
operator <	include/IR/CFG.h	/^  inline bool operator<(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator <	include/IR/CallSite.h	/^  bool operator<(const CallSite &CS) const {$/;"	f	class:llvm::CallSite
operator <	include/corelab/Metadata/NamedMetadata.h	/^			bool operator<(const DeviceMapEntry& source) const{$/;"	f	class:corelab::DeviceMapEntry
operator <	include/corelab/Utilities/InstInsertPt.h	/^      bool operator<(const InstInsertPt& other) const {$/;"	f	class:corelab::InstInsertPt
operator <<	include/IR/Comdat.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const Comdat &C) {$/;"	f	namespace:llvm
operator <<	include/IR/ConstantRange.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const ConstantRange &CR) {$/;"	f	namespace:llvm
operator <<	include/IR/Metadata.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const Metadata &MD) {$/;"	f	namespace:llvm
operator <<	include/IR/Module.h	/^inline raw_ostream &operator<<(raw_ostream &O, const Module &M) {$/;"	f	namespace:llvm
operator <<	include/IR/Type.h	/^static inline raw_ostream &operator<<(raw_ostream &OS, Type &T) {$/;"	f	namespace:llvm
operator <<	include/IR/Value.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const Value &V) {$/;"	f	namespace:llvm
operator <<	include/corelab/Utilities/InstInsertPt.h	/^      InstInsertPt &operator<<(Instruction *i) {$/;"	f	class:corelab::InstInsertPt
operator <=	include/IR/CFG.h	/^  inline bool operator<=(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator =	include/IR/CFG.h	/^    SuccessorProxy &operator=(SuccessorProxy r) {$/;"	f	class:llvm::SuccIterator::SuccessorProxy
operator =	include/IR/CFG.h	/^    SuccessorProxy &operator=(reference r) {$/;"	f	class:llvm::SuccIterator::SuccessorProxy
operator =	include/IR/DataLayout.h	/^  DataLayout &operator=(const DataLayout &DL) {$/;"	f	class:llvm::DataLayout
operator =	include/IR/DebugLoc.h	/^    DebugLoc &operator=(DebugLoc &&X) {$/;"	f	class:llvm::DebugLoc
operator =	include/IR/DebugLoc.h	/^    DebugLoc &operator=(const DebugLoc &X) {$/;"	f	class:llvm::DebugLoc
operator =	include/IR/Dominators.h	/^  DominatorTree &operator=(DominatorTree &&RHS) {$/;"	f	class:llvm::DominatorTree
operator =	include/IR/PassManager.h	/^    Result &operator=(Result RHS) {$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy::Result
operator =	include/IR/PassManager.h	/^  AnalysisManager &operator=(AnalysisManager &&RHS) {$/;"	f	class:llvm::AnalysisManager
operator =	include/IR/PassManager.h	/^  AnalysisManagerBase &operator=(AnalysisManagerBase &&RHS) {$/;"	f	class:llvm::detail::AnalysisManagerBase
operator =	include/IR/PassManager.h	/^  ModuleToFunctionPassAdaptor &operator=(ModuleToFunctionPassAdaptor RHS) {$/;"	f	class:llvm::ModuleToFunctionPassAdaptor
operator =	include/IR/PassManager.h	/^  PassManager &operator=(PassManager &&RHS) {$/;"	f	class:llvm::PassManager
operator =	include/IR/PassManager.h	/^  PreservedAnalyses &operator=(PreservedAnalyses RHS) {$/;"	f	class:llvm::PreservedAnalyses
operator =	include/IR/PassManager.h	/^  Result &operator=(Result RHS) {$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy::Result
operator =	include/IR/PassManager.h	/^  operator=(FunctionAnalysisManagerModuleProxy RHS) {$/;"	f	class:llvm::FunctionAnalysisManagerModuleProxy
operator =	include/IR/PassManager.h	/^  operator=(ModuleAnalysisManagerFunctionProxy RHS) {$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy
operator =	include/IR/PassManagerInternal.h	/^  AnalysisPassModel &operator=(AnalysisPassModel RHS) {$/;"	f	struct:llvm::detail::AnalysisPassModel
operator =	include/IR/PassManagerInternal.h	/^  AnalysisResultModel &operator=(AnalysisResultModel RHS) {$/;"	f	struct:llvm::detail::AnalysisResultModel
operator =	include/IR/PassManagerInternal.h	/^  PassModel &operator=(PassModel RHS) {$/;"	f	struct:llvm::detail::PassModel
operator =	include/IR/TrackingMDRef.h	/^  TrackingMDRef &operator=(TrackingMDRef &&X) {$/;"	f	class:llvm::TrackingMDRef
operator =	include/IR/TrackingMDRef.h	/^  TrackingMDRef &operator=(const TrackingMDRef &X) {$/;"	f	class:llvm::TrackingMDRef
operator =	include/IR/TrackingMDRef.h	/^  TypedTrackingMDRef &operator=(TypedTrackingMDRef &&X) {$/;"	f	class:llvm::TypedTrackingMDRef
operator =	include/IR/TrackingMDRef.h	/^  TypedTrackingMDRef &operator=(const TypedTrackingMDRef &X) {$/;"	f	class:llvm::TypedTrackingMDRef
operator =	include/IR/Use.h	/^  Value *operator=(Value *RHS) {$/;"	f	class:llvm::Use
operator =	include/IR/Use.h	/^  const Use &operator=(const Use &RHS) {$/;"	f	class:llvm::Use
operator =	include/IR/UseListOrder.h	/^  UseListOrder &operator=(UseListOrder &&X) {$/;"	f	struct:llvm::UseListOrder
operator =	include/IR/ValueHandle.h	/^  Value *operator=(Value *RHS) {$/;"	f	class:llvm::ValueHandleBase
operator =	include/IR/ValueHandle.h	/^  Value *operator=(Value *RHS) {$/;"	f	class:llvm::WeakVH
operator =	include/IR/ValueHandle.h	/^  Value *operator=(const ValueHandleBase &RHS) {$/;"	f	class:llvm::ValueHandleBase
operator =	include/IR/ValueHandle.h	/^  Value *operator=(const ValueHandleBase &RHS) {$/;"	f	class:llvm::WeakVH
operator =	include/IR/ValueHandle.h	/^  ValueTy *operator=(ValueTy *RHS) {$/;"	f	class:llvm::AssertingVH
operator =	include/IR/ValueHandle.h	/^  ValueTy *operator=(ValueTy *RHS) {$/;"	f	class:llvm::TrackingVH
operator =	include/IR/ValueHandle.h	/^  ValueTy *operator=(const AssertingVH<ValueTy> &RHS) {$/;"	f	class:llvm::AssertingVH
operator =	include/IR/ValueHandle.h	/^  ValueTy *operator=(const TrackingVH<ValueTy> &RHS) {$/;"	f	class:llvm::TrackingVH
operator ==	include/IR/Attributes.h	/^  bool operator==(Attribute A) const { return pImpl == A.pImpl; }$/;"	f	class:llvm::Attribute
operator ==	include/IR/Attributes.h	/^  bool operator==(const AttributeSet &RHS) const {$/;"	f	class:llvm::AttributeSet
operator ==	include/IR/CFG.h	/^  inline bool operator==(const Self& x) const { return It == x.It; }$/;"	f	class:llvm::PredIterator
operator ==	include/IR/CFG.h	/^  inline bool operator==(const Self& x) const { return idx == x.idx; }$/;"	f	class:llvm::SuccIterator
operator ==	include/IR/CallSite.h	/^  bool operator==(const CallSite &CS) const { return I == CS.I; }$/;"	f	class:llvm::CallSite
operator ==	include/IR/ConstantRange.h	/^  bool operator==(const ConstantRange &CR) const {$/;"	f	class:llvm::ConstantRange
operator ==	include/IR/DebugInfo.h	/^    bool operator==(const iterator &X) const { return I == X.I; }$/;"	f	class:llvm::DIExpression::iterator
operator ==	include/IR/DebugInfo.h	/^  bool operator==(DIDescriptor Other) const { return DbgNode == Other.DbgNode; }$/;"	f	class:llvm::DIDescriptor
operator ==	include/IR/DebugInfo.h	/^  bool operator==(const DIHeaderFieldIterator &X) const {$/;"	f	class:llvm::DIHeaderFieldIterator
operator ==	include/IR/DebugInfoMetadata.h	/^    bool operator==(const expr_op_iterator &X) const {$/;"	f	class:llvm::MDExpression::expr_op_iterator
operator ==	include/IR/DebugLoc.h	/^    bool operator==(const DebugLoc &DL) const { return Loc == DL.Loc; }$/;"	f	class:llvm::DebugLoc
operator ==	include/IR/GetElementPtrTypeIterator.h	/^    bool operator==(const generic_gep_type_iterator& x) const {$/;"	f	class:llvm::generic_gep_type_iterator
operator ==	include/IR/InstIterator.h	/^  inline bool operator==(const InstIterator &y) const {$/;"	f	class:llvm::InstIterator
operator ==	include/IR/Instructions.h	/^    bool operator==(const Self& RHS) const {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator ==	include/IR/Metadata.h	/^    bool operator==(const op_iterator_impl &o) const { return Idx == o.Idx; }$/;"	f	class:llvm::NamedMDNode::op_iterator_impl
operator ==	include/IR/Metadata.h	/^  bool operator==(const AAMDNodes &A) const {$/;"	f	struct:llvm::AAMDNodes
operator ==	include/IR/TrackingMDRef.h	/^  bool operator==(const TrackingMDRef &X) const { return MD == X.MD; }$/;"	f	class:llvm::TrackingMDRef
operator ==	include/IR/TrackingMDRef.h	/^  bool operator==(const TypedTrackingMDRef &X) const { return Ref == X.Ref; }$/;"	f	class:llvm::TypedTrackingMDRef
operator ==	include/IR/Value.h	/^    bool operator==(const use_iterator_impl &x) const { return U == x.U; }$/;"	f	class:llvm::Value::use_iterator_impl
operator ==	include/IR/Value.h	/^    bool operator==(const user_iterator_impl &x) const { return UI == x.UI; }$/;"	f	class:llvm::Value::user_iterator_impl
operator ==	include/IR/ValueMap.h	/^  bool operator==(const ValueMapConstIterator &RHS) const {$/;"	f	class:llvm::ValueMapConstIterator
operator ==	include/IR/ValueMap.h	/^  bool operator==(const ValueMapIterator &RHS) const {$/;"	f	class:llvm::ValueMapIterator
operator ==	include/corelab/Metadata/NamedMetadata.h	/^			bool operator==(const DeviceMapEntry& source) const{$/;"	f	class:corelab::DeviceMapEntry
operator >	include/IR/CFG.h	/^  inline bool operator>(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator >=	include/IR/CFG.h	/^  inline bool operator>=(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator DITypeRef	include/IR/DebugInfo.h	/^  operator DITypeRef() const {$/;"	f	class:llvm::DIType
operator LLVMContext &	include/IR/Metadata.h	/^  operator LLVMContext &() { return getContext(); }$/;"	f	class:llvm::ContextAndReplaceableUses
operator MDBasicType *	include/IR/DebugInfo.h	/^  operator MDBasicType *() const { return get(); }$/;"	f	class:llvm::DIBasicType
operator MDCompileUnit *	include/IR/DebugInfo.h	/^  operator MDCompileUnit *() const { return get(); }$/;"	f	class:llvm::DICompileUnit
operator MDCompositeTypeBase *	include/IR/DebugInfo.h	/^  operator MDCompositeTypeBase *() const { return get(); }$/;"	f	class:llvm::DICompositeType
operator MDDerivedTypeBase *	include/IR/DebugInfo.h	/^  operator MDDerivedTypeBase *() const { return get(); }$/;"	f	class:llvm::DIDerivedType
operator MDEnumerator *	include/IR/DebugInfo.h	/^  operator MDEnumerator *() const { return get(); }$/;"	f	class:llvm::DIEnumerator
operator MDExpression *	include/IR/DebugInfo.h	/^  operator MDExpression *() const { return get(); }$/;"	f	class:llvm::DIExpression
operator MDFile *	include/IR/DebugInfo.h	/^  operator MDFile *() const { return get(); }$/;"	f	class:llvm::DIFile
operator MDGlobalVariable *	include/IR/DebugInfo.h	/^  operator MDGlobalVariable *() const { return get(); }$/;"	f	class:llvm::DIGlobalVariable
operator MDImportedEntity *	include/IR/DebugInfo.h	/^  operator MDImportedEntity *() const { return get(); }$/;"	f	class:llvm::DIImportedEntity
operator MDLexicalBlockBase *	include/IR/DebugInfo.h	/^  operator MDLexicalBlockBase *() const { return get(); }$/;"	f	class:llvm::DILexicalBlock
operator MDLexicalBlockFile *	include/IR/DebugInfo.h	/^  operator MDLexicalBlockFile *() const { return get(); }$/;"	f	class:llvm::DILexicalBlockFile
operator MDLocalVariable *	include/IR/DebugInfo.h	/^  operator MDLocalVariable *() const { return get(); }$/;"	f	class:llvm::DIVariable
operator MDLocation *	include/IR/DebugInfo.h	/^  operator MDLocation *() const { return get(); }$/;"	f	class:llvm::DILocation
operator MDLocation *	include/IR/DebugLoc.h	/^    operator MDLocation *() const { return get(); }$/;"	f	class:llvm::DebugLoc
operator MDNamespace *	include/IR/DebugInfo.h	/^  operator MDNamespace *() const { return get(); }$/;"	f	class:llvm::DINameSpace
operator MDNode *	include/IR/DebugInfo.h	/^  operator MDNode *() const { return get(); }$/;"	f	class:llvm::DIDescriptor
operator MDObjCProperty *	include/IR/DebugInfo.h	/^  operator MDObjCProperty *() const { return get(); }$/;"	f	class:llvm::DIObjCProperty
operator MDScope *	include/IR/DebugInfo.h	/^  operator MDScope *() const { return get(); }$/;"	f	class:llvm::DIScope
operator MDSubprogram *	include/IR/DebugInfo.h	/^  operator MDSubprogram *() const { return get(); }$/;"	f	class:llvm::DISubprogram
operator MDSubrange *	include/IR/DebugInfo.h	/^  operator MDSubrange *() const { return get(); }$/;"	f	class:llvm::DISubrange
operator MDSubroutineType *	include/IR/DebugInfo.h	/^  operator MDSubroutineType *() const { return get(); }$/;"	f	class:llvm::DISubroutineType
operator MDTemplateTypeParameter *	include/IR/DebugInfo.h	/^  operator MDTemplateTypeParameter *() const { return get(); }$/;"	f	class:llvm::DITemplateTypeParameter
operator MDTemplateValueParameter *	include/IR/DebugInfo.h	/^  operator MDTemplateValueParameter *() const { return get(); }$/;"	f	class:llvm::DITemplateValueParameter
operator MDType *	include/IR/DebugInfo.h	/^  operator MDType *() const { return get(); }$/;"	f	class:llvm::DIType
operator Metadata *	include/IR/DebugInfo.h	/^  operator Metadata *() const { return const_cast<Metadata *>(Val); }$/;"	f	class:llvm::DIRef
operator Metadata *	include/IR/Metadata.h	/^  operator Metadata *() const { return get(); }$/;"	f	class:llvm::MDOperand
operator Metadata *	include/IR/TrackingMDRef.h	/^  operator Metadata *() const { return get(); }$/;"	f	class:llvm::TrackingMDRef
operator T *	include/IR/TrackingMDRef.h	/^  operator T *() const { return get(); }$/;"	f	class:llvm::TypedTrackingMDRef
operator Value *	include/IR/Use.h	/^  operator Value *() const { return Val; }$/;"	f	class:llvm::Use
operator Value*	include/IR/ValueHandle.h	/^  operator Value*() const {$/;"	f	class:llvm::CallbackVH
operator Value*	include/IR/ValueHandle.h	/^  operator Value*() const {$/;"	f	class:llvm::WeakVH
operator ValueTy*	include/IR/ValueHandle.h	/^  operator ValueTy*() const {$/;"	f	class:llvm::AssertingVH
operator ValueTy*	include/IR/ValueHandle.h	/^  operator ValueTy*() const {$/;"	f	class:llvm::TrackingVH
operator []	include/IR/CFG.h	/^  inline SuccessorProxy operator[](int offset) {$/;"	f	class:llvm::SuccIterator
operator []	include/IR/TypeFinder.h	/^  StructType *&operator[](unsigned Idx) { return StructTypes[Idx]; }$/;"	f	class:llvm::TypeFinder
operator []	include/IR/ValueMap.h	/^  ValueT &operator[](const KeyT &Key) {$/;"	f	class:llvm::ValueMap
operator bool	include/IR/CallSite.h	/^  explicit operator bool() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
operator bool	include/IR/DebugInfo.h	/^  explicit operator bool() const { return DbgNode != nullptr; }$/;"	f	class:llvm::DIDescriptor
operator bool	include/IR/DebugLoc.h	/^    explicit operator bool() const { return Loc; }$/;"	f	class:llvm::DebugLoc
operator bool	include/IR/Metadata.h	/^  explicit operator bool() const { return TBAA || Scope || NoAlias; }$/;"	f	struct:llvm::AAMDNodes
operator delete	include/IR/Metadata.h	/^  void operator delete(void *, unsigned) {$/;"	f	class:llvm::MDNode
operator delete	include/IR/Metadata.h	/^  void operator delete(void *, unsigned, bool) {$/;"	f	class:llvm::MDNode
operator delete	include/IR/User.h	/^  void operator delete(void*, unsigned) {$/;"	f	class:llvm::User
operator delete	include/IR/User.h	/^  void operator delete(void*, unsigned, bool) {$/;"	f	class:llvm::User
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) { return User::operator new(s, 2); }$/;"	f	class:llvm::BlockAddress
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantAggregateZero
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantDataArray
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantDataSequential
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantDataVector
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantFP
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantInt
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantPointerNull
operator new	include/IR/Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::UndefValue
operator new	include/IR/GlobalAlias.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::GlobalAlias
operator new	include/IR/GlobalVariable.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::GlobalVariable
operator new	include/IR/InstrTypes.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::BinaryOperator
operator new	include/IR/InstrTypes.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::CmpInst
operator new	include/IR/InstrTypes.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::UnaryInstruction
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::AtomicCmpXchgInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::AtomicRMWInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ExtractValueInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::FenceInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::IndirectBrInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::InsertValueInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::LandingPadInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::PHINode
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ShuffleVectorInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::StoreInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::SwitchInst
operator new	include/IR/Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::UnreachableInst
operator reference	include/IR/CFG.h	/^    operator reference() const { return *it; }$/;"	f	class:llvm::SuccIterator::SuccessorProxy
operator std::pair<KeyT, ValueT>	include/IR/ValueMap.h	/^    operator std::pair<KeyT, ValueT>() const {$/;"	f	struct:llvm::ValueMapConstIterator::ValueTypeProxy
operator std::pair<KeyT, ValueT>	include/IR/ValueMap.h	/^    operator std::pair<KeyT, ValueT>() const {$/;"	f	struct:llvm::ValueMapIterator::ValueTypeProxy
operator uint64_t	include/IR/DebugInfo.h	/^    operator uint64_t () const { return *I; }$/;"	f	class:llvm::DIExpression::Operand
operator use_iterator_impl<const UseT>	include/IR/Value.h	/^    operator use_iterator_impl<const UseT>() const {$/;"	f	class:llvm::Value::use_iterator_impl
operator user_iterator_impl<const UserTy>	include/IR/Value.h	/^    operator user_iterator_impl<const UserTy>() const {$/;"	f	class:llvm::Value::user_iterator_impl
override	include/IR/Constant.h	/^  void anchor() override;$/;"	m	class:llvm::Constant
override	include/IR/Constants.h	/^  void anchor() override;$/;"	m	class:llvm::ConstantDataArray
override	include/IR/Constants.h	/^  void anchor() override;$/;"	m	class:llvm::ConstantDataVector
override	include/IR/Constants.h	/^  void anchor() override;$/;"	m	class:llvm::ConstantFP
override	include/IR/Constants.h	/^  void anchor() override;$/;"	m	class:llvm::ConstantInt
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::BlockAddress
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::ConstantAggregateZero
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::ConstantArray
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::ConstantDataSequential
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::ConstantExpr
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::ConstantPointerNull
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::ConstantStruct
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::ConstantVector
override	include/IR/Constants.h	/^  void destroyConstant() override;$/;"	m	class:llvm::UndefValue
override	include/IR/Constants.h	/^  void replaceUsesOfWithOnConstant(Value *From, Value *To, Use *U) override;$/;"	m	class:llvm::BlockAddress
override	include/IR/Constants.h	/^  void replaceUsesOfWithOnConstant(Value *From, Value *To, Use *U) override;$/;"	m	class:llvm::ConstantArray
override	include/IR/Constants.h	/^  void replaceUsesOfWithOnConstant(Value *From, Value *To, Use *U) override;$/;"	m	class:llvm::ConstantExpr
override	include/IR/Constants.h	/^  void replaceUsesOfWithOnConstant(Value *From, Value *To, Use *U) override;$/;"	m	class:llvm::ConstantStruct
override	include/IR/Constants.h	/^  void replaceUsesOfWithOnConstant(Value *From, Value *To, Use *U) override;$/;"	m	class:llvm::ConstantVector
override	include/IR/DiagnosticInfo.h	/^  bool isEnabled() const override;$/;"	m	class:llvm::DiagnosticInfoOptimizationFailure
override	include/IR/DiagnosticInfo.h	/^  bool isEnabled() const override;$/;"	m	class:llvm::DiagnosticInfoOptimizationRemark
override	include/IR/DiagnosticInfo.h	/^  bool isEnabled() const override;$/;"	m	class:llvm::DiagnosticInfoOptimizationRemarkAnalysis
override	include/IR/DiagnosticInfo.h	/^  bool isEnabled() const override;$/;"	m	class:llvm::DiagnosticInfoOptimizationRemarkMissed
override	include/IR/DiagnosticInfo.h	/^  void print(DiagnosticPrinter &DP) const override;$/;"	m	class:llvm::DiagnosticInfoDebugMetadataVersion
override	include/IR/DiagnosticInfo.h	/^  void print(DiagnosticPrinter &DP) const override;$/;"	m	class:llvm::DiagnosticInfoInlineAsm
override	include/IR/DiagnosticInfo.h	/^  void print(DiagnosticPrinter &DP) const override;$/;"	m	class:llvm::DiagnosticInfoOptimizationBase
override	include/IR/DiagnosticInfo.h	/^  void print(DiagnosticPrinter &DP) const override;$/;"	m	class:llvm::DiagnosticInfoSampleProfile
override	include/IR/DiagnosticInfo.h	/^  void print(DiagnosticPrinter &DP) const override;$/;"	m	class:llvm::DiagnosticInfoStackSize
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(StringRef Str) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(char C) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(const Module &M) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(const Twine &Str) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(const Value &V) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(const char *Str) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(const std::string &Str) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(const void *P) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(double N) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(int N) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(long N) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(long long N) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(signed char C) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(unsigned char C) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(unsigned int N) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(unsigned long N) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/DiagnosticPrinter.h	/^  DiagnosticPrinter &operator<<(unsigned long long N) override;$/;"	m	class:llvm::DiagnosticPrinterRawOStream
override	include/IR/Dominators.h	/^  bool runOnFunction(Function &F) override;$/;"	m	class:llvm::DominatorTreeWrapperPass
override	include/IR/Dominators.h	/^  void print(raw_ostream &OS, const Module *M = nullptr) const override;$/;"	m	class:llvm::DominatorTreeWrapperPass
override	include/IR/Dominators.h	/^  void verifyAnalysis() const override;$/;"	m	class:llvm::DominatorTreeWrapperPass
override	include/IR/Function.h	/^  void copyAttributesFrom(const GlobalValue *Src) override;$/;"	m	class:llvm::Function
override	include/IR/Function.h	/^  void eraseFromParent() override;$/;"	m	class:llvm::Function
override	include/IR/Function.h	/^  void removeFromParent() override;$/;"	m	class:llvm::Function
override	include/IR/GlobalAlias.h	/^  void eraseFromParent() override;$/;"	m	class:llvm::GlobalAlias
override	include/IR/GlobalAlias.h	/^  void removeFromParent() override;$/;"	m	class:llvm::GlobalAlias
override	include/IR/GlobalObject.h	/^  void copyAttributesFrom(const GlobalValue *Src) override;$/;"	m	class:llvm::GlobalObject
override	include/IR/GlobalValue.h	/^  void destroyConstant() override;$/;"	m	class:llvm::GlobalValue
override	include/IR/GlobalVariable.h	/^  void copyAttributesFrom(const GlobalValue *Src) override;$/;"	m	class:llvm::GlobalVariable
override	include/IR/GlobalVariable.h	/^  void eraseFromParent() override;$/;"	m	class:llvm::GlobalVariable
override	include/IR/GlobalVariable.h	/^  void removeFromParent() override;$/;"	m	class:llvm::GlobalVariable
override	include/IR/GlobalVariable.h	/^  void replaceUsesOfWithOnConstant(Value *From, Value *To, Use *U) override;$/;"	m	class:llvm::GlobalVariable
override	include/IR/InstrTypes.h	/^  BinaryOperator *clone_impl() const override;$/;"	m	class:llvm::BinaryOperator
override	include/IR/InstrTypes.h	/^  void anchor() override; \/\/ Out of line virtual method.$/;"	m	class:llvm::CmpInst
override	include/IR/InstrTypes.h	/^  void anchor() override;$/;"	m	class:llvm::CastInst
override	include/IR/Instructions.h	/^  AddrSpaceCastInst *clone_impl() const override;$/;"	m	class:llvm::AddrSpaceCastInst
override	include/IR/Instructions.h	/^  AllocaInst *clone_impl() const override;$/;"	m	class:llvm::AllocaInst
override	include/IR/Instructions.h	/^  AtomicCmpXchgInst *clone_impl() const override;$/;"	m	class:llvm::AtomicCmpXchgInst
override	include/IR/Instructions.h	/^  AtomicRMWInst *clone_impl() const override;$/;"	m	class:llvm::AtomicRMWInst
override	include/IR/Instructions.h	/^  BasicBlock *getSuccessorV(unsigned idx) const override;$/;"	m	class:llvm::BranchInst
override	include/IR/Instructions.h	/^  BasicBlock *getSuccessorV(unsigned idx) const override;$/;"	m	class:llvm::IndirectBrInst
override	include/IR/Instructions.h	/^  BasicBlock *getSuccessorV(unsigned idx) const override;$/;"	m	class:llvm::InvokeInst
override	include/IR/Instructions.h	/^  BasicBlock *getSuccessorV(unsigned idx) const override;$/;"	m	class:llvm::ResumeInst
override	include/IR/Instructions.h	/^  BasicBlock *getSuccessorV(unsigned idx) const override;$/;"	m	class:llvm::ReturnInst
override	include/IR/Instructions.h	/^  BasicBlock *getSuccessorV(unsigned idx) const override;$/;"	m	class:llvm::SwitchInst
override	include/IR/Instructions.h	/^  BasicBlock *getSuccessorV(unsigned idx) const override;$/;"	m	class:llvm::UnreachableInst
override	include/IR/Instructions.h	/^  BitCastInst *clone_impl() const override;$/;"	m	class:llvm::BitCastInst
override	include/IR/Instructions.h	/^  BranchInst *clone_impl() const override;$/;"	m	class:llvm::BranchInst
override	include/IR/Instructions.h	/^  CallInst *clone_impl() const override;$/;"	m	class:llvm::CallInst
override	include/IR/Instructions.h	/^  ExtractElementInst *clone_impl() const override;$/;"	m	class:llvm::ExtractElementInst
override	include/IR/Instructions.h	/^  ExtractValueInst *clone_impl() const override;$/;"	m	class:llvm::ExtractValueInst
override	include/IR/Instructions.h	/^  FCmpInst *clone_impl() const override;$/;"	m	class:llvm::FCmpInst
override	include/IR/Instructions.h	/^  FPExtInst *clone_impl() const override;$/;"	m	class:llvm::FPExtInst
override	include/IR/Instructions.h	/^  FPToSIInst *clone_impl() const override;$/;"	m	class:llvm::FPToSIInst
override	include/IR/Instructions.h	/^  FPToUIInst *clone_impl() const override;$/;"	m	class:llvm::FPToUIInst
override	include/IR/Instructions.h	/^  FPTruncInst *clone_impl() const override;$/;"	m	class:llvm::FPTruncInst
override	include/IR/Instructions.h	/^  FenceInst *clone_impl() const override;$/;"	m	class:llvm::FenceInst
override	include/IR/Instructions.h	/^  GetElementPtrInst *clone_impl() const override;$/;"	m	class:llvm::GetElementPtrInst
override	include/IR/Instructions.h	/^  ICmpInst *clone_impl() const override;$/;"	m	class:llvm::ICmpInst
override	include/IR/Instructions.h	/^  IndirectBrInst *clone_impl() const override;$/;"	m	class:llvm::IndirectBrInst
override	include/IR/Instructions.h	/^  InsertElementInst *clone_impl() const override;$/;"	m	class:llvm::InsertElementInst
override	include/IR/Instructions.h	/^  InsertValueInst *clone_impl() const override;$/;"	m	class:llvm::InsertValueInst
override	include/IR/Instructions.h	/^  IntToPtrInst *clone_impl() const override;$/;"	m	class:llvm::IntToPtrInst
override	include/IR/Instructions.h	/^  InvokeInst *clone_impl() const override;$/;"	m	class:llvm::InvokeInst
override	include/IR/Instructions.h	/^  LandingPadInst *clone_impl() const override;$/;"	m	class:llvm::LandingPadInst
override	include/IR/Instructions.h	/^  LoadInst *clone_impl() const override;$/;"	m	class:llvm::LoadInst
override	include/IR/Instructions.h	/^  PHINode *clone_impl() const override;$/;"	m	class:llvm::PHINode
override	include/IR/Instructions.h	/^  PtrToIntInst *clone_impl() const override;$/;"	m	class:llvm::PtrToIntInst
override	include/IR/Instructions.h	/^  ResumeInst *clone_impl() const override;$/;"	m	class:llvm::ResumeInst
override	include/IR/Instructions.h	/^  ReturnInst *clone_impl() const override;$/;"	m	class:llvm::ReturnInst
override	include/IR/Instructions.h	/^  SExtInst *clone_impl() const override;$/;"	m	class:llvm::SExtInst
override	include/IR/Instructions.h	/^  SIToFPInst *clone_impl() const override;$/;"	m	class:llvm::SIToFPInst
override	include/IR/Instructions.h	/^  SelectInst *clone_impl() const override;$/;"	m	class:llvm::SelectInst
override	include/IR/Instructions.h	/^  ShuffleVectorInst *clone_impl() const override;$/;"	m	class:llvm::ShuffleVectorInst
override	include/IR/Instructions.h	/^  StoreInst *clone_impl() const override;$/;"	m	class:llvm::StoreInst
override	include/IR/Instructions.h	/^  SwitchInst *clone_impl() const override;$/;"	m	class:llvm::SwitchInst
override	include/IR/Instructions.h	/^  TruncInst *clone_impl() const override;$/;"	m	class:llvm::TruncInst
override	include/IR/Instructions.h	/^  UIToFPInst *clone_impl() const override;$/;"	m	class:llvm::UIToFPInst
override	include/IR/Instructions.h	/^  UnreachableInst *clone_impl() const override;$/;"	m	class:llvm::UnreachableInst
override	include/IR/Instructions.h	/^  VAArgInst *clone_impl() const override;$/;"	m	class:llvm::VAArgInst
override	include/IR/Instructions.h	/^  ZExtInst *clone_impl() const override;$/;"	m	class:llvm::ZExtInst
override	include/IR/Instructions.h	/^  unsigned getNumSuccessorsV() const override;$/;"	m	class:llvm::BranchInst
override	include/IR/Instructions.h	/^  unsigned getNumSuccessorsV() const override;$/;"	m	class:llvm::IndirectBrInst
override	include/IR/Instructions.h	/^  unsigned getNumSuccessorsV() const override;$/;"	m	class:llvm::InvokeInst
override	include/IR/Instructions.h	/^  unsigned getNumSuccessorsV() const override;$/;"	m	class:llvm::ResumeInst
override	include/IR/Instructions.h	/^  unsigned getNumSuccessorsV() const override;$/;"	m	class:llvm::ReturnInst
override	include/IR/Instructions.h	/^  unsigned getNumSuccessorsV() const override;$/;"	m	class:llvm::SwitchInst
override	include/IR/Instructions.h	/^  unsigned getNumSuccessorsV() const override;$/;"	m	class:llvm::UnreachableInst
override	include/IR/Instructions.h	/^  void setSuccessorV(unsigned idx, BasicBlock *B) override;$/;"	m	class:llvm::BranchInst
override	include/IR/Instructions.h	/^  void setSuccessorV(unsigned idx, BasicBlock *B) override;$/;"	m	class:llvm::IndirectBrInst
override	include/IR/Instructions.h	/^  void setSuccessorV(unsigned idx, BasicBlock *B) override;$/;"	m	class:llvm::InvokeInst
override	include/IR/Instructions.h	/^  void setSuccessorV(unsigned idx, BasicBlock *B) override;$/;"	m	class:llvm::ResumeInst
override	include/IR/Instructions.h	/^  void setSuccessorV(unsigned idx, BasicBlock *B) override;$/;"	m	class:llvm::ReturnInst
override	include/IR/Instructions.h	/^  void setSuccessorV(unsigned idx, BasicBlock *B) override;$/;"	m	class:llvm::SwitchInst
override	include/IR/Instructions.h	/^  void setSuccessorV(unsigned idx, BasicBlock *B) override;$/;"	m	class:llvm::UnreachableInst
override	include/IR/LegacyPassManager.h	/^  void add(Pass *P) override;$/;"	m	class:llvm::legacy::FunctionPassManager
override	include/IR/LegacyPassManager.h	/^  void add(Pass *P) override;$/;"	m	class:llvm::legacy::PassManager
override	include/IR/LegacyPassManagers.h	/^  bool doFinalization(Module &M) override;$/;"	m	class:llvm::FPPassManager
override	include/IR/LegacyPassManagers.h	/^  bool doInitialization(Module &M) override;$/;"	m	class:llvm::FPPassManager
override	include/IR/LegacyPassManagers.h	/^  bool runOnModule(Module &M) override;$/;"	m	class:llvm::FPPassManager
override	include/IR/LegacyPassManagers.h	/^  void dumpPassStructure(unsigned Offset) override;$/;"	m	class:llvm::FPPassManager
override	include/IR/LegacyPassManagers.h	/^  void print(raw_ostream &OS) const override;$/;"	m	class:llvm::PassManagerPrettyStackEntry
override	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			bool runOnModule(Module &M)  override;$/;"	m	class:corelab::IndirectCallAnal
override	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      bool runOnModule(Module &M)  override;$/;"	m	class:corelab::LoopTraverse
override	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      bool runOnModule(Module &M)  override;$/;"	m	class:corelab::RecursiveFuncAnal
override	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			bool runOnModule(Module &M)  override;$/;"	m	class:corelab::IndirectCallAnal
override	lib/AliasAnalysis/LoopTraverse.hpp	/^      bool runOnModule(Module &M)  override;$/;"	m	class:corelab::LoopTraverse
override	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      bool runOnModule(Module &M)  override;$/;"	m	class:corelab::RecursiveFuncAnal
pCxtTree	include/corelab/CAMP/CAMP.h	/^			std::vector<ContextTreeNode *> *pCxtTree;$/;"	m	class:corelab::CAMPInstaller
pCxtTree	include/corelab/CAMP/CampCache.h	/^			std::vector<ContextTreeNode*> *pCxtTree;$/;"	m	class:corelab::CAMPCache
pCxtTree	include/corelab/CAMP/CampExectime.h	/^			std::vector<ContextTreeNode *> *pCxtTree;$/;"	m	class:corelab::CAMPExectime
pCxtTree	include/corelab/ObjTrace/CtxObjtrace.h	/^			std::vector<ContextTreeNode *> *pCxtTree;$/;"	m	class:corelab::CtxObjtrace
pCxtTree	lib/CAMP/CAMP.h	/^			std::vector<ContextTreeNode *> *pCxtTree;$/;"	m	class:corelab::CAMPInstaller
pCxtTree	lib/CAMP/CampCache.h	/^			std::vector<ContextTreeNode*> *pCxtTree;$/;"	m	class:corelab::CAMPCache
pCxtTree	lib/CAMP/CampExectime.h	/^			std::vector<ContextTreeNode *> *pCxtTree;$/;"	m	class:corelab::CAMPExectime
pCxtTree	lib/ObjTrace/CtxObjtrace.h	/^			std::vector<ContextTreeNode *> *pCxtTree;$/;"	m	class:corelab::CtxObjtrace
pImpl	include/IR/Attributes.h	/^  AttributeImpl *pImpl;$/;"	m	class:llvm::Attribute
pImpl	include/IR/Attributes.h	/^  AttributeSetImpl *pImpl;$/;"	m	class:llvm::AttributeSet
pImpl	include/IR/LLVMContext.h	/^  LLVMContextImpl *const pImpl;$/;"	m	class:llvm::LLVMContext
pLoadMap	tools/camp/campRuntime.h	/^	LoadHistoryMap *pLoadMap;$/;"	m	struct:HistoryElem
pLoadMap	tools/campSampling/campRuntime.h	/^	LoadHistoryMap *pLoadMap;$/;"	m	struct:HistoryElem
pLoadNamer	include/corelab/CAMP/CAMP.h	/^			LoadNamer *pLoadNamer;$/;"	m	class:corelab::CAMPInstaller
pLoadNamer	include/corelab/CAMP/CampExectime.h	/^			LoadNamer *pLoadNamer;$/;"	m	class:corelab::CAMPExectime
pLoadNamer	include/corelab/CAMP/ContextTreeBuilder.h	/^			LoadNamer *pLoadNamer;$/;"	m	class:corelab::ContextTreeBuilder
pLoadNamer	include/corelab/ObjTrace/CtxObjtrace.h	/^			LoadNamer *pLoadNamer;$/;"	m	class:corelab::CtxObjtrace
pLoadNamer	lib/CAMP/CAMP.h	/^			LoadNamer *pLoadNamer;$/;"	m	class:corelab::CAMPInstaller
pLoadNamer	lib/CAMP/CampExectime.h	/^			LoadNamer *pLoadNamer;$/;"	m	class:corelab::CAMPExectime
pLoadNamer	lib/CAMP/ContextTreeBuilder.h	/^			LoadNamer *pLoadNamer;$/;"	m	class:corelab::ContextTreeBuilder
pLoadNamer	lib/ObjTrace/CtxObjtrace.h	/^			LoadNamer *pLoadNamer;$/;"	m	class:corelab::CtxObjtrace
pM	include/corelab/Metadata/Metadata.h	/^			Module *pM;$/;"	m	class:corelab::Namer
pM	include/corelab/Metadata/NamedMetadata.h	/^			Module* pM;$/;"	m	class:corelab::EsperantoNamer
padding	tools/camp/campRuntime.h	/^	uint32_t padding; \/\/4byte padding to make StoreHistoryElem 24 byte$/;"	m	struct:StoreHistoryElem
padding	tools/campSampling/campRuntime.h	/^	uint32_t padding; \/\/4byte padding to make StoreHistoryElem 24 byte$/;"	m	struct:StoreHistoryElem
paramHasAttr	include/IR/CallSite.h	/^  bool paramHasAttr(unsigned i, Attribute::AttrKind A) const {$/;"	f	class:llvm::CallSiteBase
param_begin	include/IR/DerivedTypes.h	/^  param_iterator param_begin() const { return ContainedTys + 1; }$/;"	f	class:llvm::FunctionType
param_end	include/IR/DerivedTypes.h	/^  param_iterator param_end() const { return &ContainedTys[NumContainedTys]; }$/;"	f	class:llvm::FunctionType
param_iterator	include/IR/DerivedTypes.h	/^  typedef Type::subtype_iterator param_iterator;$/;"	t	class:llvm::FunctionType
params	include/IR/DerivedTypes.h	/^  ArrayRef<Type *> params() const {$/;"	f	class:llvm::FunctionType
parent	include/corelab/CAMP/ContextTreeBuilder.h	/^			ContextTree *parent;$/;"	m	class:corelab::ContextTree
parent	lib/CAMP/ContextTreeBuilder.h	/^			ContextTree *parent;$/;"	m	class:corelab::ContextTree
perf_count	tools/camp/armtimer.hpp	/^unsigned int perf_count;$/;"	m	class:armtimer
perf_time	tools/camp/armtimer.hpp	/^double perf_time;$/;"	m	class:armtimer
plainFinalize	tools/camp/plainRuntime.cpp	/^void plainFinalize(void){$/;"	f
plainInitialize	tools/camp/plainRuntime.cpp	/^void plainInitialize(void){$/;"	f
plain_t	tools/camp/plainRuntime.cpp	/^x86timer plain_t;$/;"	v
platform	include/corelab/Metadata/NamedMetadata.h	/^				EsperantoPlatform platform;$/;"	m	struct:corelab::EsperantoNamer::DeviceEntry
pointer	include/IR/CFG.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::PredIterator
pointer	include/IR/CFG.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::SuccIterator
pointer	include/IR/InstIterator.h	/^  typedef IIty*                           pointer;$/;"	t	class:llvm::InstIterator
populateInheritedAnalysis	include/IR/LegacyPassManagers.h	/^  void populateInheritedAnalysis(PMStack &PMS) {$/;"	f	class:llvm::PMDataManager
pos	include/corelab/Utilities/InstInsertPt.h	/^      Instruction *                           pos;$/;"	m	class:corelab::InstInsertPt
possibleTargetOf	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      IndirectCallMap possibleTargetOf;$/;"	m	class:corelab::LoopTraverse
possibleTargetOf	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      IndirectCallMap possibleTargetOf;$/;"	m	class:corelab::RecursiveFuncAnal
possibleTargetOf	include/corelab/CAMP/ContextTreeBuilder.h	/^			IndirectCallMap possibleTargetOf;$/;"	m	class:corelab::ContextTreeBuilder
possibleTargetOf	lib/AliasAnalysis/LoopTraverse.hpp	/^      IndirectCallMap possibleTargetOf;$/;"	m	class:corelab::LoopTraverse
possibleTargetOf	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      IndirectCallMap possibleTargetOf;$/;"	m	class:corelab::RecursiveFuncAnal
possibleTargetOf	lib/CAMP/ContextTreeBuilder.h	/^			IndirectCallMap possibleTargetOf;$/;"	m	class:corelab::ContextTreeBuilder
ppc_fp128	include/IR/TypeBuilder.h	/^class ppc_fp128 {};$/;"	c	namespace:llvm::types
pred_begin	include/IR/CFG.h	/^inline const_pred_iterator pred_begin(const BasicBlock *BB) {$/;"	f	namespace:llvm
pred_begin	include/IR/CFG.h	/^inline pred_iterator pred_begin(BasicBlock *BB) { return pred_iterator(BB); }$/;"	f	namespace:llvm
pred_const_range	include/IR/CFG.h	/^typedef llvm::iterator_range<const_pred_iterator> pred_const_range;$/;"	t	namespace:llvm
pred_empty	include/IR/CFG.h	/^inline bool pred_empty(const BasicBlock *BB) {$/;"	f	namespace:llvm
pred_end	include/IR/CFG.h	/^inline const_pred_iterator pred_end(const BasicBlock *BB) {$/;"	f	namespace:llvm
pred_end	include/IR/CFG.h	/^inline pred_iterator pred_end(BasicBlock *BB) { return pred_iterator(BB, true);}$/;"	f	namespace:llvm
pred_iterator	include/IR/CFG.h	/^typedef PredIterator<BasicBlock, Value::user_iterator> pred_iterator;$/;"	t	namespace:llvm
pred_range	include/IR/CFG.h	/^typedef llvm::iterator_range<pred_iterator> pred_range;$/;"	t	namespace:llvm
predecessors	include/IR/CFG.h	/^inline pred_const_range predecessors(const BasicBlock *BB) {$/;"	f	namespace:llvm
predecessors	include/IR/CFG.h	/^inline pred_range predecessors(BasicBlock *BB) {$/;"	f	namespace:llvm
preserve	include/IR/PassManager.h	/^  template <typename PassT> void preserve() { preserve(PassT::ID()); }$/;"	f	class:llvm::PreservedAnalyses
preserve	include/IR/PassManager.h	/^  void preserve(void *PassID) {$/;"	f	class:llvm::PreservedAnalyses
preserved	include/IR/PassManager.h	/^  bool preserved(void *PassID) const {$/;"	f	class:llvm::PreservedAnalyses
preserved	include/IR/PassManager.h	/^  template <typename PassT> bool preserved() const {$/;"	f	class:llvm::PreservedAnalyses
print	include/corelab/Metadata/NamedMetadata.h	/^			void print(){$/;"	f	class:corelab::DeviceMap
print	lib/Utilities/InstInsertPt.cpp	/^  void InstInsertPt::print(llvm::raw_ostream &out) const{$/;"	f	class:corelab::InstInsertPt
printAllIndirectCalls	lib/AliasAnalysis/IndirectCallAnal.cpp	/^void IndirectCallAnal::printAllIndirectCalls(){$/;"	f	class:IndirectCallAnal
printAllRecursiveFunction	lib/AliasAnalysis/RecursiveFuncAnal.cpp	/^void RecursiveFuncAnal::printAllRecursiveFunction(){$/;"	f	class:RecursiveFuncAnal
printAllTargetCandidate	lib/AliasAnalysis/IndirectCallAnal.cpp	/^void IndirectCallAnal::printAllTargetCandidate(){$/;"	f	class:IndirectCallAnal
printAllTrueRecursiveCall	lib/AliasAnalysis/RecursiveFuncAnal.cpp	/^void RecursiveFuncAnal::printAllTrueRecursiveCall(){$/;"	f	class:RecursiveFuncAnal
printCallHistory	lib/AliasAnalysis/RecursiveFuncAnal.cpp	/^void RecursiveFuncAnal::printCallHistory(){$/;"	f	class:RecursiveFuncAnal
printCallsWithNoTarget	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTreeBuilder::printCallsWithNoTarget(){$/;"	f	class:ContextTreeBuilder
printContextTree	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTreeBuilder::printContextTree(){$/;"	f	class:ContextTreeBuilder
printInfoComment	include/IR/AssemblyAnnotationWriter.h	/^  virtual void printInfoComment(const Value &, formatted_raw_ostream &) {}$/;"	f	class:llvm::AssemblyAnnotationWriter
printMatching	lib/AliasAnalysis/IndirectCallAnal.cpp	/^void IndirectCallAnal::printMatching(Matching &matching){$/;"	f	class:IndirectCallAnal
printMaxLoopDepthOfFunctions	lib/AliasAnalysis/LoopTraverse.cpp	/^void LoopTraverse::printMaxLoopDepthOfFunctions()$/;"	f	class:LoopTraverse
printPathToRoot	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTree::printPathToRoot(){$/;"	f	class:ContextTree
printResult	lib/CAMP/RegiInterIterDepFinder.cpp	/^void RegiInterIterDepFinder::printResult(std::string path){$/;"	f	class:RegiInterIterDepFinder
printSpecs	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::printSpecs() {$/;"	f	class:corelab::EsperantoNamer
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
provideInitialHead	include/IR/BasicBlock.h	/^  BasicBlock *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	include/IR/Function.h	/^  Argument *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	include/IR/Instruction.h	/^  Instruction *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	include/IR/Module.h	/^  Function *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	include/IR/Module.h	/^  GlobalAlias *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	include/IR/Module.h	/^  GlobalVariable *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	include/IR/Module.h	/^  NamedMDNode *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ptrInModule	include/corelab/AliasAnalysis/TestClient.hpp	/^			std::vector<Value *> ptrInModule;$/;"	m	class:corelab::TestAAClient
queryTreeNodeForCallSite	include/corelab/CAMP/ContextTreeBuilder.h	/^			ContextTreeNode *queryTreeNodeForCallSite(const Instruction *inst){$/;"	f	class:corelab::ContextTreeBuilder
queryTreeNodeForCallSite	lib/CAMP/ContextTreeBuilder.h	/^			ContextTreeNode *queryTreeNodeForCallSite(const Instruction *inst){$/;"	f	class:corelab::ContextTreeBuilder
randomSampling	tools/campSampling/campRuntime.cpp	/^static uint16_t randomSampling; \/\/DO sampling when (randomSampling == RANDOM_SAMPLING_CYCLE)$/;"	v	file:
randomSamplingTriggered	tools/campSampling/campRuntime.cpp	/^static uint64_t randomSamplingTriggered;$/;"	v	file:
rbegin	include/IR/BasicBlock.h	/^  inline const_reverse_iterator  rbegin() const { return InstList.rbegin(); }$/;"	f	class:llvm::BasicBlock
rbegin	include/IR/BasicBlock.h	/^  inline reverse_iterator        rbegin()       { return InstList.rbegin(); }$/;"	f	class:llvm::BasicBlock
rbegin	include/IR/Module.h	/^  const_reverse_iterator  rbegin() const{ return FunctionList.rbegin(); }$/;"	f	class:llvm::Module
rbegin	include/IR/Module.h	/^  reverse_iterator        rbegin()      { return FunctionList.rbegin(); }$/;"	f	class:llvm::Module
rdtsc	tools/camp/x86timer.hpp	/^inline uint64_t rdtsc() {$/;"	f
rdtsc	tools/camp/x86timer.hpp	/^unsigned __int64 __cdecl rdtsc(void)$/;"	f
rdtsc	tools/objtrace/x86timer.hpp	/^inline uint64_t rdtsc() {$/;"	f
rdtsc	tools/objtrace/x86timer.hpp	/^unsigned __int64 __cdecl rdtsc(void)$/;"	f
recFuncList	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      std::unordered_set<const Function *> recFuncList;$/;"	m	class:corelab::LoopTraverse
recFuncList	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveFuncList recFuncList;$/;"	m	class:corelab::RecursiveFuncAnal
recFuncList	include/corelab/CAMP/ContextTreeBuilder.h	/^			std::unordered_set<const Function *> recFuncList;$/;"	m	class:corelab::ContextTreeBuilder
recFuncList	lib/AliasAnalysis/LoopTraverse.hpp	/^      std::unordered_set<const Function *> recFuncList;$/;"	m	class:corelab::LoopTraverse
recFuncList	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveFuncList recFuncList;$/;"	m	class:corelab::RecursiveFuncAnal
recFuncList	lib/CAMP/ContextTreeBuilder.h	/^			std::unordered_set<const Function *> recFuncList;$/;"	m	class:corelab::ContextTreeBuilder
reccall_iterator	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef RecursiveCallList::iterator reccall_iterator;$/;"	t	class:corelab::RecursiveFuncAnal
reccall_iterator	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      typedef RecursiveCallList::iterator reccall_iterator;$/;"	t	class:corelab::RecursiveFuncAnal
recordLoopIDforEachLoop	lib/CAMP/ContextTreeBuilder.cpp	/^void ContextTreeBuilder::recordLoopIDforEachLoop(){$/;"	f	class:ContextTreeBuilder
recurCount	tools/camp/campExecRuntime.cpp	/^static int recurCount = 0;$/;"	v	file:
recurDuplicateFunction	lib/CAMP/CampCache.cpp	/^bool CAMPCache::recurDuplicateFunction (ContextTreeNode *node, int oldIterator, Instruction* targetInst)$/;"	f	class:CAMPCache
recursiveCalls	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveCallList recursiveCalls;$/;"	m	class:corelab::RecursiveFuncAnal
recursiveCalls	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      RecursiveCallList recursiveCalls;$/;"	m	class:corelab::RecursiveFuncAnal
recursiveFunCalls	include/corelab/AliasAnalysis/LoopTraverse.hpp	/^      RecursiveFunCallList recursiveFunCalls; \/\/ call to recursive function$/;"	m	class:corelab::LoopTraverse
recursiveFunCalls	include/corelab/CAMP/ContextTreeBuilder.h	/^			RecursiveFunCallList recursiveFunCalls; \/\/ call to recursive function$/;"	m	class:corelab::ContextTreeBuilder
recursiveFunCalls	lib/AliasAnalysis/LoopTraverse.hpp	/^      RecursiveFunCallList recursiveFunCalls; \/\/ call to recursive function$/;"	m	class:corelab::LoopTraverse
recursiveFunCalls	lib/CAMP/ContextTreeBuilder.h	/^			RecursiveFunCallList recursiveFunCalls; \/\/ call to recursive function$/;"	m	class:corelab::ContextTreeBuilder
reference	include/IR/CFG.h	/^  typedef typename super::reference reference;$/;"	t	class:llvm::PredIterator
reference	include/IR/CFG.h	/^  typedef typename super::reference reference;$/;"	t	class:llvm::SuccIterator
reference	include/IR/InstIterator.h	/^  typedef IIty&                           reference;$/;"	t	class:llvm::InstIterator
registerPass	include/IR/PassManager.h	/^  template <typename PassT> void registerPass(PassT Pass) {$/;"	f	class:llvm::detail::AnalysisManagerBase
reload	lib/Metadata/LoadNamer.cpp	/^	void LoadNamer::reload() {$/;"	f	class:corelab::LoadNamer
remoteCallFunctionTable	include/corelab/Metadata/NamedMetadata.h	/^			std::map<Function*,bool> remoteCallFunctionTable;$/;"	m	class:corelab::EsperantoNamer
remoteCallFunctions	include/corelab/Metadata/NamedMetadata.h	/^			std::vector<Function*> remoteCallFunctions;$/;"	m	class:corelab::EsperantoNamer
removeFnAttr	include/IR/Function.h	/^  void removeFnAttr(Attribute::AttrKind N) {$/;"	f	class:llvm::Function
removeFromList	include/IR/Use.h	/^  void removeFromList() {$/;"	f	class:llvm::Use
removeIncomingValue	include/IR/Instructions.h	/^  Value *removeIncomingValue(const BasicBlock *BB, bool DeletePHIIfEmpty=true) {$/;"	f	class:llvm::PHINode
removeNodeFromList	include/IR/Module.h	/^  void removeNodeFromList(NamedMDNode *) {}$/;"	f	struct:llvm::ilist_traits
rend	include/IR/BasicBlock.h	/^  inline const_reverse_iterator  rend  () const { return InstList.rend();   }$/;"	f	class:llvm::BasicBlock
rend	include/IR/BasicBlock.h	/^  inline reverse_iterator        rend  ()       { return InstList.rend();   }$/;"	f	class:llvm::BasicBlock
rend	include/IR/Module.h	/^  const_reverse_iterator  rend() const  { return FunctionList.rend(); }$/;"	f	class:llvm::Module
rend	include/IR/Module.h	/^  reverse_iterator        rend()        { return FunctionList.rend(); }$/;"	f	class:llvm::Module
replaceAllUsesWith	include/IR/Metadata.h	/^  void replaceAllUsesWith(Metadata *MD) {$/;"	f	class:llvm::MDNode
replaceAllUsesWith	include/IR/Metadata.h	/^  void replaceAllUsesWith(Metadata *MD) {$/;"	f	class:llvm::ValueAsMetadata
replaceDwarfOperandWith	include/IR/DebugInfoMetadata.h	/^  void replaceDwarfOperandWith(unsigned I, Metadata *New) {$/;"	f	class:llvm::GenericDebugNode
replaceElements	include/IR/DebugInfoMetadata.h	/^  void replaceElements(MDTuple *Elements) {$/;"	f	class:llvm::MDCompositeTypeBase
replaceFunction	include/IR/DebugInfo.h	/^  void replaceFunction(Function *F) {$/;"	f	class:llvm::DISubprogram
replaceFunction	include/IR/DebugInfoMetadata.h	/^  void replaceFunction(ConstantAsMetadata *MD) { replaceOperandWith(7, MD); }$/;"	f	class:llvm::MDSubprogram
replaceFunction	include/IR/DebugInfoMetadata.h	/^  void replaceFunction(std::nullptr_t) { replaceOperandWith(7, nullptr); }$/;"	f	class:llvm::MDSubprogram
replaceGlobalVariables	include/IR/DebugInfoMetadata.h	/^  void replaceGlobalVariables(MDTuple *N) { replaceOperandWith(7, N); }$/;"	f	class:llvm::MDCompileUnit
replaceSubprograms	include/IR/DebugInfoMetadata.h	/^  void replaceSubprograms(MDTuple *N) { replaceOperandWith(6, N); }$/;"	f	class:llvm::MDCompileUnit
replaceTemplateParams	include/IR/DebugInfoMetadata.h	/^  void replaceTemplateParams(MDTuple *TemplateParams) {$/;"	f	class:llvm::MDCompositeTypeBase
replaceUsesOfWithOnConstant	include/IR/Constant.h	/^  virtual void replaceUsesOfWithOnConstant(Value *, Value *, Use *) {$/;"	f	class:llvm::Constant
replaceVTableHolder	include/IR/DebugInfoMetadata.h	/^  void replaceVTableHolder(Metadata *VTableHolder) {$/;"	f	class:llvm::MDCompositeTypeBase
replaceWithDistinct	include/IR/Metadata.h	/^  replaceWithDistinct(std::unique_ptr<T, TempMDNodeDeleter> N) {$/;"	f	class:llvm::MDNode
replaceWithPermanent	include/IR/Metadata.h	/^  replaceWithPermanent(std::unique_ptr<T, TempMDNodeDeleter> N) {$/;"	f	class:llvm::MDNode
replaceWithUniqued	include/IR/Metadata.h	/^  replaceWithUniqued(std::unique_ptr<T, TempMDNodeDeleter> N) {$/;"	f	class:llvm::MDNode
reserveClauses	include/IR/Instructions.h	/^  void reserveClauses(unsigned Size) { growOperands(Size); }$/;"	f	class:llvm::LandingPadInst
reset	include/IR/Metadata.h	/^  void reset() {$/;"	f	class:llvm::MDOperand
reset	include/IR/Metadata.h	/^  void reset(Metadata *MD, Metadata *Owner) {$/;"	f	class:llvm::MDOperand
reset	include/IR/TrackingMDRef.h	/^  void reset() { Ref.reset(); }$/;"	f	class:llvm::TypedTrackingMDRef
reset	include/IR/TrackingMDRef.h	/^  void reset() {$/;"	f	class:llvm::TrackingMDRef
reset	include/IR/TrackingMDRef.h	/^  void reset(Metadata *MD) {$/;"	f	class:llvm::TrackingMDRef
reset	include/IR/TrackingMDRef.h	/^  void reset(T *MD) { Ref.reset(static_cast<Metadata *>(MD)); }$/;"	f	class:llvm::TypedTrackingMDRef
reset	lib/Metadata/Namer.cpp	/^	void Namer::reset(Module& M) {$/;"	f	class:corelab::Namer
resize	include/IR/ValueMap.h	/^  void resize(size_t Size) { Map.resize(Size); }$/;"	f	class:llvm::ValueMap
resolve	include/IR/DebugInfo.h	/^T DIRef<T>::resolve(const DITypeIdentifierMap &Map) const {$/;"	f	class:llvm::DIRef
restoreIP	include/IR/IRBuilder.h	/^  void restoreIP(InsertPoint IP) {$/;"	f	class:llvm::IRBuilderBase
retrack	include/IR/MetadataTracking.h	/^  static bool retrack(Metadata *&MD, Metadata *&New) {$/;"	f	class:llvm::MetadataTracking
retrack	include/IR/TrackingMDRef.h	/^  void retrack(TrackingMDRef &X) {$/;"	f	class:llvm::TrackingMDRef
reverse_iterator	include/IR/BasicBlock.h	/^  typedef InstListType::reverse_iterator reverse_iterator;$/;"	t	class:llvm::BasicBlock
reverse_iterator	include/IR/Module.h	/^  typedef FunctionListType::reverse_iterator             reverse_iterator;$/;"	t	class:llvm::Module
run	include/IR/PassManager.h	/^  PreservedAnalyses run(IRUnitT &Arg, AnalysisManager<IRUnitT> *AM) {$/;"	f	struct:llvm::InvalidateAnalysisPass
run	include/IR/PassManager.h	/^  PreservedAnalyses run(IRUnitT &Arg, AnalysisManager<IRUnitT> *AM) {$/;"	f	struct:llvm::RequireAnalysisPass
run	include/IR/PassManager.h	/^  PreservedAnalyses run(IRUnitT &IR, AnalysisManager<IRUnitT> *AM = nullptr) {$/;"	f	class:llvm::PassManager
run	include/IR/PassManager.h	/^  PreservedAnalyses run(Module &M, ModuleAnalysisManager *AM) {$/;"	f	class:llvm::ModuleToFunctionPassAdaptor
run	include/IR/PassManager.h	/^  Result run(Function &) { return Result(*MAM); }$/;"	f	class:llvm::ModuleAnalysisManagerFunctionProxy
run	include/IR/PassManager.h	/^  template <typename IRUnitT> PreservedAnalyses run(IRUnitT &Arg) {$/;"	f	struct:llvm::InvalidateAllAnalysesPass
runOnCall	lib/Metadata/Namer.cpp	/^	bool Namer::runOnCall(uint16_t bbid, uint16_t includedFunctionId, uint16_t callingFunctionId) {$/;"	f	class:corelab::Namer
runOnFunction	lib/CAMP/CAMP.cpp	/^bool CAMPInstaller::runOnFunction(Function *F)$/;"	f	class:CAMPInstaller
runOnFunction	lib/Metadata/Namer.cpp	/^	bool Namer::runOnFunction(Function &F) {$/;"	f	class:corelab::Namer
runOnLoop	lib/CAMP/CAMP.cpp	/^bool CAMPInstaller::runOnLoop(Loop *L, FuncID functionId)$/;"	f	class:CAMPInstaller
runOnLoop	lib/Metadata/Namer.cpp	/^	bool Namer::runOnLoop(Loop *L, uint16_t functionId) {$/;"	f	class:corelab::Namer
runOnModule	lib/AliasAnalysis/IndirectCallAnal.cpp	/^bool IndirectCallAnal::runOnModule(Module &M) {$/;"	f	class:IndirectCallAnal
runOnModule	lib/AliasAnalysis/LoopTraverse.cpp	/^bool LoopTraverse::runOnModule(Module &M) {$/;"	f	class:LoopTraverse
runOnModule	lib/AliasAnalysis/RecursiveFuncAnal.cpp	/^bool RecursiveFuncAnal::runOnModule(Module &M) {$/;"	f	class:RecursiveFuncAnal
runOnModule	lib/CAMP/CAMP.cpp	/^bool CAMPInstaller::runOnModule(Module& M) {$/;"	f	class:CAMPInstaller
runOnModule	lib/CAMP/CampCache.cpp	/^bool CAMPCache::runOnModule(Module& M) {$/;"	f	class:CAMPCache
runOnModule	lib/CAMP/CampExectime.cpp	/^bool CAMPExectime::runOnModule(Module& M) {$/;"	f	class:CAMPExectime
runOnModule	lib/CAMP/CampPlain.cpp	/^bool CAMPPlain::runOnModule(Module& M) {$/;"	f	class:CAMPPlain
runOnModule	lib/CAMP/ContextTreeBuilder.cpp	/^bool ContextTreeBuilder::runOnModule(Module& M) {$/;"	f	class:ContextTreeBuilder
runOnModule	lib/CAMP/RegiInterIterDepFinder.cpp	/^bool RegiInterIterDepFinder::runOnModule(Module& M) {$/;"	f	class:RegiInterIterDepFinder
runOnModule	lib/Metadata/EsperantoNamer.cpp	/^	bool EsperantoNamer::runOnModule(Module &M) {$/;"	f	class:corelab::EsperantoNamer
runOnModule	lib/Metadata/LoadNamer.cpp	/^	bool LoadNamer::runOnModule(Module& M)$/;"	f	class:corelab::LoadNamer
runOnModule	lib/Metadata/Namer.cpp	/^	bool Namer::runOnModule(Module &M) {$/;"	f	class:corelab::Namer
runOnModule	lib/ObjTrace/CtxObjtrace.cpp	/^bool CtxObjtrace::runOnModule(Module& M) {$/;"	f	class:CtxObjtrace
runOnModule	lib/ObjTrace/ObjTrace.cpp	/^bool ObjTrace::runOnModule(Module& M) {$/;"	f	class:ObjTrace
runOnModule	lib/Utilities/FindFunctionExitBB.cpp	/^bool FindFunctionExitBB::runOnModule(Module &M) {$/;"	f	class:FindFunctionExitBB
runOnModuleImpl	lib/Metadata/Namer.cpp	/^	void Namer::runOnModuleImpl(Module &M)$/;"	f	class:corelab::Namer
s	include/IR/Operator.h	/^  void *operator new(size_t s) = delete;$/;"	m	class:llvm::Operator
s	include/IR/Statepoint.h	/^  void *operator new(size_t s) = delete;$/;"	m	class:llvm::StatepointBase
sampling	tools/campSampling/campRuntime.cpp	/^static uint16_t sampling; \/\/doesn't do anything when it is not 0x0000;$/;"	v	file:
saveAndClearIP	include/IR/IRBuilder.h	/^  InsertPoint saveAndClearIP() {$/;"	f	class:llvm::IRBuilderBase
saveIP	include/IR/IRBuilder.h	/^  InsertPoint saveIP() const {$/;"	f	class:llvm::IRBuilderBase
scope_count	include/IR/DebugInfo.h	/^  unsigned scope_count() const { return Scopes.size(); }$/;"	f	class:llvm::DebugInfoFinder
scope_iterator	include/IR/DebugInfo.h	/^  typedef SmallVectorImpl<DIScope>::const_iterator scope_iterator;$/;"	t	class:llvm::DebugInfoFinder
scopes	include/IR/DebugInfo.h	/^  iterator_range<scope_iterator> scopes() const {$/;"	f	class:llvm::DebugInfoFinder
searchMaxLoopDepth	lib/AliasAnalysis/LoopTraverse.cpp	/^void LoopTraverse::searchMaxLoopDepth(){$/;"	f	class:LoopTraverse
second	include/IR/ValueMap.h	/^    ValueT& second;$/;"	m	struct:llvm::ValueMapIterator::ValueTypeProxy
second	include/IR/ValueMap.h	/^    const ValueT& second;$/;"	m	struct:llvm::ValueMapConstIterator::ValueTypeProxy
segvAction	tools/camp/ShadowMemory.hpp	/^		static struct sigaction	segvAction;$/;"	m	class:ShadowMemoryManager	typeref:struct:ShadowMemoryManager::sigaction
segvAction	tools/camp/campRuntime.cpp	/^struct sigaction ShadowMemoryManager::segvAction; \/\/Page Fault hooking mechanism$/;"	m	class:ShadowMemoryManager	typeref:struct:ShadowMemoryManager::	file:
segvAction	tools/campSampling/ShadowMemory.hpp	/^		static struct sigaction	segvAction;$/;"	m	class:ShadowMemoryManager	typeref:struct:ShadowMemoryManager::sigaction
segvAction	tools/campSampling/campRuntime.cpp	/^struct sigaction ShadowMemoryManager::segvAction; \/\/Page Fault hooking mechanism$/;"	m	class:ShadowMemoryManager	typeref:struct:ShadowMemoryManager::	file:
set	include/IR/Value.h	/^void Use::set(Value *V) {$/;"	f	class:llvm::Use
setAddress	include/IR/Instructions.h	/^  void setAddress(Value *V) { setOperand(0, V); }$/;"	f	class:llvm::IndirectBrInst
setAlignment	include/IR/IntrinsicInst.h	/^    void setAlignment(Constant* A) {$/;"	f	class:llvm::MemIntrinsic
setAllowReciprocal	include/IR/Operator.h	/^  void setAllowReciprocal() { Flags |= AllowReciprocal; }$/;"	f	class:llvm::FastMathFlags
setArgOperand	include/IR/Instructions.h	/^  void setArgOperand(unsigned i, Value *v) { setOperand(i, v); }$/;"	f	class:llvm::CallInst
setArgOperand	include/IR/Instructions.h	/^  void setArgOperand(unsigned i, Value *v) { setOperand(i, v); }$/;"	f	class:llvm::InvokeInst
setArgument	include/IR/CallSite.h	/^  void setArgument(unsigned ArgNo, Value* newVal) {$/;"	f	class:llvm::CallSiteBase
setArrays	include/IR/DebugInfo.h	/^  void setArrays(DITypedArray<T> Elements, DIArray TParams = DIArray()) {$/;"	f	class:llvm::DICompositeType
setAtomic	include/IR/Instructions.h	/^  void setAtomic(AtomicOrdering Ordering,$/;"	f	class:llvm::LoadInst
setAtomic	include/IR/Instructions.h	/^  void setAtomic(AtomicOrdering Ordering,$/;"	f	class:llvm::StoreInst
setAttributes	include/IR/CallSite.h	/^  void setAttributes(const AttributeSet &PAL) {$/;"	f	class:llvm::CallSiteBase
setAttributes	include/IR/Function.h	/^  void setAttributes(AttributeSet attrs) { AttributeSets = attrs; }$/;"	f	class:llvm::Function
setAttributes	include/IR/Instructions.h	/^  void setAttributes(const AttributeSet &Attrs) { AttributeList = Attrs; }$/;"	f	class:llvm::CallInst
setAttributes	include/IR/Instructions.h	/^  void setAttributes(const AttributeSet &Attrs) { AttributeList = Attrs; }$/;"	f	class:llvm::InvokeInst
setCalledFunction	include/IR/CallSite.h	/^  void setCalledFunction(Value *V) {$/;"	f	class:llvm::CallSiteBase
setCalledFunction	include/IR/Instructions.h	/^  void setCalledFunction(Value* Fn) {$/;"	f	class:llvm::CallInst
setCalledFunction	include/IR/Instructions.h	/^  void setCalledFunction(Value* Fn) {$/;"	f	class:llvm::InvokeInst
setCallingConv	include/IR/CallSite.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::CallSiteBase
setCallingConv	include/IR/Function.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::Function
setCallingConv	include/IR/Instructions.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::CallInst
setCallingConv	include/IR/Instructions.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::InvokeInst
setCanReturnTwice	include/IR/Instructions.h	/^  void setCanReturnTwice() {$/;"	f	class:llvm::CallInst
setCannotDuplicate	include/IR/Function.h	/^  void setCannotDuplicate() {$/;"	f	class:llvm::Function
setCannotDuplicate	include/IR/Instructions.h	/^  void setCannotDuplicate() {$/;"	f	class:llvm::CallInst
setCannotDuplicate	include/IR/Instructions.h	/^  void setCannotDuplicate() {$/;"	f	class:llvm::InvokeInst
setCleanup	include/IR/Instructions.h	/^  void setCleanup(bool V) {$/;"	f	class:llvm::LandingPadInst
setComdat	include/IR/GlobalObject.h	/^  void setComdat(Comdat *C) { ObjComdat = C; }$/;"	f	class:llvm::GlobalObject
setCondition	include/IR/Instructions.h	/^  void setCondition(Value *V) { setOperand(0, V); }$/;"	f	class:llvm::SwitchInst
setCondition	include/IR/Instructions.h	/^  void setCondition(Value *V) {$/;"	f	class:llvm::BranchInst
setConstant	include/IR/GlobalVariable.h	/^  void setConstant(bool Val) { isConstantGlobal = Val; }$/;"	f	class:llvm::GlobalVariable
setDLLStorageClass	include/IR/GlobalValue.h	/^  void setDLLStorageClass(DLLStorageClassTypes C) { DllStorageClass = C; }$/;"	f	class:llvm::GlobalValue
setDebugLoc	include/IR/Instruction.h	/^  void setDebugLoc(DebugLoc Loc) { DbgLoc = std::move(Loc); }$/;"	f	class:llvm::Instruction
setDefaultDest	include/IR/Instructions.h	/^  void setDefaultDest(BasicBlock *DefaultCase) {$/;"	f	class:llvm::SwitchInst
setDepth	include/IR/LegacyPassManagers.h	/^  void setDepth(unsigned newDepth) { Depth = newDepth; }$/;"	f	class:llvm::PMDataManager
setDest	include/IR/IntrinsicInst.h	/^    void setDest(Value *Ptr) {$/;"	f	class:llvm::MemIntrinsic
setDoesNotAccessMemory	include/IR/CallSite.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::CallSiteBase
setDoesNotAccessMemory	include/IR/Function.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::Function
setDoesNotAccessMemory	include/IR/Function.h	/^  void setDoesNotAccessMemory(unsigned n) {$/;"	f	class:llvm::Function
setDoesNotAccessMemory	include/IR/Instructions.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::CallInst
setDoesNotAccessMemory	include/IR/Instructions.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::InvokeInst
setDoesNotAlias	include/IR/Function.h	/^  void setDoesNotAlias(unsigned n) {$/;"	f	class:llvm::Function
setDoesNotCapture	include/IR/Function.h	/^  void setDoesNotCapture(unsigned n) {$/;"	f	class:llvm::Function
setDoesNotReturn	include/IR/CallSite.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::CallSiteBase
setDoesNotReturn	include/IR/Function.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::Function
setDoesNotReturn	include/IR/Instructions.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::CallInst
setDoesNotReturn	include/IR/Instructions.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::InvokeInst
setDoesNotThrow	include/IR/CallSite.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::CallSiteBase
setDoesNotThrow	include/IR/Function.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::Function
setDoesNotThrow	include/IR/Instructions.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::CallInst
setDoesNotThrow	include/IR/Instructions.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::InvokeInst
setEdgeWeight	include/corelab/Utilities/ProfileInfo.h	/^    void setEdgeWeight(Edge e, double w) {$/;"	f	class:llvm::ProfileInfoT
setExternallyInitialized	include/IR/GlobalVariable.h	/^  void setExternallyInitialized(bool Val) {$/;"	f	class:llvm::GlobalVariable
setFailureOrdering	include/IR/Instructions.h	/^  void setFailureOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::AtomicCmpXchgInst
setFastMathFlags	include/IR/Operator.h	/^  void setFastMathFlags(FastMathFlags FMF) {$/;"	f	class:llvm::FPMathOperator
setFlags	include/IR/DebugInfoMetadata.h	/^  void setFlags(unsigned NewFlags) {$/;"	f	class:llvm::MDType
setFunctions	lib/CAMP/CAMP.cpp	/^void CAMPInstaller::setFunctions(Module &M)$/;"	f	class:CAMPInstaller
setFunctions	lib/CAMP/CampExectime.cpp	/^void CAMPExectime::setFunctions(Module &M)$/;"	f	class:CAMPExectime
setFunctions	lib/CAMP/CampPlain.cpp	/^void CAMPPlain::setFunctions(Module &M)$/;"	f	class:CAMPPlain
setFunctions	lib/ObjTrace/CtxObjtrace.cpp	/^void CtxObjtrace::setFunctions(Module &M)$/;"	f	class:CtxObjtrace
setFunctions	lib/ObjTrace/ObjTrace.cpp	/^void ObjTrace::setFunctions(Module &M) {$/;"	f	class:ObjTrace
setGlobalValueSubClassData	include/IR/GlobalValue.h	/^  void setGlobalValueSubClassData(unsigned V) {$/;"	f	class:llvm::GlobalValue
setHasAllowReciprocal	include/IR/Operator.h	/^  void setHasAllowReciprocal(bool B) {$/;"	f	class:llvm::FPMathOperator
setHasMetadataHashEntry	include/IR/Instruction.h	/^  void setHasMetadataHashEntry(bool V) {$/;"	f	class:llvm::Instruction
setHasNoInfs	include/IR/Operator.h	/^  void setHasNoInfs(bool B) {$/;"	f	class:llvm::FPMathOperator
setHasNoNaNs	include/IR/Operator.h	/^  void setHasNoNaNs(bool B) {$/;"	f	class:llvm::FPMathOperator
setHasNoSignedWrap	include/IR/Operator.h	/^  void setHasNoSignedWrap(bool B) {$/;"	f	class:llvm::OverflowingBinaryOperator
setHasNoSignedZeros	include/IR/Operator.h	/^  void setHasNoSignedZeros(bool B) {$/;"	f	class:llvm::FPMathOperator
setHasNoUnsignedWrap	include/IR/Operator.h	/^  void setHasNoUnsignedWrap(bool B) {$/;"	f	class:llvm::OverflowingBinaryOperator
setHasUWTable	include/IR/Function.h	/^  void setHasUWTable() {$/;"	f	class:llvm::Function
setHasUnsafeAlgebra	include/IR/Operator.h	/^  void setHasUnsafeAlgebra(bool B) {$/;"	f	class:llvm::FPMathOperator
setHash	include/IR/DebugInfoMetadata.h	/^  void setHash(unsigned Hash) { SubclassData32 = Hash; }$/;"	f	class:llvm::GenericDebugNode
setHash	include/IR/Metadata.h	/^  void setHash(unsigned Hash) { SubclassData32 = Hash; }$/;"	f	class:llvm::MDTuple
setID	include/corelab/Metadata/NamedMetadata.h	/^			void setID(int id_){$/;"	f	class:corelab::DeviceMapEntry
setIncomingBlock	include/IR/Instructions.h	/^  void setIncomingBlock(unsigned i, BasicBlock *BB) {$/;"	f	class:llvm::PHINode
setIncomingValue	include/IR/Instructions.h	/^  void setIncomingValue(unsigned i, Value *V) {$/;"	f	class:llvm::PHINode
setIniFini	lib/CAMP/CAMP.cpp	/^void CAMPInstaller::setIniFini(Module& M)$/;"	f	class:CAMPInstaller
setIniFini	lib/CAMP/CampExectime.cpp	/^void CAMPExectime::setIniFini(Module& M)$/;"	f	class:CAMPExectime
setIniFini	lib/CAMP/CampPlain.cpp	/^void CAMPPlain::setIniFini(Module& M)$/;"	f	class:CAMPPlain
setIniFini	lib/ObjTrace/CtxObjtrace.cpp	/^void CtxObjtrace::setIniFini(Module& M)$/;"	f	class:CtxObjtrace
setIniFini	lib/ObjTrace/ObjTrace.cpp	/^void ObjTrace::setIniFini(Module& M) {$/;"	f	class:ObjTrace
setInstructionSubclassData	include/IR/Instruction.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::Instruction
setInstructionSubclassData	include/IR/Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::AllocaInst
setInstructionSubclassData	include/IR/Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::AtomicCmpXchgInst
setInstructionSubclassData	include/IR/Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::AtomicRMWInst
setInstructionSubclassData	include/IR/Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::CallInst
setInstructionSubclassData	include/IR/Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::FenceInst
setInstructionSubclassData	include/IR/Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::InvokeInst
setInstructionSubclassData	include/IR/Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::LoadInst
setInstructionSubclassData	include/IR/Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::StoreInst
setIsExact	include/IR/Operator.h	/^  void setIsExact(bool B) {$/;"	f	class:llvm::PossiblyExactOperator
setIsInBounds	include/IR/Operator.h	/^  void setIsInBounds(bool B) {$/;"	f	class:llvm::GEPOperator
setIsNoInline	include/IR/CallSite.h	/^  void setIsNoInline(bool Value = true) {$/;"	f	class:llvm::CallSiteBase
setIsNoInline	include/IR/Instructions.h	/^  void setIsNoInline() {$/;"	f	class:llvm::CallInst
setIsNoInline	include/IR/Instructions.h	/^  void setIsNoInline() {$/;"	f	class:llvm::InvokeInst
setLength	include/IR/IntrinsicInst.h	/^    void setLength(Value *L) {$/;"	f	class:llvm::MemIntrinsic
setLinkage	include/IR/GlobalValue.h	/^  void setLinkage(LinkageTypes LT) {$/;"	f	class:llvm::GlobalValue
setMaps	lib/Metadata/EsperantoNamer.cpp	/^	void EsperantoNamer::setMaps() {$/;"	f	class:corelab::EsperantoNamer
setModuleIdentifier	include/IR/Module.h	/^  void setModuleIdentifier(StringRef ID) { ModuleID = ID; }$/;"	f	class:llvm::Module
setModuleInlineAsm	include/IR/Module.h	/^  void setModuleInlineAsm(StringRef Asm) {$/;"	f	class:llvm::Module
setName	include/corelab/Metadata/NamedMetadata.h	/^			void setName(const char* name){$/;"	f	class:corelab::DeviceMapEntry
setNoInfs	include/IR/Operator.h	/^  void setNoInfs()          { Flags |= NoInfs; }$/;"	f	class:llvm::FastMathFlags
setNoNaNs	include/IR/Operator.h	/^  void setNoNaNs()          { Flags |= NoNaNs; }$/;"	f	class:llvm::FastMathFlags
setNoSignedZeros	include/IR/Operator.h	/^  void setNoSignedZeros()   { Flags |= NoSignedZeros; }$/;"	f	class:llvm::FastMathFlags
setNormalDest	include/IR/Instructions.h	/^  void setNormalDest(BasicBlock *B) {$/;"	f	class:llvm::InvokeInst
setOnlyReadsMemory	include/IR/CallSite.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::CallSiteBase
setOnlyReadsMemory	include/IR/Function.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::Function
setOnlyReadsMemory	include/IR/Function.h	/^  void setOnlyReadsMemory(unsigned n) {$/;"	f	class:llvm::Function
setOnlyReadsMemory	include/IR/Instructions.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::CallInst
setOnlyReadsMemory	include/IR/Instructions.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::InvokeInst
setOperand	include/IR/User.h	/^  void setOperand(unsigned i, Value *Val) {$/;"	f	class:llvm::User
setOperation	include/IR/Instructions.h	/^  void setOperation(BinOp Operation) {$/;"	f	class:llvm::AtomicRMWInst
setOrdering	include/IR/Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::AtomicRMWInst
setOrdering	include/IR/Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::FenceInst
setOrdering	include/IR/Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::LoadInst
setOrdering	include/IR/Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::StoreInst
setParent	include/IR/Metadata.h	/^  void setParent(Module *M) { Parent = M; }$/;"	f	class:llvm::NamedMDNode
setPredicate	include/IR/InstrTypes.h	/^  void setPredicate(Predicate P) { setInstructionSubclassData(P); }$/;"	f	class:llvm::CmpInst
setPrev	include/IR/Use.h	/^  void setPrev(Use **NewPrev) { Prev.setPointer(NewPrev); }$/;"	f	class:llvm::Use
setPrevPtr	include/IR/ValueHandle.h	/^  void setPrevPtr(ValueHandleBase **Ptr) { PrevPair.setPointer(Ptr); }$/;"	f	class:llvm::ValueHandleBase
setRawValPtr	include/IR/ValueHandle.h	/^  void setRawValPtr(Value *P) { ThePtr = P; }$/;"	f	class:llvm::AssertingVH
setRawValPtr	include/IR/ValueHandle.h	/^  void setRawValPtr(Value *P) { ValueHandleBase::operator=(P); }$/;"	f	class:llvm::AssertingVH
setSelectionKind	include/IR/Comdat.h	/^  void setSelectionKind(SelectionKind Val) { SK = Val; }$/;"	f	class:llvm::Comdat
setSource	include/IR/IntrinsicInst.h	/^    void setSource(Value *Ptr) {$/;"	f	class:llvm::MemTransferInst
setSubclassData	include/IR/Type.h	/^  void setSubclassData(unsigned val) {$/;"	f	class:llvm::Type
setSuccessOrdering	include/IR/Instructions.h	/^  void setSuccessOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::AtomicCmpXchgInst
setSuccessor	include/IR/InstrTypes.h	/^  void setSuccessor(unsigned idx, BasicBlock *B) {$/;"	f	class:llvm::TerminatorInst
setSuccessor	include/IR/Instructions.h	/^    void setSuccessor(BasicBlock *S) {$/;"	f	class:llvm::SwitchInst::CaseIt
setSuccessor	include/IR/Instructions.h	/^  void setSuccessor(unsigned i, BasicBlock *NewSucc) {$/;"	f	class:llvm::IndirectBrInst
setSuccessor	include/IR/Instructions.h	/^  void setSuccessor(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:llvm::BranchInst
setSuccessor	include/IR/Instructions.h	/^  void setSuccessor(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:llvm::InvokeInst
setSuccessor	include/IR/Instructions.h	/^  void setSuccessor(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:llvm::SwitchInst
setSynchScope	include/IR/Instructions.h	/^  void setSynchScope(SynchronizationScope SynchScope) {$/;"	f	class:llvm::AtomicCmpXchgInst
setSynchScope	include/IR/Instructions.h	/^  void setSynchScope(SynchronizationScope SynchScope) {$/;"	f	class:llvm::AtomicRMWInst
setSynchScope	include/IR/Instructions.h	/^  void setSynchScope(SynchronizationScope xthread) {$/;"	f	class:llvm::FenceInst
setSynchScope	include/IR/Instructions.h	/^  void setSynchScope(SynchronizationScope xthread) {$/;"	f	class:llvm::LoadInst
setSynchScope	include/IR/Instructions.h	/^  void setSynchScope(SynchronizationScope xthread) {$/;"	f	class:llvm::StoreInst
setTailCall	include/IR/Instructions.h	/^  void setTailCall(bool isTC = true) {$/;"	f	class:llvm::CallInst
setTailCallKind	include/IR/Instructions.h	/^  void setTailCallKind(TailCallKind TCK) {$/;"	f	class:llvm::CallInst
setTargetTriple	include/IR/Module.h	/^  void setTargetTriple(StringRef T) { TargetTriple = T; }$/;"	f	class:llvm::Module
setThreadLocal	include/IR/GlobalValue.h	/^  void setThreadLocal(bool Val) {$/;"	f	class:llvm::GlobalValue
setThreadLocalMode	include/IR/GlobalValue.h	/^  void setThreadLocalMode(ThreadLocalMode Val) {$/;"	f	class:llvm::GlobalValue
setTopLevelManager	include/IR/LegacyPassManagers.h	/^  void setTopLevelManager(PMTopLevelManager *T) { TPM = T; }$/;"	f	class:llvm::PMDataManager
setTypeID	include/IR/Type.h	/^  void setTypeID(TypeID ID) {$/;"	f	class:llvm::Type
setUnnamedAddr	include/IR/GlobalValue.h	/^  void setUnnamedAddr(bool Val) { UnnamedAddr = Val; }$/;"	f	class:llvm::GlobalValue
setUnsafeAlgebra	include/IR/Operator.h	/^  void setUnsafeAlgebra() {$/;"	f	class:llvm::FastMathFlags
setUnwindDest	include/IR/Instructions.h	/^  void setUnwindDest(BasicBlock *B) {$/;"	f	class:llvm::InvokeInst
setUsedWithInAlloca	include/IR/Instructions.h	/^  void setUsedWithInAlloca(bool V) {$/;"	f	class:llvm::AllocaInst
setValPtr	include/IR/ValueHandle.h	/^  void setValPtr(Value *P) {$/;"	f	class:llvm::CallbackVH
setValPtr	include/IR/ValueHandle.h	/^  void setValPtr(ValueTy *P) { setRawValPtr(GetAsValue(P)); }$/;"	f	class:llvm::AssertingVH
setValPtr	include/IR/ValueHandle.h	/^  void setValPtr(ValueTy *P) {$/;"	f	class:llvm::TrackingVH
setValue	include/IR/Instructions.h	/^    void setValue(ConstantInt *V) {$/;"	f	class:llvm::SwitchInst::CaseIt
setValue	include/IR/IntrinsicInst.h	/^    void setValue(Value *Val) {$/;"	f	class:llvm::MemSetInst
setValueName	include/IR/Value.h	/^  void setValueName(ValueName *VN) { NameAndIsUsedByMD.setPointer(VN); }$/;"	f	class:llvm::Value
setValueSubclassData	include/IR/BasicBlock.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::BasicBlock
setValueSubclassData	include/IR/Constants.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::ConstantExpr
setValueSubclassData	include/IR/Function.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::Function
setValueSubclassData	include/IR/InstrTypes.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::CmpInst
setValueSubclassData	include/IR/Instruction.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::Instruction
setValueSubclassData	include/IR/Value.h	/^  void setValueSubclassData(unsigned short D) { SubclassData = D; }$/;"	f	class:llvm::Value
setVisibility	include/IR/GlobalValue.h	/^  void setVisibility(VisibilityTypes V) {$/;"	f	class:llvm::GlobalValue
setVolatile	include/IR/Instructions.h	/^  void setVolatile(bool V) {$/;"	f	class:llvm::AtomicCmpXchgInst
setVolatile	include/IR/Instructions.h	/^  void setVolatile(bool V) {$/;"	f	class:llvm::AtomicRMWInst
setVolatile	include/IR/Instructions.h	/^  void setVolatile(bool V) {$/;"	f	class:llvm::LoadInst
setVolatile	include/IR/Instructions.h	/^  void setVolatile(bool V) {$/;"	f	class:llvm::StoreInst
setVolatile	include/IR/IntrinsicInst.h	/^    void setVolatile(Constant* V) {$/;"	f	class:llvm::MemIntrinsic
setWeak	include/IR/Instructions.h	/^  void setWeak(bool IsWeak) {$/;"	f	class:llvm::AtomicCmpXchgInst
shadowMemorySetting	tools/objtrace/objtraceruntime.cpp	/^void shadowMemorySetting (void *addr, size_t size, FullID fullId){$/;"	f
simplify_type	include/IR/Metadata.h	/^template <> struct simplify_type<MDOperand> {$/;"	s	namespace:llvm
simplify_type	include/IR/Metadata.h	/^template <> struct simplify_type<const MDOperand> {$/;"	s	namespace:llvm
simplify_type	include/IR/TrackingMDRef.h	/^template <> struct simplify_type<TrackingMDRef> {$/;"	s	namespace:llvm
simplify_type	include/IR/TrackingMDRef.h	/^template <> struct simplify_type<const TrackingMDRef> {$/;"	s	namespace:llvm
simplify_type	include/IR/TrackingMDRef.h	/^template <class T> struct simplify_type<TypedTrackingMDRef<T>> {$/;"	s	namespace:llvm
simplify_type	include/IR/TrackingMDRef.h	/^template <class T> struct simplify_type<const TypedTrackingMDRef<T>> {$/;"	s	namespace:llvm
simplify_type	include/IR/Use.h	/^template <> struct simplify_type<Use> {$/;"	s	namespace:llvm
simplify_type	include/IR/Use.h	/^template <> struct simplify_type<const Use> {$/;"	s	namespace:llvm
simplify_type	include/IR/User.h	/^template<> struct simplify_type<User::const_op_iterator> {$/;"	s	namespace:llvm
simplify_type	include/IR/User.h	/^template<> struct simplify_type<User::op_iterator> {$/;"	s	namespace:llvm
simplify_type	include/IR/ValueHandle.h	/^template<> struct simplify_type<WeakVH> {$/;"	s	namespace:llvm
size	include/IR/BasicBlock.h	/^  inline size_t                   size() const { return InstList.size();  }$/;"	f	class:llvm::BasicBlock
size	include/IR/CFG.h	/^  static size_t         size       (Function *F) { return F->size(); }$/;"	f	struct:llvm::GraphTraits
size	include/IR/CFG.h	/^  static size_t         size       (const Function *F) { return F->size(); }$/;"	f	struct:llvm::GraphTraits
size	include/IR/Function.h	/^  size_t                   size() const { return BasicBlocks.size();  }$/;"	f	class:llvm::Function
size	include/IR/Module.h	/^  size_t                  size() const  { return FunctionList.size(); }$/;"	f	class:llvm::Module
size	include/IR/TypeFinder.h	/^  size_t size() const { return StructTypes.size(); }$/;"	f	class:llvm::TypeFinder
size	include/IR/ValueMap.h	/^  size_type size() const { return Map.size(); }$/;"	f	class:llvm::ValueMap
size	include/IR/ValueSymbolTable.h	/^  inline unsigned size() const { return unsigned(vmap.size()); }$/;"	f	class:llvm::ValueSymbolTable
size	include/corelab/AliasAnalysis/RecursiveFuncAnal.hpp	/^      size_t                  size () const { return recFuncList.size();  }$/;"	f	class:corelab::RecursiveFuncAnal
size	lib/AliasAnalysis/RecursiveFuncAnal.hpp	/^      size_t                  size () const { return recFuncList.size();  }$/;"	f	class:corelab::RecursiveFuncAnal
size_t	include/IR/Metadata.h	/^  void *operator new(size_t) = delete;$/;"	m	class:llvm::MDNode
size_t	include/IR/User.h	/^  void *operator new(size_t) = delete;$/;"	m	class:llvm::User
size_type	include/IR/ValueMap.h	/^  typedef unsigned size_type;$/;"	t	class:llvm::ValueMap
smax_pred_ty	include/IR/PatternMatch.h	/^struct smax_pred_ty {$/;"	s	namespace:llvm::PatternMatch
smin_pred_ty	include/IR/PatternMatch.h	/^struct smin_pred_ty {$/;"	s	namespace:llvm::PatternMatch
sortUseList	include/IR/Value.h	/^template <class Compare> void Value::sortUseList(Compare Cmp) {$/;"	f	class:llvm::Value
specific_fpval	include/IR/PatternMatch.h	/^  specific_fpval(double V) : Val(V) {}$/;"	f	struct:llvm::PatternMatch::specific_fpval
specific_fpval	include/IR/PatternMatch.h	/^struct specific_fpval {$/;"	s	namespace:llvm::PatternMatch
specific_intval	include/IR/PatternMatch.h	/^  specific_intval(uint64_t V) : Val(V) {}$/;"	f	struct:llvm::PatternMatch::specific_intval
specific_intval	include/IR/PatternMatch.h	/^struct specific_intval {$/;"	s	namespace:llvm::PatternMatch
specificval_ty	include/IR/PatternMatch.h	/^  specificval_ty(const Value *V) : Val(V) {}$/;"	f	struct:llvm::PatternMatch::specificval_ty
specificval_ty	include/IR/PatternMatch.h	/^struct specificval_ty {$/;"	s	namespace:llvm::PatternMatch
srcInstrID	include/corelab/CAMP/campCommon.h	/^			InstrID 	srcInstrID;												\/\/ Source Instruction ID$/;"	m	struct:corelab::CAMP::__anon1
srcInstrID	lib/CAMP/campCommon.h	/^			InstrID 	srcInstrID;												\/\/ Source Instruction ID$/;"	m	struct:corelab::CAMP::__anon25
srcStkCntxID	include/corelab/CAMP/campCommon.h	/^			CntxID 		srcStkCntxID[MAX_CNTX_LV + 1];		\/\/ Source Context ID Stack$/;"	m	struct:corelab::CAMP::__anon1
srcStkCntxID	lib/CAMP/campCommon.h	/^			CntxID 		srcStkCntxID[MAX_CNTX_LV + 1];		\/\/ Source Context ID Stack$/;"	m	struct:corelab::CAMP::__anon25
start	tools/camp/x86timer.hpp	/^void start()$/;"	f	class:x86timer
start	tools/objtrace/x86timer.hpp	/^void start()$/;"	f	class:x86timer
start_	tools/camp/x86timer.hpp	/^uint64_t start_,end_;$/;"	m	class:x86timer
start_	tools/objtrace/x86timer.hpp	/^uint64_t start_,end_;$/;"	m	class:x86timer
start_count	tools/camp/armtimer.hpp	/^unsigned int start_count;$/;"	m	class:armtimer
start_time	tools/camp/armtimer.hpp	/^struct timeval start_time, end_time;$/;"	m	class:armtimer	typeref:struct:armtimer::timeval
start_total_time	tools/camp/campExecRuntime.cpp	/^static uint64_t start_total_time;$/;"	v	file:
statepoint	include/IR/Statepoint.h	/^  const Instruction *statepoint() {$/;"	f	class:llvm::GCRelocateOperands
stdLibFunCalls	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			IndirectCallList stdLibFunCalls;$/;"	m	class:corelab::IndirectCallAnal
stdLibFunCalls	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			IndirectCallList stdLibFunCalls;$/;"	m	class:corelab::IndirectCallAnal
stdLibFunList	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			std::unordered_set<std::string> stdLibFunList;$/;"	m	class:corelab::IndirectCallAnal
stdLibFunList	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			std::unordered_set<std::string> stdLibFunList;$/;"	m	class:corelab::IndirectCallAnal
stop	tools/camp/x86timer.hpp	/^uint64_t stop()$/;"	f	class:x86timer
stop	tools/objtrace/x86timer.hpp	/^uint64_t stop()$/;"	f	class:x86timer
stopTag	include/IR/Use.h	/^  enum PrevPtrTag { zeroDigitTag, oneDigitTag, stopTag, fullStopTag };$/;"	e	enum:llvm::Use::PrevPtrTag
stop_perfcounter	tools/camp/armtimer.hpp	/^void stop_perfcounter (void)$/;"	f	class:armtimer
storeCount	include/corelab/Metadata/Metadata.h	/^			uint16_t storeCount;$/;"	m	class:corelab::Namer
storeElem	tools/camp/campRuntime.h	/^	StoreHistoryElem storeElem;$/;"	m	struct:HistoryElem
storeElem	tools/campSampling/campRuntime.h	/^	StoreHistoryElem storeElem;$/;"	m	struct:HistoryElem
storeIdMap	tools/objtrace/objtraceruntime.cpp	/^LoadStoreMap *storeIdMap;$/;"	v
stripAndAccumulateInBoundsConstantOffsets	include/IR/Value.h	/^  const Value *stripAndAccumulateInBoundsConstantOffsets(const DataLayout &DL,$/;"	f	class:llvm::Value
stripInBoundsConstantOffsets	include/IR/Value.h	/^  const Value *stripInBoundsConstantOffsets() const {$/;"	f	class:llvm::Value
stripInBoundsOffsets	include/IR/Value.h	/^  const Value *stripInBoundsOffsets() const {$/;"	f	class:llvm::Value
stripPointerCasts	include/IR/Constant.h	/^  Constant *stripPointerCasts() {$/;"	f	class:llvm::Constant
stripPointerCasts	include/IR/Constant.h	/^  const Constant *stripPointerCasts() const {$/;"	f	class:llvm::Constant
stripPointerCasts	include/IR/Value.h	/^  const Value *stripPointerCasts() const {$/;"	f	class:llvm::Value
stripPointerCastsNoFollowAliases	include/IR/Value.h	/^  const Value *stripPointerCastsNoFollowAliases() const {$/;"	f	class:llvm::Value
subprogram_count	include/IR/DebugInfo.h	/^  unsigned subprogram_count() const { return SPs.size(); }$/;"	f	class:llvm::DebugInfoFinder
subprogram_iterator	include/IR/DebugInfo.h	/^  typedef SmallVectorImpl<DISubprogram>::const_iterator subprogram_iterator;$/;"	t	class:llvm::DebugInfoFinder
subprograms	include/IR/DebugInfo.h	/^  iterator_range<subprogram_iterator> subprograms() const {$/;"	f	class:llvm::DebugInfoFinder
subtype_begin	include/IR/Type.h	/^  subtype_iterator subtype_begin() const { return ContainedTys; }$/;"	f	class:llvm::Type
subtype_end	include/IR/Type.h	/^  subtype_iterator subtype_end() const { return &ContainedTys[NumContainedTys];}$/;"	f	class:llvm::Type
subtype_iterator	include/IR/Type.h	/^  typedef Type * const *subtype_iterator;$/;"	t	class:llvm::Type
subtype_rbegin	include/IR/Type.h	/^  subtype_reverse_iterator subtype_rbegin() const {$/;"	f	class:llvm::Type
subtype_rend	include/IR/Type.h	/^  subtype_reverse_iterator subtype_rend() const {$/;"	f	class:llvm::Type
subtype_reverse_iterator	include/IR/Type.h	/^  typedef std::reverse_iterator<subtype_iterator> subtype_reverse_iterator;$/;"	t	class:llvm::Type
subtypes	include/IR/Type.h	/^  ArrayRef<Type*> subtypes() const {$/;"	f	class:llvm::Type
succ_begin	include/IR/CFG.h	/^inline succ_const_iterator succ_begin(const BasicBlock *BB) {$/;"	f	namespace:llvm
succ_begin	include/IR/CFG.h	/^inline succ_iterator succ_begin(BasicBlock *BB) {$/;"	f	namespace:llvm
succ_const_iterator	include/IR/CFG.h	/^                     const BasicBlock> succ_const_iterator;$/;"	t	namespace:llvm
succ_const_range	include/IR/CFG.h	/^typedef llvm::iterator_range<succ_const_iterator> succ_const_range;$/;"	t	namespace:llvm
succ_empty	include/IR/CFG.h	/^inline bool succ_empty(const BasicBlock *BB) {$/;"	f	namespace:llvm
succ_end	include/IR/CFG.h	/^inline succ_const_iterator succ_end(const BasicBlock *BB) {$/;"	f	namespace:llvm
succ_end	include/IR/CFG.h	/^inline succ_iterator succ_end(BasicBlock *BB) {$/;"	f	namespace:llvm
succ_iterator	include/IR/CFG.h	/^typedef SuccIterator<TerminatorInst*, BasicBlock> succ_iterator;$/;"	t	namespace:llvm
succ_range	include/IR/CFG.h	/^typedef llvm::iterator_range<succ_iterator> succ_range;$/;"	t	namespace:llvm
successors	include/IR/CFG.h	/^inline succ_const_range successors(const BasicBlock *BB) {$/;"	f	namespace:llvm
successors	include/IR/CFG.h	/^inline succ_range successors(BasicBlock *BB) {$/;"	f	namespace:llvm
sum	tools/camp/x86timer.hpp	/^double sum;$/;"	m	class:x86timer
sum	tools/objtrace/x86timer.hpp	/^double sum;$/;"	m	class:x86timer
super	include/IR/CFG.h	/^                                                                    Ptr*> super;$/;"	t	class:llvm::PredIterator
super	include/IR/CFG.h	/^  super;$/;"	t	class:llvm::SuccIterator
super	include/IR/GetElementPtrTypeIterator.h	/^                          Type *, ptrdiff_t> super;$/;"	t	class:llvm::generic_gep_type_iterator
swap	include/IR/PassManager.h	/^  friend void swap(ModuleToFunctionPassAdaptor &LHS,$/;"	f	class:llvm::ModuleToFunctionPassAdaptor
swap	include/IR/PassManager.h	/^  friend void swap(PreservedAnalyses &LHS, PreservedAnalyses &RHS) {$/;"	f	class:llvm::PreservedAnalyses
swap	include/IR/PassManagerInternal.h	/^  friend void swap(AnalysisPassModel &LHS, AnalysisPassModel &RHS) {$/;"	f	struct:llvm::detail::AnalysisPassModel
swap	include/IR/PassManagerInternal.h	/^  friend void swap(AnalysisResultModel &LHS, AnalysisResultModel &RHS) {$/;"	f	struct:llvm::detail::AnalysisResultModel
swap	include/IR/PassManagerInternal.h	/^  friend void swap(PassModel &LHS, PassModel &RHS) {$/;"	f	struct:llvm::detail::PassModel
swapOperands	include/IR/Instructions.h	/^  void swapOperands() {$/;"	f	class:llvm::FCmpInst
swapOperands	include/IR/Instructions.h	/^  void swapOperands() {$/;"	f	class:llvm::ICmpInst
t	tools/camp/campExecRuntime.cpp	/^armtimer t;$/;"	v
t	tools/camp/campExecRuntime.cpp	/^x86timer t;$/;"	v
t	tools/objtrace/objtraceruntime.cpp	/^x86timer t;$/;"	v
takeReplaceableUses	include/IR/Metadata.h	/^  std::unique_ptr<ReplaceableMetadataImpl> takeReplaceableUses() {$/;"	f	class:llvm::ContextAndReplaceableUses
td_attrs	include/IR/Attributes.h	/^  td_const_range td_attrs() const {$/;"	f	class:llvm::AttrBuilder
td_attrs	include/IR/Attributes.h	/^  td_range td_attrs() { return td_range(td_begin(), td_end()); }$/;"	f	class:llvm::AttrBuilder
td_begin	include/IR/Attributes.h	/^  td_const_iterator td_begin() const { return TargetDepAttrs.begin(); }$/;"	f	class:llvm::AttrBuilder
td_begin	include/IR/Attributes.h	/^  td_iterator td_begin()             { return TargetDepAttrs.begin(); }$/;"	f	class:llvm::AttrBuilder
td_const_iterator	include/IR/Attributes.h	/^  typedef std::map<std::string, std::string>::const_iterator td_const_iterator;$/;"	t	class:llvm::AttrBuilder
td_const_range	include/IR/Attributes.h	/^  typedef llvm::iterator_range<td_const_iterator>            td_const_range;$/;"	t	class:llvm::AttrBuilder
td_empty	include/IR/Attributes.h	/^  bool td_empty() const              { return TargetDepAttrs.empty(); }$/;"	f	class:llvm::AttrBuilder
td_end	include/IR/Attributes.h	/^  td_const_iterator td_end() const   { return TargetDepAttrs.end(); }$/;"	f	class:llvm::AttrBuilder
td_end	include/IR/Attributes.h	/^  td_iterator td_end()               { return TargetDepAttrs.end(); }$/;"	f	class:llvm::AttrBuilder
td_iterator	include/IR/Attributes.h	/^  typedef std::map<std::string, std::string>::iterator       td_iterator;$/;"	t	class:llvm::AttrBuilder
td_range	include/IR/Attributes.h	/^  typedef llvm::iterator_range<td_iterator>                  td_range;$/;"	t	class:llvm::AttrBuilder
td_type	include/IR/Attributes.h	/^  typedef std::pair<std::string, std::string>                td_type;$/;"	t	class:llvm::AttrBuilder
testAndTraverse	lib/AliasAnalysis/LoopTraverse.cpp	/^unsigned LoopTraverse::testAndTraverse(Instruction *inst){$/;"	f	class:LoopTraverse
times	tools/camp/x86timer.hpp	/^int times;$/;"	m	class:x86timer
times	tools/objtrace/x86timer.hpp	/^int times;$/;"	m	class:x86timer
tmpSometime	tools/camp/campExecRuntime.cpp	/^static double tmpSometime = 0.0;$/;"	v	file:
tmpSometime	tools/camp/campExecRuntime.cpp	/^static unsigned int tmpSometime = 0.0;$/;"	v	file:
tmpTimeOfContext	tools/camp/campExecRuntime.cpp	/^std::unordered_map<CntxID, double> *tmpTimeOfContext;$/;"	v
tmpTimeOfContext	tools/camp/campExecRuntime.cpp	/^std::unordered_map<CntxID, unsigned int> *tmpTimeOfContext;$/;"	v
toPtr	include/IR/SymbolTableListTraits.h	/^  static ValueSymbolTable *toPtr(ValueSymbolTable &R) { return &R; }$/;"	f	class:llvm::SymbolTableListTraits
toPtr	include/IR/SymbolTableListTraits.h	/^  static ValueSymbolTable *toPtr(ValueSymbolTable *P) { return P; }$/;"	f	class:llvm::SymbolTableListTraits
top	include/IR/LegacyPassManagers.h	/^  PMDataManager *top() const { return S.back(); }$/;"	f	class:llvm::PMStack
totalLooptime	tools/camp/campExecRuntime.cpp	/^static double totalLooptime = 0.0;$/;"	v	file:
totalSometime	tools/camp/campExecRuntime.cpp	/^static double totalSometime = 0.0;$/;"	v	file:
totalSometime	tools/camp/campExecRuntime.cpp	/^static unsigned int totalSometime = 0.0;$/;"	v	file:
totalfunctime	tools/camp/campExecRuntime.cpp	/^static double totalfunctime = 0.0;$/;"	v	file:
track	include/IR/Metadata.h	/^  void track(Metadata *Owner) {$/;"	f	class:llvm::MDOperand
track	include/IR/MetadataTracking.h	/^  static bool track(Metadata *&MD) {$/;"	f	class:llvm::MetadataTracking
track	include/IR/MetadataTracking.h	/^  static bool track(void *Ref, Metadata &MD, Metadata &Owner) {$/;"	f	class:llvm::MetadataTracking
track	include/IR/MetadataTracking.h	/^  static bool track(void *Ref, Metadata &MD, MetadataAsValue &Owner) {$/;"	f	class:llvm::MetadataTracking
track	include/IR/TrackingMDRef.h	/^  void track() {$/;"	f	class:llvm::TrackingMDRef
transform	lib/Utilities/FindFunctionExitBB.cpp	/^void FindFunctionExitBB::transform(Function *fun){$/;"	f	class:FindFunctionExitBB
traverseAndMarkRecCalls	lib/AliasAnalysis/RecursiveFuncAnal.cpp	/^void RecursiveFuncAnal::traverseAndMarkRecCalls(Function *curFun){$/;"	f	class:RecursiveFuncAnal
typeBasedMatching	include/corelab/AliasAnalysis/IndirectCallAnal.hpp	/^			Matching typeBasedMatching; \/\/matched by Function prototype (Function return type, and formal argument types)$/;"	m	class:corelab::IndirectCallAnal
typeBasedMatching	lib/AliasAnalysis/IndirectCallAnal.hpp	/^			Matching typeBasedMatching; \/\/matched by Function prototype (Function return type, and formal argument types)$/;"	m	class:corelab::IndirectCallAnal
type_count	include/IR/DebugInfo.h	/^  unsigned type_count() const { return TYs.size(); }$/;"	f	class:llvm::DebugInfoFinder
type_iterator	include/IR/DebugInfo.h	/^  typedef SmallVectorImpl<DIType>::const_iterator type_iterator;$/;"	t	class:llvm::DebugInfoFinder
types	include/IR/DebugInfo.h	/^  iterator_range<type_iterator> types() const {$/;"	f	class:llvm::DebugInfoFinder
types	include/IR/TypeBuilder.h	/^namespace types {$/;"	n	namespace:llvm
ucID	include/corelab/CAMP/ContextTreeBuilder.h	/^			UniqueContextID ucID;$/;"	m	class:corelab::ContextTree
ucID	lib/CAMP/ContextTreeBuilder.h	/^			UniqueContextID ucID;$/;"	m	class:corelab::ContextTree
ufmax_pred_ty	include/IR/PatternMatch.h	/^struct ufmax_pred_ty {$/;"	s	namespace:llvm::PatternMatch
ufmin_pred_ty	include/IR/PatternMatch.h	/^struct ufmin_pred_ty {$/;"	s	namespace:llvm::PatternMatch
uge	include/IR/Constants.h	/^  bool uge(uint64_t Num) const {$/;"	f	class:llvm::ConstantInt
uint64_t	tools/camp/x86timer.hpp	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	tools/objtrace/x86timer.hpp	/^typedef unsigned __int64 uint64_t;$/;"	t
umax_pred_ty	include/IR/PatternMatch.h	/^struct umax_pred_ty {$/;"	s	namespace:llvm::PatternMatch
umin_pred_ty	include/IR/PatternMatch.h	/^struct umin_pred_ty {$/;"	s	namespace:llvm::PatternMatch
unix	tools/camp/x86timer.hpp	22;"	d
unix	tools/objtrace/x86timer.hpp	22;"	d
unsafeAlgebra	include/IR/Operator.h	/^  bool unsafeAlgebra()   { return 0 != (Flags & UnsafeAlgebra); }$/;"	f	class:llvm::FastMathFlags
untrack	include/IR/Metadata.h	/^  void untrack() {$/;"	f	class:llvm::MDOperand
untrack	include/IR/MetadataTracking.h	/^  static void untrack(Metadata *&MD) { untrack(&MD, *MD); }$/;"	f	class:llvm::MetadataTracking
untrack	include/IR/TrackingMDRef.h	/^  void untrack() {$/;"	f	class:llvm::TrackingMDRef
unwrap	include/IR/DataLayout.h	/^inline DataLayout *unwrap(LLVMTargetDataRef P) {$/;"	f	namespace:llvm
unwrap	include/IR/LLVMContext.h	/^inline LLVMContext **unwrap(LLVMContextRef* Tys) {$/;"	f	namespace:llvm
unwrap	include/IR/Module.h	/^inline Module *unwrap(LLVMModuleProviderRef MP) {$/;"	f	namespace:llvm
unwrap	include/IR/Type.h	/^inline Type **unwrap(LLVMTypeRef* Tys) {$/;"	f	namespace:llvm
unwrap	include/IR/Value.h	/^inline T **unwrap(LLVMValueRef *Vals, unsigned Length) {$/;"	f	namespace:llvm
unwrap	include/IR/Value.h	/^inline Value **unwrap(LLVMValueRef *Vals) {$/;"	f	namespace:llvm
use_begin	include/IR/Value.h	/^  const_use_iterator use_begin() const { return const_use_iterator(UseList); }$/;"	f	class:llvm::Value
use_begin	include/IR/Value.h	/^  use_iterator       use_begin()       { return use_iterator(UseList); }$/;"	f	class:llvm::Value
use_empty	include/IR/Value.h	/^  bool               use_empty() const { return UseList == nullptr; }$/;"	f	class:llvm::Value
use_end	include/IR/Value.h	/^  const_use_iterator use_end()   const { return const_use_iterator();   }$/;"	f	class:llvm::Value
use_end	include/IR/Value.h	/^  use_iterator       use_end()         { return use_iterator();   }$/;"	f	class:llvm::Value
use_iterator	include/IR/Value.h	/^  typedef use_iterator_impl<Use>       use_iterator;$/;"	t	class:llvm::Value
use_iterator_impl	include/IR/Value.h	/^    explicit use_iterator_impl(UseT *u) : U(u) {}$/;"	f	class:llvm::Value::use_iterator_impl
use_iterator_impl	include/IR/Value.h	/^    use_iterator_impl() : U() {}$/;"	f	class:llvm::Value::use_iterator_impl
use_iterator_impl	include/IR/Value.h	/^  class use_iterator_impl$/;"	c	class:llvm::Value
user_back	include/IR/Instruction.h	/^  Instruction       *user_back()       { return cast<Instruction>(*user_begin());}$/;"	f	class:llvm::Instruction
user_back	include/IR/Instruction.h	/^  const Instruction *user_back() const { return cast<Instruction>(*user_begin());}$/;"	f	class:llvm::Instruction
user_back	include/IR/Value.h	/^  User               *user_back()        { return *user_begin(); }$/;"	f	class:llvm::Value
user_back	include/IR/Value.h	/^  const User         *user_back()  const { return *user_begin(); }$/;"	f	class:llvm::Value
user_begin	include/IR/Value.h	/^  const_user_iterator user_begin() const { return const_user_iterator(UseList); }$/;"	f	class:llvm::Value
user_begin	include/IR/Value.h	/^  user_iterator       user_begin()       { return user_iterator(UseList); }$/;"	f	class:llvm::Value
user_empty	include/IR/Value.h	/^  bool               user_empty() const { return UseList == nullptr; }$/;"	f	class:llvm::Value
user_end	include/IR/Value.h	/^  const_user_iterator user_end()   const { return const_user_iterator();   }$/;"	f	class:llvm::Value
user_end	include/IR/Value.h	/^  user_iterator       user_end()         { return user_iterator();   }$/;"	f	class:llvm::Value
user_iterator	include/IR/Value.h	/^  typedef user_iterator_impl<User>       user_iterator;$/;"	t	class:llvm::Value
user_iterator_impl	include/IR/Value.h	/^    explicit user_iterator_impl(Use *U) : UI(U) {}$/;"	f	class:llvm::Value::user_iterator_impl
user_iterator_impl	include/IR/Value.h	/^    user_iterator_impl() {}$/;"	f	class:llvm::Value::user_iterator_impl
user_iterator_impl	include/IR/Value.h	/^  class user_iterator_impl$/;"	c	class:llvm::Value
users	include/IR/Value.h	/^  iterator_range<const_user_iterator> users() const {$/;"	f	class:llvm::Value
users	include/IR/Value.h	/^  iterator_range<user_iterator> users() {$/;"	f	class:llvm::Value
uses	include/IR/Value.h	/^  iterator_range<const_use_iterator> uses() const {$/;"	f	class:llvm::Value
uses	include/IR/Value.h	/^  iterator_range<use_iterator> uses() {$/;"	f	class:llvm::Value
utilities	include/corelab/Utilities/StandardLibraryFunctionsName.h	/^	namespace utilities{$/;"	n	namespace:corelab
validAlignment	include/IR/DataLayout.h	/^  bool validAlignment(const LayoutAlignElem &align) const {$/;"	f	class:llvm::DataLayout
validPointer	include/IR/DataLayout.h	/^  bool validPointer(const PointerAlignElem &align) const {$/;"	f	class:llvm::DataLayout
value	include/IR/CFG.h	/^  static const bool value = isPodLike<T>::value;$/;"	m	struct:llvm::isPodLike
value	include/IR/Metadata.h	/^  static const bool value = std::is_base_of<Constant, V>::value &&$/;"	m	struct:llvm::mdconst::detail::IsValidPointer
value	include/IR/Metadata.h	/^  static const bool value = std::is_base_of<Constant, V>::value &&$/;"	m	struct:llvm::mdconst::detail::IsValidReference
value	include/IR/Metadata.h	/^  static const bool value =$/;"	m	struct:llvm::mdconst::detail::HasDereference
value	include/IR/ValueHandle.h	/^  static const bool value = true;$/;"	m	struct:llvm::isPodLike
value_op_begin	include/IR/User.h	/^  inline value_op_iterator value_op_begin() {$/;"	f	class:llvm::User
value_op_end	include/IR/User.h	/^  inline value_op_iterator value_op_end() {$/;"	f	class:llvm::User
value_op_iterator	include/IR/User.h	/^    explicit value_op_iterator(Use *U = nullptr) : iterator_adaptor_base(U) {}$/;"	f	struct:llvm::User::value_op_iterator
value_op_iterator	include/IR/User.h	/^  struct value_op_iterator$/;"	s	class:llvm::User
value_type	include/IR/InstIterator.h	/^  typedef IIty                            value_type;$/;"	t	class:llvm::InstIterator
value_type	include/IR/ValueMap.h	/^  typedef std::pair<KeyT, ValueT> value_type;$/;"	t	class:llvm::ValueMap
verify	include/IR/Statepoint.h	/^  void verify() {$/;"	f	class:llvm::StatepointBase
verifyUCID	lib/CAMP/ContextTreeBuilder.cpp	/^bool ContextTreeBuilder::verifyUCID(){$/;"	f	class:ContextTreeBuilder
visit	include/IR/InstVisitor.h	/^  RetTy visit(Instruction &I) {$/;"	f	class:llvm::InstVisitor
visit	include/IR/InstVisitor.h	/^  RetTy visit(Instruction *I)  { return visit(*I); }$/;"	f	class:llvm::InstVisitor
visit	include/IR/InstVisitor.h	/^  void visit(BasicBlock   *BB) { visit(*BB); }$/;"	f	class:llvm::InstVisitor
visit	include/IR/InstVisitor.h	/^  void visit(BasicBlock &BB) {$/;"	f	class:llvm::InstVisitor
visit	include/IR/InstVisitor.h	/^  void visit(Function     *F)  { visit(*F); }$/;"	f	class:llvm::InstVisitor
visit	include/IR/InstVisitor.h	/^  void visit(Function &F) {$/;"	f	class:llvm::InstVisitor
visit	include/IR/InstVisitor.h	/^  void visit(Iterator Start, Iterator End) {$/;"	f	class:llvm::InstVisitor
visit	include/IR/InstVisitor.h	/^  void visit(Module       *M)  { visit(*M); }$/;"	f	class:llvm::InstVisitor
visit	include/IR/InstVisitor.h	/^  void visit(Module &M) {$/;"	f	class:llvm::InstVisitor
visitAddrSpaceCastInst	include/IR/InstVisitor.h	/^  RetTy visitAddrSpaceCastInst(AddrSpaceCastInst &I) { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitAllocaInst	include/IR/InstVisitor.h	/^  RetTy visitAllocaInst(AllocaInst &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitAtomicCmpXchgInst	include/IR/InstVisitor.h	/^  RetTy visitAtomicCmpXchgInst(AtomicCmpXchgInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitAtomicRMWInst	include/IR/InstVisitor.h	/^  RetTy visitAtomicRMWInst(AtomicRMWInst &I)      { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitBasicBlock	include/IR/InstVisitor.h	/^  void visitBasicBlock(BasicBlock &BB) {}$/;"	f	class:llvm::InstVisitor
visitBinaryOperator	include/IR/InstVisitor.h	/^  RetTy visitBinaryOperator(BinaryOperator &I)    { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitBitCastInst	include/IR/InstVisitor.h	/^  RetTy visitBitCastInst(BitCastInst &I)          { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitBranchInst	include/IR/InstVisitor.h	/^  RetTy visitBranchInst(BranchInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitCallInst	include/IR/InstVisitor.h	/^  RetTy visitCallInst(CallInst &I) {$/;"	f	class:llvm::InstVisitor
visitCallSite	include/IR/InstVisitor.h	/^  RetTy visitCallSite(CallSite CS) {$/;"	f	class:llvm::InstVisitor
visitCastInst	include/IR/InstVisitor.h	/^  RetTy visitCastInst(CastInst &I)                { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitCmpInst	include/IR/InstVisitor.h	/^  RetTy visitCmpInst(CmpInst &I)                  { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitDbgDeclareInst	include/IR/InstVisitor.h	/^  RetTy visitDbgDeclareInst(DbgDeclareInst &I)    { DELEGATE(DbgInfoIntrinsic);}$/;"	f	class:llvm::InstVisitor
visitDbgInfoIntrinsic	include/IR/InstVisitor.h	/^  RetTy visitDbgInfoIntrinsic(DbgInfoIntrinsic &I) { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitDbgValueInst	include/IR/InstVisitor.h	/^  RetTy visitDbgValueInst(DbgValueInst &I)        { DELEGATE(DbgInfoIntrinsic);}$/;"	f	class:llvm::InstVisitor
visitExtractElementInst	include/IR/InstVisitor.h	/^  RetTy visitExtractElementInst(ExtractElementInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitExtractValueInst	include/IR/InstVisitor.h	/^  RetTy visitExtractValueInst(ExtractValueInst &I){ DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitFCmpInst	include/IR/InstVisitor.h	/^  RetTy visitFCmpInst(FCmpInst &I)                { DELEGATE(CmpInst);}$/;"	f	class:llvm::InstVisitor
visitFPExtInst	include/IR/InstVisitor.h	/^  RetTy visitFPExtInst(FPExtInst &I)              { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPToSIInst	include/IR/InstVisitor.h	/^  RetTy visitFPToSIInst(FPToSIInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPToUIInst	include/IR/InstVisitor.h	/^  RetTy visitFPToUIInst(FPToUIInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPTruncInst	include/IR/InstVisitor.h	/^  RetTy visitFPTruncInst(FPTruncInst &I)          { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFenceInst	include/IR/InstVisitor.h	/^  RetTy visitFenceInst(FenceInst   &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitFunction	include/IR/InstVisitor.h	/^  void visitFunction  (Function &F) {}$/;"	f	class:llvm::InstVisitor
visitGetElementPtrInst	include/IR/InstVisitor.h	/^  RetTy visitGetElementPtrInst(GetElementPtrInst &I){ DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitICmpInst	include/IR/InstVisitor.h	/^  RetTy visitICmpInst(ICmpInst &I)                { DELEGATE(CmpInst);}$/;"	f	class:llvm::InstVisitor
visitIndirectBrInst	include/IR/InstVisitor.h	/^  RetTy visitIndirectBrInst(IndirectBrInst &I)    { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitInsertElementInst	include/IR/InstVisitor.h	/^  RetTy visitInsertElementInst(InsertElementInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitInsertValueInst	include/IR/InstVisitor.h	/^  RetTy visitInsertValueInst(InsertValueInst &I)  { DELEGATE(Instruction); }$/;"	f	class:llvm::InstVisitor
visitInstruction	include/IR/InstVisitor.h	/^  void visitInstruction(Instruction &I) {}  \/\/ Ignore unhandled instructions$/;"	f	class:llvm::InstVisitor
visitIntToPtrInst	include/IR/InstVisitor.h	/^  RetTy visitIntToPtrInst(IntToPtrInst &I)        { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitIntrinsicInst	include/IR/InstVisitor.h	/^  RetTy visitIntrinsicInst(IntrinsicInst &I)      { DELEGATE(CallInst); }$/;"	f	class:llvm::InstVisitor
visitInvokeInst	include/IR/InstVisitor.h	/^  RetTy visitInvokeInst(InvokeInst &I) {$/;"	f	class:llvm::InstVisitor
visitLandingPadInst	include/IR/InstVisitor.h	/^  RetTy visitLandingPadInst(LandingPadInst &I)    { DELEGATE(Instruction); }$/;"	f	class:llvm::InstVisitor
visitLoadInst	include/IR/InstVisitor.h	/^  RetTy visitLoadInst(LoadInst     &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitMemCpyInst	include/IR/InstVisitor.h	/^  RetTy visitMemCpyInst(MemCpyInst &I)            { DELEGATE(MemTransferInst); }$/;"	f	class:llvm::InstVisitor
visitMemIntrinsic	include/IR/InstVisitor.h	/^  RetTy visitMemIntrinsic(MemIntrinsic &I)        { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitMemMoveInst	include/IR/InstVisitor.h	/^  RetTy visitMemMoveInst(MemMoveInst &I)          { DELEGATE(MemTransferInst); }$/;"	f	class:llvm::InstVisitor
visitMemSetInst	include/IR/InstVisitor.h	/^  RetTy visitMemSetInst(MemSetInst &I)            { DELEGATE(MemIntrinsic); }$/;"	f	class:llvm::InstVisitor
visitMemTransferInst	include/IR/InstVisitor.h	/^  RetTy visitMemTransferInst(MemTransferInst &I)  { DELEGATE(MemIntrinsic); }$/;"	f	class:llvm::InstVisitor
visitModule	include/IR/InstVisitor.h	/^  void visitModule    (Module &M) {}$/;"	f	class:llvm::InstVisitor
visitPHINode	include/IR/InstVisitor.h	/^  RetTy visitPHINode(PHINode       &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitPtrToIntInst	include/IR/InstVisitor.h	/^  RetTy visitPtrToIntInst(PtrToIntInst &I)        { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitResumeInst	include/IR/InstVisitor.h	/^  RetTy visitResumeInst(ResumeInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitReturnInst	include/IR/InstVisitor.h	/^  RetTy visitReturnInst(ReturnInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitSExtInst	include/IR/InstVisitor.h	/^  RetTy visitSExtInst(SExtInst &I)                { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitSIToFPInst	include/IR/InstVisitor.h	/^  RetTy visitSIToFPInst(SIToFPInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitSelectInst	include/IR/InstVisitor.h	/^  RetTy visitSelectInst(SelectInst &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitShuffleVectorInst	include/IR/InstVisitor.h	/^  RetTy visitShuffleVectorInst(ShuffleVectorInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitStoreInst	include/IR/InstVisitor.h	/^  RetTy visitStoreInst(StoreInst   &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitSwitchInst	include/IR/InstVisitor.h	/^  RetTy visitSwitchInst(SwitchInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitTerminatorInst	include/IR/InstVisitor.h	/^  RetTy visitTerminatorInst(TerminatorInst &I)    { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitTruncInst	include/IR/InstVisitor.h	/^  RetTy visitTruncInst(TruncInst &I)              { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitUIToFPInst	include/IR/InstVisitor.h	/^  RetTy visitUIToFPInst(UIToFPInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitUnaryInstruction	include/IR/InstVisitor.h	/^  RetTy visitUnaryInstruction(UnaryInstruction &I){ DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitUnreachableInst	include/IR/InstVisitor.h	/^  RetTy visitUnreachableInst(UnreachableInst &I)  { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitVAArgInst	include/IR/InstVisitor.h	/^  RetTy visitVAArgInst(VAArgInst   &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitVACopyInst	include/IR/InstVisitor.h	/^  RetTy visitVACopyInst(VACopyInst &I)            { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitVAEndInst	include/IR/InstVisitor.h	/^  RetTy visitVAEndInst(VAEndInst &I)              { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitVAStartInst	include/IR/InstVisitor.h	/^  RetTy visitVAStartInst(VAStartInst &I)          { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitZExtInst	include/IR/InstVisitor.h	/^  RetTy visitZExtInst(ZExtInst &I)                { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
vm_state_args	include/IR/Statepoint.h	/^  iterator_range<arg_iterator> vm_state_args() {$/;"	f	class:llvm::StatepointBase
vm_state_begin	include/IR/Statepoint.h	/^  typename CallSiteTy::arg_iterator vm_state_begin() {$/;"	f	class:llvm::StatepointBase
vm_state_end	include/IR/Statepoint.h	/^  typename CallSiteTy::arg_iterator vm_state_end() {$/;"	f	class:llvm::StatepointBase
vmap	include/IR/ValueSymbolTable.h	/^  ValueMap vmap;                    \/\/\/< The map that holds the symbol table.$/;"	m	class:llvm::ValueSymbolTable
withInline	include/IR/DebugInfoMetadata.h	/^  MDLocalVariable *withInline(MDLocation *InlinedAt) const {$/;"	f	class:llvm::MDLocalVariable
withoutInline	include/IR/DebugInfoMetadata.h	/^  MDLocalVariable *withoutInline() const { return withInline(nullptr); }$/;"	f	class:llvm::MDLocalVariable
wrap	include/IR/DataLayout.h	/^inline LLVMTargetDataRef wrap(const DataLayout *P) {$/;"	f	namespace:llvm
wrap	include/IR/LLVMContext.h	/^inline LLVMContextRef *wrap(const LLVMContext **Tys) {$/;"	f	namespace:llvm
wrap	include/IR/Type.h	/^inline LLVMTypeRef *wrap(Type **Tys) {$/;"	f	namespace:llvm
wrap	include/IR/Value.h	/^inline LLVMValueRef *wrap(const Value **Vals) {$/;"	f	namespace:llvm
x86_fp80	include/IR/TypeBuilder.h	/^class x86_fp80 {};$/;"	c	namespace:llvm::types
x86_mmx	include/IR/TypeBuilder.h	/^class x86_mmx {};$/;"	c	namespace:llvm::types
x86timer	tools/camp/x86timer.hpp	/^class x86timer {$/;"	c
x86timer	tools/camp/x86timer.hpp	/^x86timer() {$/;"	f	class:x86timer
x86timer	tools/objtrace/x86timer.hpp	/^class x86timer {$/;"	c
x86timer	tools/objtrace/x86timer.hpp	/^x86timer() {$/;"	f	class:x86timer
zeroDigitTag	include/IR/Use.h	/^  enum PrevPtrTag { zeroDigitTag, oneDigitTag, stopTag, fullStopTag };$/;"	e	enum:llvm::Use::PrevPtrTag
~AnalysisPassConcept	include/IR/PassManagerInternal.h	/^  virtual ~AnalysisPassConcept() {}$/;"	f	struct:llvm::detail::AnalysisPassConcept
~AnalysisResultConcept	include/IR/PassManagerInternal.h	/^  virtual ~AnalysisResultConcept() {}$/;"	f	struct:llvm::detail::AnalysisResultConcept
~CallbackVH	include/IR/ValueHandle.h	/^  virtual ~CallbackVH() {}$/;"	f	class:llvm::CallbackVH
~ConstantDataSequential	include/IR/Constants.h	/^  ~ConstantDataSequential() { delete Next; }$/;"	f	class:llvm::ConstantDataSequential
~ContextAndReplaceableUses	include/IR/Metadata.h	/^  ~ContextAndReplaceableUses() { delete getReplaceableUses(); }$/;"	f	class:llvm::ContextAndReplaceableUses
~DebugNode	include/IR/DebugInfoMetadata.h	/^  ~DebugNode() {}$/;"	f	class:llvm::DebugNode
~DiagnosticInfo	include/IR/DiagnosticInfo.h	/^  virtual ~DiagnosticInfo() {}$/;"	f	class:llvm::DiagnosticInfo
~DiagnosticPrinter	include/IR/DiagnosticPrinter.h	/^  virtual ~DiagnosticPrinter() {}$/;"	f	class:llvm::DiagnosticPrinter
~FastMathFlagGuard	include/IR/IRBuilder.h	/^    ~FastMathFlagGuard() {$/;"	f	class:llvm::IRBuilderBase::FastMathFlagGuard
~GenericDebugNode	include/IR/DebugInfoMetadata.h	/^  ~GenericDebugNode() { dropAllReferences(); }$/;"	f	class:llvm::GenericDebugNode
~GlobalValue	include/IR/GlobalValue.h	/^  ~GlobalValue() {$/;"	f	class:llvm::GlobalValue
~GlobalVariable	include/IR/GlobalVariable.h	/^  ~GlobalVariable() {$/;"	f	class:llvm::GlobalVariable
~InsertPointGuard	include/IR/IRBuilder.h	/^    ~InsertPointGuard() {$/;"	f	class:llvm::IRBuilderBase::InsertPointGuard
~MDBasicType	include/IR/DebugInfoMetadata.h	/^  ~MDBasicType() {}$/;"	f	class:llvm::MDBasicType
~MDCompileUnit	include/IR/DebugInfoMetadata.h	/^  ~MDCompileUnit() {}$/;"	f	class:llvm::MDCompileUnit
~MDCompositeType	include/IR/DebugInfoMetadata.h	/^  ~MDCompositeType() {}$/;"	f	class:llvm::MDCompositeType
~MDCompositeTypeBase	include/IR/DebugInfoMetadata.h	/^  ~MDCompositeTypeBase() {}$/;"	f	class:llvm::MDCompositeTypeBase
~MDDerivedType	include/IR/DebugInfoMetadata.h	/^  ~MDDerivedType() {}$/;"	f	class:llvm::MDDerivedType
~MDDerivedTypeBase	include/IR/DebugInfoMetadata.h	/^  ~MDDerivedTypeBase() {}$/;"	f	class:llvm::MDDerivedTypeBase
~MDEnumerator	include/IR/DebugInfoMetadata.h	/^  ~MDEnumerator() {}$/;"	f	class:llvm::MDEnumerator
~MDExpression	include/IR/DebugInfoMetadata.h	/^  ~MDExpression() {}$/;"	f	class:llvm::MDExpression
~MDFile	include/IR/DebugInfoMetadata.h	/^  ~MDFile() {}$/;"	f	class:llvm::MDFile
~MDGlobalVariable	include/IR/DebugInfoMetadata.h	/^  ~MDGlobalVariable() {}$/;"	f	class:llvm::MDGlobalVariable
~MDImportedEntity	include/IR/DebugInfoMetadata.h	/^  ~MDImportedEntity() {}$/;"	f	class:llvm::MDImportedEntity
~MDLexicalBlock	include/IR/DebugInfoMetadata.h	/^  ~MDLexicalBlock() {}$/;"	f	class:llvm::MDLexicalBlock
~MDLexicalBlockBase	include/IR/DebugInfoMetadata.h	/^  ~MDLexicalBlockBase() {}$/;"	f	class:llvm::MDLexicalBlockBase
~MDLexicalBlockFile	include/IR/DebugInfoMetadata.h	/^  ~MDLexicalBlockFile() {}$/;"	f	class:llvm::MDLexicalBlockFile
~MDLocalScope	include/IR/DebugInfoMetadata.h	/^  ~MDLocalScope() {}$/;"	f	class:llvm::MDLocalScope
~MDLocalVariable	include/IR/DebugInfoMetadata.h	/^  ~MDLocalVariable() {}$/;"	f	class:llvm::MDLocalVariable
~MDLocation	include/IR/DebugInfoMetadata.h	/^  ~MDLocation() { dropAllReferences(); }$/;"	f	class:llvm::MDLocation
~MDNamespace	include/IR/DebugInfoMetadata.h	/^  ~MDNamespace() {}$/;"	f	class:llvm::MDNamespace
~MDNode	include/IR/Metadata.h	/^  ~MDNode() {}$/;"	f	class:llvm::MDNode
~MDObjCProperty	include/IR/DebugInfoMetadata.h	/^  ~MDObjCProperty() {}$/;"	f	class:llvm::MDObjCProperty
~MDOperand	include/IR/Metadata.h	/^  ~MDOperand() { untrack(); }$/;"	f	class:llvm::MDOperand
~MDScope	include/IR/DebugInfoMetadata.h	/^  ~MDScope() {}$/;"	f	class:llvm::MDScope
~MDSubprogram	include/IR/DebugInfoMetadata.h	/^  ~MDSubprogram() {}$/;"	f	class:llvm::MDSubprogram
~MDSubrange	include/IR/DebugInfoMetadata.h	/^  ~MDSubrange() {}$/;"	f	class:llvm::MDSubrange
~MDSubroutineType	include/IR/DebugInfoMetadata.h	/^  ~MDSubroutineType() {}$/;"	f	class:llvm::MDSubroutineType
~MDTemplateParameter	include/IR/DebugInfoMetadata.h	/^  ~MDTemplateParameter() {}$/;"	f	class:llvm::MDTemplateParameter
~MDTemplateTypeParameter	include/IR/DebugInfoMetadata.h	/^  ~MDTemplateTypeParameter() {}$/;"	f	class:llvm::MDTemplateTypeParameter
~MDTemplateValueParameter	include/IR/DebugInfoMetadata.h	/^  ~MDTemplateValueParameter() {}$/;"	f	class:llvm::MDTemplateValueParameter
~MDTuple	include/IR/Metadata.h	/^  ~MDTuple() { dropAllReferences(); }$/;"	f	class:llvm::MDTuple
~MDType	include/IR/DebugInfoMetadata.h	/^  ~MDType() {}$/;"	f	class:llvm::MDType
~MDVariable	include/IR/DebugInfoMetadata.h	/^  ~MDVariable() {}$/;"	f	class:llvm::MDVariable
~Metadata	include/IR/Metadata.h	/^  ~Metadata() {}$/;"	f	class:llvm::Metadata
~PassConcept	include/IR/PassManagerInternal.h	/^  virtual ~PassConcept() {}$/;"	f	struct:llvm::detail::PassConcept
~ReplaceableMetadataImpl	include/IR/Metadata.h	/^  ~ReplaceableMetadataImpl() {$/;"	f	class:llvm::ReplaceableMetadataImpl
~TrackingMDRef	include/IR/TrackingMDRef.h	/^  ~TrackingMDRef() { untrack(); }$/;"	f	class:llvm::TrackingMDRef
~Type	include/IR/Type.h	/^  ~Type() {}$/;"	f	class:llvm::Type
~Use	include/IR/Use.h	/^  ~Use() {$/;"	f	class:llvm::Use
~User	include/IR/User.h	/^  ~User() {$/;"	f	class:llvm::User
~ValueAsMetadata	include/IR/Metadata.h	/^  ~ValueAsMetadata() {}$/;"	f	class:llvm::ValueAsMetadata
~ValueHandleBase	include/IR/ValueHandle.h	/^  ~ValueHandleBase() {$/;"	f	class:llvm::ValueHandleBase
~ValueMap	include/IR/ValueMap.h	/^  ~ValueMap() {}$/;"	f	class:llvm::ValueMap
